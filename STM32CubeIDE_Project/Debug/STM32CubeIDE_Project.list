
STM32CubeIDE_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dcbc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012b8  0800de9c  0800de9c  0001de9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f154  0800f154  000202b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f154  0800f154  0001f154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f15c  0800f15c  000202b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f15c  0800f15c  0001f15c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f160  0800f160  0001f160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b8  20000000  0800f164  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005408  200002b8  0800f41c  000202b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200056c0  0800f41c  000256c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024894  00000000  00000000  000202e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005e33  00000000  00000000  00044b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020a8  00000000  00000000  0004a9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001dd0  00000000  00000000  0004ca58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cbb0  00000000  00000000  0004e828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000245aa  00000000  00000000  0007b3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7e31  00000000  00000000  0009f982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001977b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009930  00000000  00000000  00197804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200002b8 	.word	0x200002b8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800de84 	.word	0x0800de84

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200002bc 	.word	0x200002bc
 800021c:	0800de84 	.word	0x0800de84

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_ldivmod>:
 80002f0:	b97b      	cbnz	r3, 8000312 <__aeabi_ldivmod+0x22>
 80002f2:	b972      	cbnz	r2, 8000312 <__aeabi_ldivmod+0x22>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bfbe      	ittt	lt
 80002f8:	2000      	movlt	r0, #0
 80002fa:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002fe:	e006      	blt.n	800030e <__aeabi_ldivmod+0x1e>
 8000300:	bf08      	it	eq
 8000302:	2800      	cmpeq	r0, #0
 8000304:	bf1c      	itt	ne
 8000306:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800030a:	f04f 30ff 	movne.w	r0, #4294967295
 800030e:	f000 b9bf 	b.w	8000690 <__aeabi_idiv0>
 8000312:	f1ad 0c08 	sub.w	ip, sp, #8
 8000316:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031a:	2900      	cmp	r1, #0
 800031c:	db09      	blt.n	8000332 <__aeabi_ldivmod+0x42>
 800031e:	2b00      	cmp	r3, #0
 8000320:	db1a      	blt.n	8000358 <__aeabi_ldivmod+0x68>
 8000322:	f000 f84d 	bl	80003c0 <__udivmoddi4>
 8000326:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032e:	b004      	add	sp, #16
 8000330:	4770      	bx	lr
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	db1b      	blt.n	8000374 <__aeabi_ldivmod+0x84>
 800033c:	f000 f840 	bl	80003c0 <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	4252      	negs	r2, r2
 8000352:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000356:	4770      	bx	lr
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	f000 f82f 	bl	80003c0 <__udivmoddi4>
 8000362:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036a:	b004      	add	sp, #16
 800036c:	4240      	negs	r0, r0
 800036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000372:	4770      	bx	lr
 8000374:	4252      	negs	r2, r2
 8000376:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037a:	f000 f821 	bl	80003c0 <__udivmoddi4>
 800037e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000386:	b004      	add	sp, #16
 8000388:	4252      	negs	r2, r2
 800038a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <CMD_API_ParseCommand>:
 *********************************************************************************************************************/

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/
bool CMD_API_ParseCommand (sCmdApiParserArgs_t *cmd_api_args, char *separator) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	6039      	str	r1, [r7, #0]
    /* ASSERT */
    if (cmd_api_args->message == NULL) {
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d10b      	bne.n	80006be <CMD_API_ParseCommand+0x2a>
        snprintf(cmd_api_args->response_buffer, (int) cmd_api_args->message_length,
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	6898      	ldr	r0, [r3, #8]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	889b      	ldrh	r3, [r3, #4]
 80006ae:	4619      	mov	r1, r3
 80006b0:	4b36      	ldr	r3, [pc, #216]	; (800078c <CMD_API_ParseCommand+0xf8>)
 80006b2:	691b      	ldr	r3, [r3, #16]
 80006b4:	461a      	mov	r2, r3
 80006b6:	f00b faa9 	bl	800bc0c <sniprintf>
        static_debug_message_lut[eDebugMsg_ArgumentEmpty]);
        return false;
 80006ba:	2300      	movs	r3, #0
 80006bc:	e062      	b.n	8000784 <CMD_API_ParseCommand+0xf0>
    }

    /* FIND CALLBACK */
    char *token = NULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]
    bool following_args = StrContains(cmd_api_args->message, cmd_api_args->message_length, separator);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6818      	ldr	r0, [r3, #0]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	889b      	ldrh	r3, [r3, #4]
 80006ca:	683a      	ldr	r2, [r7, #0]
 80006cc:	4619      	mov	r1, r3
 80006ce:	f00a fbeb 	bl	800aea8 <StrContains>
 80006d2:	4603      	mov	r3, r0
 80006d4:	767b      	strb	r3, [r7, #25]
    token = strtok(cmd_api_args->message, separator);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	6839      	ldr	r1, [r7, #0]
 80006dc:	4618      	mov	r0, r3
 80006de:	f00b fb7b 	bl	800bdd8 <strtok>
 80006e2:	61f8      	str	r0, [r7, #28]
    for (uint16_t task = 0; task < cmd_api_args->static_lut_length; task++) {
 80006e4:	2300      	movs	r3, #0
 80006e6:	837b      	strh	r3, [r7, #26]
 80006e8:	e03a      	b.n	8000760 <CMD_API_ParseCommand+0xcc>
        if (StrCompare(token, cmd_api_args->static_lut[task].cmd_name) == true) {
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	691a      	ldr	r2, [r3, #16]
 80006ee:	8b7b      	ldrh	r3, [r7, #26]
 80006f0:	00db      	lsls	r3, r3, #3
 80006f2:	4413      	add	r3, r2
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4619      	mov	r1, r3
 80006f8:	69f8      	ldr	r0, [r7, #28]
 80006fa:	f00a fcc9 	bl	800b090 <StrCompare>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d02a      	beq.n	800075a <CMD_API_ParseCommand+0xc6>
            if (following_args == true) {
 8000704:	7e7b      	ldrb	r3, [r7, #25]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d004      	beq.n	8000714 <CMD_API_ParseCommand+0x80>
                token = strtok(NULL, separator);
 800070a:	6839      	ldr	r1, [r7, #0]
 800070c:	2000      	movs	r0, #0
 800070e:	f00b fb63 	bl	800bdd8 <strtok>
 8000712:	61f8      	str	r0, [r7, #28]
            }
            cmd_api_args->message = token;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	69fa      	ldr	r2, [r7, #28]
 8000718:	601a      	str	r2, [r3, #0]
            sCmdApi_CallbackArgs_t callback_arguments = {
                .arguments = cmd_api_args->message,
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
            sCmdApi_CallbackArgs_t callback_arguments = {
 800071e:	60bb      	str	r3, [r7, #8]
                .arguments_length = cmd_api_args->message_length,
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	889b      	ldrh	r3, [r3, #4]
            sCmdApi_CallbackArgs_t callback_arguments = {
 8000724:	81bb      	strh	r3, [r7, #12]
                .response_buffer = cmd_api_args->response_buffer,
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	689b      	ldr	r3, [r3, #8]
            sCmdApi_CallbackArgs_t callback_arguments = {
 800072a:	613b      	str	r3, [r7, #16]
                .response_buffer_length = cmd_api_args->response_buffer_length,
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	899b      	ldrh	r3, [r3, #12]
            sCmdApi_CallbackArgs_t callback_arguments = {
 8000730:	82bb      	strh	r3, [r7, #20]
            };

            if (cmd_api_args->static_lut[task].cmd_callback(&callback_arguments) == false) {
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	691a      	ldr	r2, [r3, #16]
 8000736:	8b7b      	ldrh	r3, [r7, #26]
 8000738:	00db      	lsls	r3, r3, #3
 800073a:	4413      	add	r3, r2
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	f107 0208 	add.w	r2, r7, #8
 8000742:	4610      	mov	r0, r2
 8000744:	4798      	blx	r3
 8000746:	4603      	mov	r3, r0
 8000748:	f083 0301 	eor.w	r3, r3, #1
 800074c:	b2db      	uxtb	r3, r3
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <CMD_API_ParseCommand+0xc2>
                return false;
 8000752:	2300      	movs	r3, #0
 8000754:	e016      	b.n	8000784 <CMD_API_ParseCommand+0xf0>
            } else {
                return true;
 8000756:	2301      	movs	r3, #1
 8000758:	e014      	b.n	8000784 <CMD_API_ParseCommand+0xf0>
    for (uint16_t task = 0; task < cmd_api_args->static_lut_length; task++) {
 800075a:	8b7b      	ldrh	r3, [r7, #26]
 800075c:	3301      	adds	r3, #1
 800075e:	837b      	strh	r3, [r7, #26]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	89db      	ldrh	r3, [r3, #14]
 8000764:	8b7a      	ldrh	r2, [r7, #26]
 8000766:	429a      	cmp	r2, r3
 8000768:	d3bf      	bcc.n	80006ea <CMD_API_ParseCommand+0x56>
            }
        }
    }

    /* CALLBACK NOT FOUND */
    if (token != NULL) {
 800076a:	69fb      	ldr	r3, [r7, #28]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d008      	beq.n	8000782 <CMD_API_ParseCommand+0xee>
        snprintf(cmd_api_args->response_buffer, cmd_api_args->response_buffer_length,
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	6898      	ldr	r0, [r3, #8]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	899b      	ldrh	r3, [r3, #12]
 8000778:	4619      	mov	r1, r3
 800077a:	69fb      	ldr	r3, [r7, #28]
 800077c:	4a04      	ldr	r2, [pc, #16]	; (8000790 <CMD_API_ParseCommand+0xfc>)
 800077e:	f00b fa45 	bl	800bc0c <sniprintf>
        "Command \"%s\" not found", token);
    }
    return false;
 8000782:	2300      	movs	r3, #0
}
 8000784:	4618      	mov	r0, r3
 8000786:	3720      	adds	r7, #32
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000000 	.word	0x20000000
 8000790:	0800de9c 	.word	0x0800de9c

08000794 <CMD_API_ParsePin>:
 *********************************************************************************************************************/

/**********************************************************************************************************************
 * Definitions of private functions
 *********************************************************************************************************************/
static bool CMD_API_ParsePin (sCmdApi_CallbackArgs_t *cmd_api_callback_args, eLedApiPinEnum_t *pin) {
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	6039      	str	r1, [r7, #0]
    /* Assert */
    if (cmd_api_callback_args->arguments == NULL) {
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d101      	bne.n	80007aa <CMD_API_ParsePin+0x16>
        return false;
 80007a6:	2300      	movs	r3, #0
 80007a8:	e026      	b.n	80007f8 <CMD_API_ParsePin+0x64>
    }
    StrRemChar(cmd_api_callback_args->arguments, BAD_CHARS);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4914      	ldr	r1, [pc, #80]	; (8000800 <CMD_API_ParsePin+0x6c>)
 80007b0:	4618      	mov	r0, r3
 80007b2:	f00a fbd7 	bl	800af64 <StrRemChar>
    bool status = false;
 80007b6:	2300      	movs	r3, #0
 80007b8:	73fb      	strb	r3, [r7, #15]

    /* Parse LED */
    char *token = strtok(cmd_api_callback_args->arguments, DELIM);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4911      	ldr	r1, [pc, #68]	; (8000804 <CMD_API_ParsePin+0x70>)
 80007c0:	4618      	mov	r0, r3
 80007c2:	f00b fb09 	bl	800bdd8 <strtok>
 80007c6:	60b8      	str	r0, [r7, #8]
    status = StrToUint(token, (uint16_t*) pin);
 80007c8:	6839      	ldr	r1, [r7, #0]
 80007ca:	68b8      	ldr	r0, [r7, #8]
 80007cc:	f00a fc7d 	bl	800b0ca <StrToUint>
 80007d0:	4603      	mov	r3, r0
 80007d2:	73fb      	strb	r3, [r7, #15]
    if (status != true) {
 80007d4:	7bfb      	ldrb	r3, [r7, #15]
 80007d6:	f083 0301 	eor.w	r3, r3, #1
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d00a      	beq.n	80007f6 <CMD_API_ParsePin+0x62>
        snprintf(cmd_api_callback_args->response_buffer, cmd_api_callback_args->response_buffer_length,
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6898      	ldr	r0, [r3, #8]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	899b      	ldrh	r3, [r3, #12]
 80007e8:	4619      	mov	r1, r3
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	4a06      	ldr	r2, [pc, #24]	; (8000808 <CMD_API_ParsePin+0x74>)
 80007ee:	f00b fa0d 	bl	800bc0c <sniprintf>
        "Argument LED-\"%s\" bad", token);
        return false;
 80007f2:	2300      	movs	r3, #0
 80007f4:	e000      	b.n	80007f8 <CMD_API_ParsePin+0x64>
    }
    return true;
 80007f6:	2301      	movs	r3, #1
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3710      	adds	r7, #16
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	0800deb4 	.word	0x0800deb4
 8000804:	0800deb8 	.word	0x0800deb8
 8000808:	0800debc 	.word	0x0800debc

0800080c <CMD_API_SetCallback>:

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/
bool CMD_API_SetCallback (sCmdApi_CallbackArgs_t *cmd_api_callback_args) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
    eLedApiPinEnum_t pin = eLedApiPin_Last;
 8000814:	2302      	movs	r3, #2
 8000816:	74fb      	strb	r3, [r7, #19]
    if (CMD_API_ParsePin(cmd_api_callback_args, &pin) == false) {
 8000818:	f107 0313 	add.w	r3, r7, #19
 800081c:	4619      	mov	r1, r3
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f7ff ffb8 	bl	8000794 <CMD_API_ParsePin>
 8000824:	4603      	mov	r3, r0
 8000826:	f083 0301 	eor.w	r3, r3, #1
 800082a:	b2db      	uxtb	r3, r3
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <CMD_API_SetCallback+0x28>
        return false;
 8000830:	2300      	movs	r3, #0
 8000832:	e02c      	b.n	800088e <CMD_API_SetCallback+0x82>
    }

    /* Add arguments to message queue */
    sLedAppTaskSet_t *set_task_arguments = Heap_API_Allocate(1, sizeof(sLedAppTaskSet_t));
 8000834:	2101      	movs	r1, #1
 8000836:	2001      	movs	r0, #1
 8000838:	f000 fa96 	bl	8000d68 <Heap_API_Allocate>
 800083c:	6178      	str	r0, [r7, #20]
    set_task_arguments->pin = pin;
 800083e:	7cfa      	ldrb	r2, [r7, #19]
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	701a      	strb	r2, [r3, #0]
    sLedAppTaskArgs_t task_args_message = {
 8000844:	2300      	movs	r3, #0
 8000846:	723b      	strb	r3, [r7, #8]
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	60fb      	str	r3, [r7, #12]
        .task = eCliAppCmd_SetLed,
        .task_args_struct = set_task_arguments
    };
    if (LED_APP_AddTask(&task_args_message) == false) {
 800084c:	f107 0308 	add.w	r3, r7, #8
 8000850:	4618      	mov	r0, r3
 8000852:	f002 f9ef 	bl	8002c34 <LED_APP_AddTask>
 8000856:	4603      	mov	r3, r0
 8000858:	f083 0301 	eor.w	r3, r3, #1
 800085c:	b2db      	uxtb	r3, r3
 800085e:	2b00      	cmp	r3, #0
 8000860:	d00b      	beq.n	800087a <CMD_API_SetCallback+0x6e>
        snprintf(cmd_api_callback_args->response_buffer, cmd_api_callback_args->response_buffer_length,
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	6898      	ldr	r0, [r3, #8]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	899b      	ldrh	r3, [r3, #12]
 800086a:	4619      	mov	r1, r3
 800086c:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <CMD_API_SetCallback+0x8c>)
 800086e:	689b      	ldr	r3, [r3, #8]
 8000870:	461a      	mov	r2, r3
 8000872:	f00b f9cb 	bl	800bc0c <sniprintf>
        static_debug_message_lut[eDebugMsg_MessageQueuePutFailed]);
        return false;
 8000876:	2300      	movs	r3, #0
 8000878:	e009      	b.n	800088e <CMD_API_SetCallback+0x82>
    }

    /* Creating message buffer */
    snprintf(cmd_api_callback_args->response_buffer, cmd_api_callback_args->response_buffer_length,
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	6898      	ldr	r0, [r3, #8]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	899b      	ldrh	r3, [r3, #12]
 8000882:	4619      	mov	r1, r3
 8000884:	7cfb      	ldrb	r3, [r7, #19]
 8000886:	4a05      	ldr	r2, [pc, #20]	; (800089c <CMD_API_SetCallback+0x90>)
 8000888:	f00b f9c0 	bl	800bc0c <sniprintf>
    "Set: Pin-%u", pin);
    return true;
 800088c:	2301      	movs	r3, #1
}
 800088e:	4618      	mov	r0, r3
 8000890:	3718      	adds	r7, #24
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000000 	.word	0x20000000
 800089c:	0800ded4 	.word	0x0800ded4

080008a0 <CMD_API_ResetCallback>:
bool CMD_API_ResetCallback (sCmdApi_CallbackArgs_t *cmd_api_callback_args) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
    eLedApiPinEnum_t pin = eLedApiPin_Last;
 80008a8:	2302      	movs	r3, #2
 80008aa:	74fb      	strb	r3, [r7, #19]
    if (CMD_API_ParsePin(cmd_api_callback_args, &pin) == false) {
 80008ac:	f107 0313 	add.w	r3, r7, #19
 80008b0:	4619      	mov	r1, r3
 80008b2:	6878      	ldr	r0, [r7, #4]
 80008b4:	f7ff ff6e 	bl	8000794 <CMD_API_ParsePin>
 80008b8:	4603      	mov	r3, r0
 80008ba:	f083 0301 	eor.w	r3, r3, #1
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <CMD_API_ResetCallback+0x28>
        return false;
 80008c4:	2300      	movs	r3, #0
 80008c6:	e02c      	b.n	8000922 <CMD_API_ResetCallback+0x82>
    }

    /* Add arguments to message queue */
    sLedAppTaskReset_t *reset_task_arguments = Heap_API_Allocate(1, sizeof(sLedAppTaskReset_t));
 80008c8:	2101      	movs	r1, #1
 80008ca:	2001      	movs	r0, #1
 80008cc:	f000 fa4c 	bl	8000d68 <Heap_API_Allocate>
 80008d0:	6178      	str	r0, [r7, #20]
    reset_task_arguments->pin = pin;
 80008d2:	7cfa      	ldrb	r2, [r7, #19]
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	701a      	strb	r2, [r3, #0]
    sLedAppTaskArgs_t task_args_message = {
 80008d8:	2301      	movs	r3, #1
 80008da:	723b      	strb	r3, [r7, #8]
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	60fb      	str	r3, [r7, #12]
        .task = eCliAppCmd_ResetLed,
        .task_args_struct = reset_task_arguments
    };
    if (LED_APP_AddTask(&task_args_message) == false) {
 80008e0:	f107 0308 	add.w	r3, r7, #8
 80008e4:	4618      	mov	r0, r3
 80008e6:	f002 f9a5 	bl	8002c34 <LED_APP_AddTask>
 80008ea:	4603      	mov	r3, r0
 80008ec:	f083 0301 	eor.w	r3, r3, #1
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d00b      	beq.n	800090e <CMD_API_ResetCallback+0x6e>
        snprintf(cmd_api_callback_args->response_buffer, cmd_api_callback_args->response_buffer_length,
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6898      	ldr	r0, [r3, #8]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	899b      	ldrh	r3, [r3, #12]
 80008fe:	4619      	mov	r1, r3
 8000900:	4b0a      	ldr	r3, [pc, #40]	; (800092c <CMD_API_ResetCallback+0x8c>)
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	461a      	mov	r2, r3
 8000906:	f00b f981 	bl	800bc0c <sniprintf>
        static_debug_message_lut[eDebugMsg_MessageQueuePutFailed]);
        return false;
 800090a:	2300      	movs	r3, #0
 800090c:	e009      	b.n	8000922 <CMD_API_ResetCallback+0x82>
    }

    /* Creating message buffer */
    snprintf(cmd_api_callback_args->response_buffer, cmd_api_callback_args->response_buffer_length,
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	6898      	ldr	r0, [r3, #8]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	899b      	ldrh	r3, [r3, #12]
 8000916:	4619      	mov	r1, r3
 8000918:	7cfb      	ldrb	r3, [r7, #19]
 800091a:	4a05      	ldr	r2, [pc, #20]	; (8000930 <CMD_API_ResetCallback+0x90>)
 800091c:	f00b f976 	bl	800bc0c <sniprintf>
    "Reset: Pin-%u", pin);
    return true;
 8000920:	2301      	movs	r3, #1
}
 8000922:	4618      	mov	r0, r3
 8000924:	3718      	adds	r7, #24
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000000 	.word	0x20000000
 8000930:	0800dee0 	.word	0x0800dee0

08000934 <CMD_API_ToggleCallback>:
bool CMD_API_ToggleCallback (sCmdApi_CallbackArgs_t *cmd_api_callback_args) {
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
    eLedApiPinEnum_t pin = eLedApiPin_Last;
 800093c:	2302      	movs	r3, #2
 800093e:	74fb      	strb	r3, [r7, #19]
    if (CMD_API_ParsePin(cmd_api_callback_args, &pin) == false) {
 8000940:	f107 0313 	add.w	r3, r7, #19
 8000944:	4619      	mov	r1, r3
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f7ff ff24 	bl	8000794 <CMD_API_ParsePin>
 800094c:	4603      	mov	r3, r0
 800094e:	f083 0301 	eor.w	r3, r3, #1
 8000952:	b2db      	uxtb	r3, r3
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <CMD_API_ToggleCallback+0x28>
        return false;
 8000958:	2300      	movs	r3, #0
 800095a:	e02c      	b.n	80009b6 <CMD_API_ToggleCallback+0x82>
    }

    /* Add arguments to message queue */
    sLedAppTaskToggle_t *toggle_task_arguments = Heap_API_Allocate(1, sizeof(sLedAppTaskToggle_t));
 800095c:	2101      	movs	r1, #1
 800095e:	2001      	movs	r0, #1
 8000960:	f000 fa02 	bl	8000d68 <Heap_API_Allocate>
 8000964:	6178      	str	r0, [r7, #20]
    toggle_task_arguments->pin = pin;
 8000966:	7cfa      	ldrb	r2, [r7, #19]
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	701a      	strb	r2, [r3, #0]
    sLedAppTaskArgs_t task_args_message = {
 800096c:	2302      	movs	r3, #2
 800096e:	723b      	strb	r3, [r7, #8]
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	60fb      	str	r3, [r7, #12]
        .task = eCliAppCmd_ToggleLed,
        .task_args_struct = toggle_task_arguments
    };
    if (LED_APP_AddTask(&task_args_message) == false) {
 8000974:	f107 0308 	add.w	r3, r7, #8
 8000978:	4618      	mov	r0, r3
 800097a:	f002 f95b 	bl	8002c34 <LED_APP_AddTask>
 800097e:	4603      	mov	r3, r0
 8000980:	f083 0301 	eor.w	r3, r3, #1
 8000984:	b2db      	uxtb	r3, r3
 8000986:	2b00      	cmp	r3, #0
 8000988:	d00b      	beq.n	80009a2 <CMD_API_ToggleCallback+0x6e>
        snprintf(cmd_api_callback_args->response_buffer, cmd_api_callback_args->response_buffer_length,
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6898      	ldr	r0, [r3, #8]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	899b      	ldrh	r3, [r3, #12]
 8000992:	4619      	mov	r1, r3
 8000994:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <CMD_API_ToggleCallback+0x8c>)
 8000996:	689b      	ldr	r3, [r3, #8]
 8000998:	461a      	mov	r2, r3
 800099a:	f00b f937 	bl	800bc0c <sniprintf>
        static_debug_message_lut[eDebugMsg_MessageQueuePutFailed]);
        return false;
 800099e:	2300      	movs	r3, #0
 80009a0:	e009      	b.n	80009b6 <CMD_API_ToggleCallback+0x82>
    }

    /* Creating message buffer */
    snprintf(cmd_api_callback_args->response_buffer, cmd_api_callback_args->response_buffer_length,
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6898      	ldr	r0, [r3, #8]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	899b      	ldrh	r3, [r3, #12]
 80009aa:	4619      	mov	r1, r3
 80009ac:	7cfb      	ldrb	r3, [r7, #19]
 80009ae:	4a05      	ldr	r2, [pc, #20]	; (80009c4 <CMD_API_ToggleCallback+0x90>)
 80009b0:	f00b f92c 	bl	800bc0c <sniprintf>
    "Toggle: Pin-%u", pin);
    return true;
 80009b4:	2301      	movs	r3, #1
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3718      	adds	r7, #24
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000000 	.word	0x20000000
 80009c4:	0800def0 	.word	0x0800def0

080009c8 <CMD_API_BlinkCallback>:
bool CMD_API_BlinkCallback (sCmdApi_CallbackArgs_t *cmd_api_callback_args) {
 80009c8:	b590      	push	{r4, r7, lr}
 80009ca:	b08d      	sub	sp, #52	; 0x34
 80009cc:	af02      	add	r7, sp, #8
 80009ce:	6078      	str	r0, [r7, #4]
    /* Assert */
    eLedApiPinEnum_t pin = eLedApiPin_Last;
 80009d0:	2302      	movs	r3, #2
 80009d2:	76fb      	strb	r3, [r7, #27]
    if (CMD_API_ParsePin(cmd_api_callback_args, &pin) == false) {
 80009d4:	f107 031b 	add.w	r3, r7, #27
 80009d8:	4619      	mov	r1, r3
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f7ff feda 	bl	8000794 <CMD_API_ParsePin>
 80009e0:	4603      	mov	r3, r0
 80009e2:	f083 0301 	eor.w	r3, r3, #1
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <CMD_API_BlinkCallback+0x28>
        return false;
 80009ec:	2300      	movs	r3, #0
 80009ee:	e07c      	b.n	8000aea <CMD_API_BlinkCallback+0x122>
    }

    uint16_t time = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	833b      	strh	r3, [r7, #24]
    char *token = strtok(NULL, ",");
 80009f4:	493f      	ldr	r1, [pc, #252]	; (8000af4 <CMD_API_BlinkCallback+0x12c>)
 80009f6:	2000      	movs	r0, #0
 80009f8:	f00b f9ee 	bl	800bdd8 <strtok>
 80009fc:	6278      	str	r0, [r7, #36]	; 0x24
    bool status = StrToUint(token, &time);
 80009fe:	f107 0318 	add.w	r3, r7, #24
 8000a02:	4619      	mov	r1, r3
 8000a04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000a06:	f00a fb60 	bl	800b0ca <StrToUint>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (status != true) {
 8000a10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a14:	f083 0301 	eor.w	r3, r3, #1
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d00a      	beq.n	8000a34 <CMD_API_BlinkCallback+0x6c>
        snprintf(cmd_api_callback_args->response_buffer, cmd_api_callback_args->response_buffer_length,
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6898      	ldr	r0, [r3, #8]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	899b      	ldrh	r3, [r3, #12]
 8000a26:	4619      	mov	r1, r3
 8000a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2a:	4a33      	ldr	r2, [pc, #204]	; (8000af8 <CMD_API_BlinkCallback+0x130>)
 8000a2c:	f00b f8ee 	bl	800bc0c <sniprintf>
        "Argument Time-\"%s\" bad", token);
        return false;
 8000a30:	2300      	movs	r3, #0
 8000a32:	e05a      	b.n	8000aea <CMD_API_BlinkCallback+0x122>
    }

    uint16_t freq = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	82fb      	strh	r3, [r7, #22]
    token = strtok(NULL, ",");
 8000a38:	492e      	ldr	r1, [pc, #184]	; (8000af4 <CMD_API_BlinkCallback+0x12c>)
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f00b f9cc 	bl	800bdd8 <strtok>
 8000a40:	6278      	str	r0, [r7, #36]	; 0x24
    status = StrToUint(token, &freq);
 8000a42:	f107 0316 	add.w	r3, r7, #22
 8000a46:	4619      	mov	r1, r3
 8000a48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000a4a:	f00a fb3e 	bl	800b0ca <StrToUint>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (status != true) {
 8000a54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a58:	f083 0301 	eor.w	r3, r3, #1
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d00a      	beq.n	8000a78 <CMD_API_BlinkCallback+0xb0>
        snprintf(cmd_api_callback_args->response_buffer, cmd_api_callback_args->response_buffer_length,
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6898      	ldr	r0, [r3, #8]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	899b      	ldrh	r3, [r3, #12]
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6e:	4a23      	ldr	r2, [pc, #140]	; (8000afc <CMD_API_BlinkCallback+0x134>)
 8000a70:	f00b f8cc 	bl	800bc0c <sniprintf>
        "Argument Frequency-\"%s\" bad", token);
        return false;
 8000a74:	2300      	movs	r3, #0
 8000a76:	e038      	b.n	8000aea <CMD_API_BlinkCallback+0x122>
    }

    /* Add arguments to message queue */
    sLedAppTaskBlink_t *blink_task_arguments = Heap_API_Allocate(1, sizeof(sLedAppTaskBlink_t));
 8000a78:	2106      	movs	r1, #6
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	f000 f974 	bl	8000d68 <Heap_API_Allocate>
 8000a80:	61f8      	str	r0, [r7, #28]
    blink_task_arguments->pin = pin;
 8000a82:	7efa      	ldrb	r2, [r7, #27]
 8000a84:	69fb      	ldr	r3, [r7, #28]
 8000a86:	701a      	strb	r2, [r3, #0]
    blink_task_arguments->time = time;
 8000a88:	8b3a      	ldrh	r2, [r7, #24]
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	805a      	strh	r2, [r3, #2]
    blink_task_arguments->frequency = freq;
 8000a8e:	8afa      	ldrh	r2, [r7, #22]
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	809a      	strh	r2, [r3, #4]
    sLedAppTaskArgs_t task_args_message = {
 8000a94:	2303      	movs	r3, #3
 8000a96:	733b      	strb	r3, [r7, #12]
 8000a98:	69fb      	ldr	r3, [r7, #28]
 8000a9a:	613b      	str	r3, [r7, #16]
        .task = eCliAppCmd_BlinkLed,
        .task_args_struct = blink_task_arguments
    };
    if (LED_APP_AddTask(&task_args_message) == false) {
 8000a9c:	f107 030c 	add.w	r3, r7, #12
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f002 f8c7 	bl	8002c34 <LED_APP_AddTask>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	f083 0301 	eor.w	r3, r3, #1
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d00b      	beq.n	8000aca <CMD_API_BlinkCallback+0x102>
        snprintf(cmd_api_callback_args->response_buffer, cmd_api_callback_args->response_buffer_length,
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6898      	ldr	r0, [r3, #8]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	899b      	ldrh	r3, [r3, #12]
 8000aba:	4619      	mov	r1, r3
 8000abc:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <CMD_API_BlinkCallback+0x138>)
 8000abe:	689b      	ldr	r3, [r3, #8]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	f00b f8a3 	bl	800bc0c <sniprintf>
        static_debug_message_lut[eDebugMsg_MessageQueuePutFailed]);
        return false;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	e00f      	b.n	8000aea <CMD_API_BlinkCallback+0x122>
    }

    /* Creating message buffer */
    snprintf(cmd_api_callback_args->response_buffer, cmd_api_callback_args->response_buffer_length,
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6898      	ldr	r0, [r3, #8]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	899b      	ldrh	r3, [r3, #12]
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	7efb      	ldrb	r3, [r7, #27]
 8000ad6:	461c      	mov	r4, r3
 8000ad8:	8b3b      	ldrh	r3, [r7, #24]
 8000ada:	8afa      	ldrh	r2, [r7, #22]
 8000adc:	9201      	str	r2, [sp, #4]
 8000ade:	9300      	str	r3, [sp, #0]
 8000ae0:	4623      	mov	r3, r4
 8000ae2:	4a08      	ldr	r2, [pc, #32]	; (8000b04 <CMD_API_BlinkCallback+0x13c>)
 8000ae4:	f00b f892 	bl	800bc0c <sniprintf>
    "Blink: Pin-%u | %u sec | %u Hz", pin, time, freq);
    return true;
 8000ae8:	2301      	movs	r3, #1
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	372c      	adds	r7, #44	; 0x2c
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd90      	pop	{r4, r7, pc}
 8000af2:	bf00      	nop
 8000af4:	0800deb8 	.word	0x0800deb8
 8000af8:	0800df00 	.word	0x0800df00
 8000afc:	0800df18 	.word	0x0800df18
 8000b00:	20000000 	.word	0x20000000
 8000b04:	0800df34 	.word	0x0800df34

08000b08 <CMD_API_ModemCallback>:

bool CMD_API_ModemCallback (sCmdApi_CallbackArgs_t *cmd_api_callback_args) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
    /* Assert */
    if (cmd_api_callback_args->arguments == NULL) {
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d101      	bne.n	8000b1c <CMD_API_ModemCallback+0x14>
        return false;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	e00d      	b.n	8000b38 <CMD_API_ModemCallback+0x30>
    }

//    strcat(cmd_api_callback_args->arguments, "\n");
    Modem_API_Send(cmd_api_callback_args->arguments);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f000 fd8d 	bl	8001640 <Modem_API_Send>

    /* Creating message buffer */
    strncpy(cmd_api_callback_args->response_buffer, "", cmd_api_callback_args->response_buffer_length);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6898      	ldr	r0, [r3, #8]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	899b      	ldrh	r3, [r3, #12]
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4903      	ldr	r1, [pc, #12]	; (8000b40 <CMD_API_ModemCallback+0x38>)
 8000b32:	f00b f928 	bl	800bd86 <strncpy>
    return true;
 8000b36:	2301      	movs	r3, #1
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	0800df54 	.word	0x0800df54

08000b44 <CMD_API_ModemStartTcpCallback>:

bool CMD_API_ModemStartTcpCallback (sCmdApi_CallbackArgs_t *cmd_api_callback_args) {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
    /* Assert */
    if (cmd_api_callback_args->arguments == NULL) {
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d101      	bne.n	8000b58 <CMD_API_ModemStartTcpCallback+0x14>
        return false;
 8000b54:	2300      	movs	r3, #0
 8000b56:	e027      	b.n	8000ba8 <CMD_API_ModemStartTcpCallback+0x64>
    }

    char *ip = strtok(cmd_api_callback_args->arguments, ",");
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4914      	ldr	r1, [pc, #80]	; (8000bb0 <CMD_API_ModemStartTcpCallback+0x6c>)
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f00b f93a 	bl	800bdd8 <strtok>
 8000b64:	6178      	str	r0, [r7, #20]

    uint16_t port = 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	817b      	strh	r3, [r7, #10]
    char *token = strtok(NULL, ",");
 8000b6a:	4911      	ldr	r1, [pc, #68]	; (8000bb0 <CMD_API_ModemStartTcpCallback+0x6c>)
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	f00b f933 	bl	800bdd8 <strtok>
 8000b72:	6138      	str	r0, [r7, #16]
    StrToUint(token, &port);
 8000b74:	f107 030a 	add.w	r3, r7, #10
 8000b78:	4619      	mov	r1, r3
 8000b7a:	6938      	ldr	r0, [r7, #16]
 8000b7c:	f00a faa5 	bl	800b0ca <StrToUint>

    char *message = strtok(NULL, ",");
 8000b80:	490b      	ldr	r1, [pc, #44]	; (8000bb0 <CMD_API_ModemStartTcpCallback+0x6c>)
 8000b82:	2000      	movs	r0, #0
 8000b84:	f00b f928 	bl	800bdd8 <strtok>
 8000b88:	60f8      	str	r0, [r7, #12]
    Network_APP_SetState(true, ip, port, message);
 8000b8a:	897a      	ldrh	r2, [r7, #10]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	6979      	ldr	r1, [r7, #20]
 8000b90:	2001      	movs	r0, #1
 8000b92:	f002 fac3 	bl	800311c <Network_APP_SetState>

    /* Creating message buffer */
    strncpy(cmd_api_callback_args->response_buffer, "", cmd_api_callback_args->response_buffer_length);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6898      	ldr	r0, [r3, #8]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	899b      	ldrh	r3, [r3, #12]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	4904      	ldr	r1, [pc, #16]	; (8000bb4 <CMD_API_ModemStartTcpCallback+0x70>)
 8000ba2:	f00b f8f0 	bl	800bd86 <strncpy>
    return true;
 8000ba6:	2301      	movs	r3, #1
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3718      	adds	r7, #24
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	0800deb8 	.word	0x0800deb8
 8000bb4:	0800df54 	.word	0x0800df54

08000bb8 <CMD_API_ModemStopTcpCallback>:
bool CMD_API_ModemStopTcpCallback (sCmdApi_CallbackArgs_t *cmd_api_callback_args) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
    /* Assert */
    Network_APP_SetState(false, NULL, 0, NULL);
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	f002 faa8 	bl	800311c <Network_APP_SetState>

    /* Creating message buffer */
    strncpy(cmd_api_callback_args->response_buffer, "", cmd_api_callback_args->response_buffer_length);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6898      	ldr	r0, [r3, #8]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	899b      	ldrh	r3, [r3, #12]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4904      	ldr	r1, [pc, #16]	; (8000be8 <CMD_API_ModemStopTcpCallback+0x30>)
 8000bd8:	f00b f8d5 	bl	800bd86 <strncpy>
    return true;
 8000bdc:	2301      	movs	r3, #1
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	0800df54 	.word	0x0800df54

08000bec <Debug_API_Init>:
 *********************************************************************************************************************/

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/
bool Debug_API_Init () {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
    debug_mutex_id = osMutexNew(&mutex_attributes);
 8000bf0:	480a      	ldr	r0, [pc, #40]	; (8000c1c <Debug_API_Init+0x30>)
 8000bf2:	f006 f8dc 	bl	8006dae <osMutexNew>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	4a09      	ldr	r2, [pc, #36]	; (8000c20 <Debug_API_Init+0x34>)
 8000bfa:	6013      	str	r3, [r2, #0]
    if (debug_mutex_id == NULL) {
 8000bfc:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <Debug_API_Init+0x34>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d101      	bne.n	8000c08 <Debug_API_Init+0x1c>
        return false;
 8000c04:	2300      	movs	r3, #0
 8000c06:	e006      	b.n	8000c16 <Debug_API_Init+0x2a>
    }
    UART_API_Init(eUart_Debug, "\r\n", eUartBaudrate_921600);
 8000c08:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000c0c:	4905      	ldr	r1, [pc, #20]	; (8000c24 <Debug_API_Init+0x38>)
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f001 fcd0 	bl	80025b4 <UART_API_Init>
    return true;
 8000c14:	2301      	movs	r3, #1
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	0800e924 	.word	0x0800e924
 8000c20:	200006d4 	.word	0x200006d4
 8000c24:	0800e000 	.word	0x0800e000

08000c28 <Debug_API_Print>:

// swap buffer with message
bool Debug_API_Print (const char *module, const char *file_path, const int line, const char *format, ...) {
 8000c28:	b408      	push	{r3}
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b089      	sub	sp, #36	; 0x24
 8000c2e:	af02      	add	r7, sp, #8
 8000c30:	60f8      	str	r0, [r7, #12]
 8000c32:	60b9      	str	r1, [r7, #8]
 8000c34:	607a      	str	r2, [r7, #4]
    if (osMutexAcquire(debug_mutex_id, osWaitForever) != osOK) {
 8000c36:	4b35      	ldr	r3, [pc, #212]	; (8000d0c <Debug_API_Print+0xe4>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f04f 31ff 	mov.w	r1, #4294967295
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f006 f93b 	bl	8006eba <osMutexAcquire>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <Debug_API_Print+0x26>
        return false;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e057      	b.n	8000cfe <Debug_API_Print+0xd6>
    }
    bool status = false;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	757b      	strb	r3, [r7, #21]
    uint16_t index = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	82fb      	strh	r3, [r7, #22]

    if (strcmp(module, MODEM_MODULE) == 0) {
 8000c56:	492e      	ldr	r1, [pc, #184]	; (8000d10 <Debug_API_Print+0xe8>)
 8000c58:	68f8      	ldr	r0, [r7, #12]
 8000c5a:	f7ff fae1 	bl	8000220 <strcmp>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d108      	bne.n	8000c76 <Debug_API_Print+0x4e>
        index = snprintf(message, MESSAGE_LENGTH, "[MODEM]\t");
 8000c64:	4a2b      	ldr	r2, [pc, #172]	; (8000d14 <Debug_API_Print+0xec>)
 8000c66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c6a:	482b      	ldr	r0, [pc, #172]	; (8000d18 <Debug_API_Print+0xf0>)
 8000c6c:	f00a ffce 	bl	800bc0c <sniprintf>
 8000c70:	4603      	mov	r3, r0
 8000c72:	82fb      	strh	r3, [r7, #22]
 8000c74:	e019      	b.n	8000caa <Debug_API_Print+0x82>
    } else if (file_path == 0) {
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d109      	bne.n	8000c90 <Debug_API_Print+0x68>
        index = snprintf(message, MESSAGE_LENGTH, "[%s]\t[DEBUG]\t", module);
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	4a27      	ldr	r2, [pc, #156]	; (8000d1c <Debug_API_Print+0xf4>)
 8000c80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c84:	4824      	ldr	r0, [pc, #144]	; (8000d18 <Debug_API_Print+0xf0>)
 8000c86:	f00a ffc1 	bl	800bc0c <sniprintf>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	82fb      	strh	r3, [r7, #22]
 8000c8e:	e00c      	b.n	8000caa <Debug_API_Print+0x82>
    } else {
        index = snprintf(message, MESSAGE_LENGTH, "[%s]\t[ERROR]\t(%s (%d))\t", module, file_path, line);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	9301      	str	r3, [sp, #4]
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	9300      	str	r3, [sp, #0]
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	4a21      	ldr	r2, [pc, #132]	; (8000d20 <Debug_API_Print+0xf8>)
 8000c9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ca0:	481d      	ldr	r0, [pc, #116]	; (8000d18 <Debug_API_Print+0xf0>)
 8000ca2:	f00a ffb3 	bl	800bc0c <sniprintf>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	82fb      	strh	r3, [r7, #22]
    }

    /* VA_ARGS */
    va_list args;
    va_start(args, format);
 8000caa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cae:	613b      	str	r3, [r7, #16]
    index += vsnprintf(message + index, MESSAGE_LENGTH - index, format, args);
 8000cb0:	8afb      	ldrh	r3, [r7, #22]
 8000cb2:	4a19      	ldr	r2, [pc, #100]	; (8000d18 <Debug_API_Print+0xf0>)
 8000cb4:	1898      	adds	r0, r3, r2
 8000cb6:	8afb      	ldrh	r3, [r7, #22]
 8000cb8:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cc2:	f00b fbdb 	bl	800c47c <vsniprintf>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	b29a      	uxth	r2, r3
 8000cca:	8afb      	ldrh	r3, [r7, #22]
 8000ccc:	4413      	add	r3, r2
 8000cce:	82fb      	strh	r3, [r7, #22]
    va_end(args);

    status = UART_API_SendString(eUart_Debug, message, strlen(message));
 8000cd0:	4811      	ldr	r0, [pc, #68]	; (8000d18 <Debug_API_Print+0xf0>)
 8000cd2:	f7ff faaf 	bl	8000234 <strlen>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	461a      	mov	r2, r3
 8000cdc:	490e      	ldr	r1, [pc, #56]	; (8000d18 <Debug_API_Print+0xf0>)
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f001 fd64 	bl	80027ac <UART_API_SendString>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	757b      	strb	r3, [r7, #21]
    if (osMutexRelease(debug_mutex_id) != osOK) {
 8000ce8:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <Debug_API_Print+0xe4>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f006 f92f 	bl	8006f50 <osMutexRelease>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <Debug_API_Print+0xd4>
        return false;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	e000      	b.n	8000cfe <Debug_API_Print+0xd6>
    }
    return status;
 8000cfc:	7d7b      	ldrb	r3, [r7, #21]
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	371c      	adds	r7, #28
 8000d02:	46bd      	mov	sp, r7
 8000d04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d08:	b001      	add	sp, #4
 8000d0a:	4770      	bx	lr
 8000d0c:	200006d4 	.word	0x200006d4
 8000d10:	0800e004 	.word	0x0800e004
 8000d14:	0800e018 	.word	0x0800e018
 8000d18:	200002d4 	.word	0x200002d4
 8000d1c:	0800e024 	.word	0x0800e024
 8000d20:	0800e034 	.word	0x0800e034

08000d24 <Heap_API_Init>:
/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/

/* Init Heap_API MUTEX */
bool Heap_API_Init () {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
    heap_api_mutex_id = osMutexNew(&mutex_attributes);
 8000d28:	480a      	ldr	r0, [pc, #40]	; (8000d54 <Heap_API_Init+0x30>)
 8000d2a:	f006 f840 	bl	8006dae <osMutexNew>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	4a09      	ldr	r2, [pc, #36]	; (8000d58 <Heap_API_Init+0x34>)
 8000d32:	6013      	str	r3, [r2, #0]
    if (heap_api_mutex_id == NULL) {
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <Heap_API_Init+0x34>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d108      	bne.n	8000d4e <Heap_API_Init+0x2a>
        error("Failed to create MUTEX\n");
 8000d3c:	4b07      	ldr	r3, [pc, #28]	; (8000d5c <Heap_API_Init+0x38>)
 8000d3e:	6818      	ldr	r0, [r3, #0]
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <Heap_API_Init+0x3c>)
 8000d42:	222f      	movs	r2, #47	; 0x2f
 8000d44:	4907      	ldr	r1, [pc, #28]	; (8000d64 <Heap_API_Init+0x40>)
 8000d46:	f7ff ff6f 	bl	8000c28 <Debug_API_Print>
        return false;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	e000      	b.n	8000d50 <Heap_API_Init+0x2c>
    }
    return true;
 8000d4e:	2301      	movs	r3, #1
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	0800e934 	.word	0x0800e934
 8000d58:	200006dc 	.word	0x200006dc
 8000d5c:	20000018 	.word	0x20000018
 8000d60:	0800e068 	.word	0x0800e068
 8000d64:	0800e080 	.word	0x0800e080

08000d68 <Heap_API_Allocate>:

// Interface for:
// void* calloc (size_t num, size_t size);
void* Heap_API_Allocate (size_t num, size_t size) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
    /* ASSERT */
    if (num == 0) {
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d108      	bne.n	8000d8a <Heap_API_Allocate+0x22>
        error("Memory allocate argument num == 0\n");
 8000d78:	4b26      	ldr	r3, [pc, #152]	; (8000e14 <Heap_API_Allocate+0xac>)
 8000d7a:	6818      	ldr	r0, [r3, #0]
 8000d7c:	4b26      	ldr	r3, [pc, #152]	; (8000e18 <Heap_API_Allocate+0xb0>)
 8000d7e:	223a      	movs	r2, #58	; 0x3a
 8000d80:	4926      	ldr	r1, [pc, #152]	; (8000e1c <Heap_API_Allocate+0xb4>)
 8000d82:	f7ff ff51 	bl	8000c28 <Debug_API_Print>
        return NULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	e03f      	b.n	8000e0a <Heap_API_Allocate+0xa2>
    }
    if (size == 0) {
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d108      	bne.n	8000da2 <Heap_API_Allocate+0x3a>
        error("Memory allocate argument size == 0\n");
 8000d90:	4b20      	ldr	r3, [pc, #128]	; (8000e14 <Heap_API_Allocate+0xac>)
 8000d92:	6818      	ldr	r0, [r3, #0]
 8000d94:	4b22      	ldr	r3, [pc, #136]	; (8000e20 <Heap_API_Allocate+0xb8>)
 8000d96:	223e      	movs	r2, #62	; 0x3e
 8000d98:	4920      	ldr	r1, [pc, #128]	; (8000e1c <Heap_API_Allocate+0xb4>)
 8000d9a:	f7ff ff45 	bl	8000c28 <Debug_API_Print>
        return NULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e033      	b.n	8000e0a <Heap_API_Allocate+0xa2>
    }
    /* TAKE MUTEX */
    if (osMutexAcquire(heap_api_mutex_id, osWaitForever) != osOK) {
 8000da2:	4b20      	ldr	r3, [pc, #128]	; (8000e24 <Heap_API_Allocate+0xbc>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f04f 31ff 	mov.w	r1, #4294967295
 8000daa:	4618      	mov	r0, r3
 8000dac:	f006 f885 	bl	8006eba <osMutexAcquire>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d008      	beq.n	8000dc8 <Heap_API_Allocate+0x60>
        error("Failed to take MUTEX\n");
 8000db6:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <Heap_API_Allocate+0xac>)
 8000db8:	6818      	ldr	r0, [r3, #0]
 8000dba:	4b1b      	ldr	r3, [pc, #108]	; (8000e28 <Heap_API_Allocate+0xc0>)
 8000dbc:	2243      	movs	r2, #67	; 0x43
 8000dbe:	4917      	ldr	r1, [pc, #92]	; (8000e1c <Heap_API_Allocate+0xb4>)
 8000dc0:	f7ff ff32 	bl	8000c28 <Debug_API_Print>
        return NULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	e020      	b.n	8000e0a <Heap_API_Allocate+0xa2>
    }

    /* calloc */
    void *pointer = NULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60fb      	str	r3, [r7, #12]
    pointer = calloc(num, size);
 8000dcc:	6839      	ldr	r1, [r7, #0]
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f00a fb24 	bl	800b41c <calloc>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	60fb      	str	r3, [r7, #12]
    if (pointer != NULL) {
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d005      	beq.n	8000dea <Heap_API_Allocate+0x82>
        used_memory_blocks++;
 8000dde:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <Heap_API_Allocate+0xc4>)
 8000de0:	881b      	ldrh	r3, [r3, #0]
 8000de2:	3301      	adds	r3, #1
 8000de4:	b29a      	uxth	r2, r3
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <Heap_API_Allocate+0xc4>)
 8000de8:	801a      	strh	r2, [r3, #0]
    }
#ifdef ENABLE_MEM_BLOCK_PRINTS
    debug("Allocated memory blocks: %u\n", used_memory_blocks);
#endif
    /* GIVE MUTEX */
    if (osMutexRelease(heap_api_mutex_id) != osOK) {
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <Heap_API_Allocate+0xbc>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f006 f8ae 	bl	8006f50 <osMutexRelease>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d006      	beq.n	8000e08 <Heap_API_Allocate+0xa0>
        error("Failed to give MUTEX\n");
 8000dfa:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <Heap_API_Allocate+0xac>)
 8000dfc:	6818      	ldr	r0, [r3, #0]
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <Heap_API_Allocate+0xc8>)
 8000e00:	2252      	movs	r2, #82	; 0x52
 8000e02:	4906      	ldr	r1, [pc, #24]	; (8000e1c <Heap_API_Allocate+0xb4>)
 8000e04:	f7ff ff10 	bl	8000c28 <Debug_API_Print>
    }
    return pointer;
 8000e08:	68fb      	ldr	r3, [r7, #12]
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000018 	.word	0x20000018
 8000e18:	0800e09c 	.word	0x0800e09c
 8000e1c:	0800e080 	.word	0x0800e080
 8000e20:	0800e0c0 	.word	0x0800e0c0
 8000e24:	200006dc 	.word	0x200006dc
 8000e28:	0800e0e4 	.word	0x0800e0e4
 8000e2c:	200006d8 	.word	0x200006d8
 8000e30:	0800e0fc 	.word	0x0800e0fc

08000e34 <Heap_API_Free>:

// Interface for:
// void free (void* ptr);
bool Heap_API_Free (void *pointer) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
    /* ASSERT */
    if (pointer == NULL) {
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d108      	bne.n	8000e54 <Heap_API_Free+0x20>
        error("Argument == NULL\n");
 8000e42:	4b1d      	ldr	r3, [pc, #116]	; (8000eb8 <Heap_API_Free+0x84>)
 8000e44:	6818      	ldr	r0, [r3, #0]
 8000e46:	4b1d      	ldr	r3, [pc, #116]	; (8000ebc <Heap_API_Free+0x88>)
 8000e48:	225c      	movs	r2, #92	; 0x5c
 8000e4a:	491d      	ldr	r1, [pc, #116]	; (8000ec0 <Heap_API_Free+0x8c>)
 8000e4c:	f7ff feec 	bl	8000c28 <Debug_API_Print>
        return false;
 8000e50:	2300      	movs	r3, #0
 8000e52:	e02d      	b.n	8000eb0 <Heap_API_Free+0x7c>
    }

    /* TAKE MUTEX */
    if (osMutexAcquire(heap_api_mutex_id, osWaitForever) != osOK) {
 8000e54:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <Heap_API_Free+0x90>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f04f 31ff 	mov.w	r1, #4294967295
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f006 f82c 	bl	8006eba <osMutexAcquire>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d008      	beq.n	8000e7a <Heap_API_Free+0x46>
        error("Failed to take MUTEX\n");
 8000e68:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <Heap_API_Free+0x84>)
 8000e6a:	6818      	ldr	r0, [r3, #0]
 8000e6c:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <Heap_API_Free+0x94>)
 8000e6e:	2262      	movs	r2, #98	; 0x62
 8000e70:	4913      	ldr	r1, [pc, #76]	; (8000ec0 <Heap_API_Free+0x8c>)
 8000e72:	f7ff fed9 	bl	8000c28 <Debug_API_Print>
        return NULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	e01a      	b.n	8000eb0 <Heap_API_Free+0x7c>
    }
    free(pointer);
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f00a fd1e 	bl	800b8bc <free>
    used_memory_blocks--;
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <Heap_API_Free+0x98>)
 8000e82:	881b      	ldrh	r3, [r3, #0]
 8000e84:	3b01      	subs	r3, #1
 8000e86:	b29a      	uxth	r2, r3
 8000e88:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <Heap_API_Free+0x98>)
 8000e8a:	801a      	strh	r2, [r3, #0]

    /* GIVE MUTEX */
    if (osMutexRelease(heap_api_mutex_id) != osOK) {
 8000e8c:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <Heap_API_Free+0x90>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f006 f85d 	bl	8006f50 <osMutexRelease>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d008      	beq.n	8000eae <Heap_API_Free+0x7a>
        error("Failed to give MUTEX\n");
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <Heap_API_Free+0x84>)
 8000e9e:	6818      	ldr	r0, [r3, #0]
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <Heap_API_Free+0x9c>)
 8000ea2:	226a      	movs	r2, #106	; 0x6a
 8000ea4:	4906      	ldr	r1, [pc, #24]	; (8000ec0 <Heap_API_Free+0x8c>)
 8000ea6:	f7ff febf 	bl	8000c28 <Debug_API_Print>
        return false;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	e000      	b.n	8000eb0 <Heap_API_Free+0x7c>

#ifdef ENABLE_MEM_BLOCK_PRINTS
    debug("Allocated memory blocks: %u\n", used_memory_blocks);
#endif

    return true;
 8000eae:	2301      	movs	r3, #1
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000018 	.word	0x20000018
 8000ebc:	0800e114 	.word	0x0800e114
 8000ec0:	0800e080 	.word	0x0800e080
 8000ec4:	200006dc 	.word	0x200006dc
 8000ec8:	0800e0e4 	.word	0x0800e0e4
 8000ecc:	200006d8 	.word	0x200006d8
 8000ed0:	0800e0fc 	.word	0x0800e0fc

08000ed4 <LED_API_Init>:
 *********************************************************************************************************************/

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/
bool LED_API_Init (void) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
    for (eLedApiPinEnum_t led = eLedApiPin_First; led < eLedApiPin_Last; led++) {
 8000eda:	2300      	movs	r3, #0
 8000edc:	71fb      	strb	r3, [r7, #7]
 8000ede:	e015      	b.n	8000f0c <LED_API_Init+0x38>
        if (GPIO_Driver_Init(static_led_api_lut[led].gpio_pin) == false) {
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	4a0e      	ldr	r2, [pc, #56]	; (8000f1c <LED_API_Init+0x48>)
 8000ee4:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f002 fd67 	bl	80039bc <GPIO_Driver_Init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	f083 0301 	eor.w	r3, r3, #1
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <LED_API_Init+0x2a>
            return false;
 8000efa:	2300      	movs	r3, #0
 8000efc:	e00a      	b.n	8000f14 <LED_API_Init+0x40>
        }
        LED_API_ResetPin(led);
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f000 f839 	bl	8000f78 <LED_API_ResetPin>
    for (eLedApiPinEnum_t led = eLedApiPin_First; led < eLedApiPin_Last; led++) {
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	71fb      	strb	r3, [r7, #7]
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d9e6      	bls.n	8000ee0 <LED_API_Init+0xc>
    }
    return true;
 8000f12:	2301      	movs	r3, #1
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	0800e944 	.word	0x0800e944

08000f20 <LED_API_SetPin>:

bool LED_API_SetPin (eLedApiPinEnum_t led) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
    if (led > eLedApiPin_Last) {
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d901      	bls.n	8000f34 <LED_API_SetPin+0x14>
        return false;
 8000f30:	2300      	movs	r3, #0
 8000f32:	e01a      	b.n	8000f6a <LED_API_SetPin+0x4a>
    }

    if (static_led_api_lut[led].inverted == false) {
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	4a0f      	ldr	r2, [pc, #60]	; (8000f74 <LED_API_SetPin+0x54>)
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	4413      	add	r3, r2
 8000f3c:	785b      	ldrb	r3, [r3, #1]
 8000f3e:	f083 0301 	eor.w	r3, r3, #1
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d008      	beq.n	8000f5a <LED_API_SetPin+0x3a>
        return GPIO_Driver_SetPin(static_led_api_lut[led].gpio_pin);
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <LED_API_SetPin+0x54>)
 8000f4c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f002 fda7 	bl	8003aa4 <GPIO_Driver_SetPin>
 8000f56:	4603      	mov	r3, r0
 8000f58:	e007      	b.n	8000f6a <LED_API_SetPin+0x4a>
    } else {
        return GPIO_Driver_ResetPin(static_led_api_lut[led].gpio_pin);
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	4a05      	ldr	r2, [pc, #20]	; (8000f74 <LED_API_SetPin+0x54>)
 8000f5e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f002 fdbe 	bl	8003ae4 <GPIO_Driver_ResetPin>
 8000f68:	4603      	mov	r3, r0
    }
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	0800e944 	.word	0x0800e944

08000f78 <LED_API_ResetPin>:

bool LED_API_ResetPin (eLedApiPinEnum_t led) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
    if (led > eLedApiPin_Last) {
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d901      	bls.n	8000f8c <LED_API_ResetPin+0x14>
        return false;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	e01a      	b.n	8000fc2 <LED_API_ResetPin+0x4a>
    }

    if (static_led_api_lut[led].inverted == false) {
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	4a0f      	ldr	r2, [pc, #60]	; (8000fcc <LED_API_ResetPin+0x54>)
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	4413      	add	r3, r2
 8000f94:	785b      	ldrb	r3, [r3, #1]
 8000f96:	f083 0301 	eor.w	r3, r3, #1
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d008      	beq.n	8000fb2 <LED_API_ResetPin+0x3a>
        return GPIO_Driver_ResetPin(static_led_api_lut[led].gpio_pin);
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <LED_API_ResetPin+0x54>)
 8000fa4:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f002 fd9b 	bl	8003ae4 <GPIO_Driver_ResetPin>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	e007      	b.n	8000fc2 <LED_API_ResetPin+0x4a>
    } else {
        return GPIO_Driver_SetPin(static_led_api_lut[led].gpio_pin);
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	4a05      	ldr	r2, [pc, #20]	; (8000fcc <LED_API_ResetPin+0x54>)
 8000fb6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f002 fd72 	bl	8003aa4 <GPIO_Driver_SetPin>
 8000fc0:	4603      	mov	r3, r0
    }
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	0800e944 	.word	0x0800e944

08000fd0 <LED_API_TogglePin>:

bool LED_API_TogglePin (eLedApiPinEnum_t led) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
    if (led > eLedApiPin_Last) {
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d901      	bls.n	8000fe4 <LED_API_TogglePin+0x14>
        return false;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	e007      	b.n	8000ff4 <LED_API_TogglePin+0x24>
    }
    return GPIO_Driver_TogglePin(static_led_api_lut[led].gpio_pin);
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	4a05      	ldr	r2, [pc, #20]	; (8000ffc <LED_API_TogglePin+0x2c>)
 8000fe8:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f002 fd99 	bl	8003b24 <GPIO_Driver_TogglePin>
 8000ff2:	4603      	mov	r3, r0
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	0800e944 	.word	0x0800e944

08001000 <Modem_API_EndOfSmsCallback>:
static bool Modem_API_ParseMessage (char *string);
/**********************************************************************************************************************
 * Definitions of private functions
 *********************************************************************************************************************/
/* SMS HANDLING */
static void Modem_API_EndOfSmsCallback (void *argument) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
    char *last_line = StrLastLine(sms_message);
 8001008:	4817      	ldr	r0, [pc, #92]	; (8001068 <Modem_API_EndOfSmsCallback+0x68>)
 800100a:	f00a f911 	bl	800b230 <StrLastLine>
 800100e:	60f8      	str	r0, [r7, #12]
    if (strcmp(last_line, "OK\n") == 0) {
 8001010:	4916      	ldr	r1, [pc, #88]	; (800106c <Modem_API_EndOfSmsCallback+0x6c>)
 8001012:	68f8      	ldr	r0, [r7, #12]
 8001014:	f7ff f904 	bl	8000220 <strcmp>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d103      	bne.n	8001026 <Modem_API_EndOfSmsCallback+0x26>
        Modem_API_ParseMessage("OK");
 800101e:	4814      	ldr	r0, [pc, #80]	; (8001070 <Modem_API_EndOfSmsCallback+0x70>)
 8001020:	f000 f866 	bl	80010f0 <Modem_API_ParseMessage>
 8001024:	e002      	b.n	800102c <Modem_API_EndOfSmsCallback+0x2c>
    } else {
        Modem_API_ParseMessage("ERROR");
 8001026:	4813      	ldr	r0, [pc, #76]	; (8001074 <Modem_API_EndOfSmsCallback+0x74>)
 8001028:	f000 f862 	bl	80010f0 <Modem_API_ParseMessage>
    }
    StrRemSubstring(sms_message, "ERROR\n");
 800102c:	4912      	ldr	r1, [pc, #72]	; (8001078 <Modem_API_EndOfSmsCallback+0x78>)
 800102e:	480e      	ldr	r0, [pc, #56]	; (8001068 <Modem_API_EndOfSmsCallback+0x68>)
 8001030:	f009 ffe2 	bl	800aff8 <StrRemSubstring>
    StrRemSubstring(sms_message, "OK\n");
 8001034:	490d      	ldr	r1, [pc, #52]	; (800106c <Modem_API_EndOfSmsCallback+0x6c>)
 8001036:	480c      	ldr	r0, [pc, #48]	; (8001068 <Modem_API_EndOfSmsCallback+0x68>)
 8001038:	f009 ffde 	bl	800aff8 <StrRemSubstring>

    Modem_API_PutResponse(eModemApiCmd_CMTI, sms_message);
 800103c:	490a      	ldr	r1, [pc, #40]	; (8001068 <Modem_API_EndOfSmsCallback+0x68>)
 800103e:	2008      	movs	r0, #8
 8001040:	f000 f9d4 	bl	80013ec <Modem_API_PutResponse>
    strncpy(sms_message, "", SMS_LENGTH);
 8001044:	22a0      	movs	r2, #160	; 0xa0
 8001046:	490d      	ldr	r1, [pc, #52]	; (800107c <Modem_API_EndOfSmsCallback+0x7c>)
 8001048:	4807      	ldr	r0, [pc, #28]	; (8001068 <Modem_API_EndOfSmsCallback+0x68>)
 800104a:	f00a fe9c 	bl	800bd86 <strncpy>
    Modem_API_SetFlag(eModemFlag_SmsRecieved, eModemApiState_OK);
 800104e:	2103      	movs	r1, #3
 8001050:	2009      	movs	r0, #9
 8001052:	f000 fb4f 	bl	80016f4 <Modem_API_SetFlag>
    Modem_API_ClearFlag(eModemFlag_SmsRead, eModemApiState_NotReady);
 8001056:	2102      	movs	r1, #2
 8001058:	2008      	movs	r0, #8
 800105a:	f000 fb83 	bl	8001764 <Modem_API_ClearFlag>
}
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200006f0 	.word	0x200006f0
 800106c:	0800e210 	.word	0x0800e210
 8001070:	0800e154 	.word	0x0800e154
 8001074:	0800e158 	.word	0x0800e158
 8001078:	0800e214 	.word	0x0800e214
 800107c:	0800e21c 	.word	0x0800e21c

08001080 <Modem_API_ParseSms>:
static bool Modem_API_ParseSms (void) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af02      	add	r7, sp, #8
    modem("SMS: %s", modem_message.buffer);
 8001086:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <Modem_API_ParseSms+0x50>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <Modem_API_ParseSms+0x54>)
 800108e:	2200      	movs	r2, #0
 8001090:	2100      	movs	r1, #0
 8001092:	4811      	ldr	r0, [pc, #68]	; (80010d8 <Modem_API_ParseSms+0x58>)
 8001094:	f7ff fdc8 	bl	8000c28 <Debug_API_Print>
    strcat(sms_message, modem_message.buffer);
 8001098:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <Modem_API_ParseSms+0x50>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4619      	mov	r1, r3
 800109e:	480f      	ldr	r0, [pc, #60]	; (80010dc <Modem_API_ParseSms+0x5c>)
 80010a0:	f00a fe4d 	bl	800bd3e <strcat>
    if (osTimerStart(timer_id, SMS_READ_TIME) != osOK) {
 80010a4:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <Modem_API_ParseSms+0x60>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	21c8      	movs	r1, #200	; 0xc8
 80010aa:	4618      	mov	r0, r3
 80010ac:	f005 fcaa 	bl	8006a04 <osTimerStart>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d008      	beq.n	80010c8 <Modem_API_ParseSms+0x48>
        error("Failed to start timer!\n");
 80010b6:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <Modem_API_ParseSms+0x64>)
 80010b8:	6818      	ldr	r0, [r3, #0]
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <Modem_API_ParseSms+0x68>)
 80010bc:	2291      	movs	r2, #145	; 0x91
 80010be:	490b      	ldr	r1, [pc, #44]	; (80010ec <Modem_API_ParseSms+0x6c>)
 80010c0:	f7ff fdb2 	bl	8000c28 <Debug_API_Print>
        return false;
 80010c4:	2300      	movs	r3, #0
 80010c6:	e000      	b.n	80010ca <Modem_API_ParseSms+0x4a>
    }
    return true;
 80010c8:	2301      	movs	r3, #1
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	200007f0 	.word	0x200007f0
 80010d4:	0800e220 	.word	0x0800e220
 80010d8:	0800e228 	.word	0x0800e228
 80010dc:	200006f0 	.word	0x200006f0
 80010e0:	200006ec 	.word	0x200006ec
 80010e4:	2000001c 	.word	0x2000001c
 80010e8:	0800e23c 	.word	0x0800e23c
 80010ec:	0800e254 	.word	0x0800e254

080010f0 <Modem_API_ParseMessage>:
static bool Modem_API_ParseMessage (char *string) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af02      	add	r7, sp, #8
 80010f6:	6078      	str	r0, [r7, #4]
    if (string == NULL) {
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d108      	bne.n	8001110 <Modem_API_ParseMessage+0x20>
        cmd_api_args.message = modem_message.buffer;
 80010fe:	4b1c      	ldr	r3, [pc, #112]	; (8001170 <Modem_API_ParseMessage+0x80>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a1c      	ldr	r2, [pc, #112]	; (8001174 <Modem_API_ParseMessage+0x84>)
 8001104:	6013      	str	r3, [r2, #0]
        cmd_api_args.message_length = modem_message.length;
 8001106:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <Modem_API_ParseMessage+0x80>)
 8001108:	889a      	ldrh	r2, [r3, #4]
 800110a:	4b1a      	ldr	r3, [pc, #104]	; (8001174 <Modem_API_ParseMessage+0x84>)
 800110c:	809a      	strh	r2, [r3, #4]
 800110e:	e009      	b.n	8001124 <Modem_API_ParseMessage+0x34>
    } else {
        cmd_api_args.message = string;
 8001110:	4a18      	ldr	r2, [pc, #96]	; (8001174 <Modem_API_ParseMessage+0x84>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6013      	str	r3, [r2, #0]
        cmd_api_args.message_length = strlen(string);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff f88c 	bl	8000234 <strlen>
 800111c:	4603      	mov	r3, r0
 800111e:	b29a      	uxth	r2, r3
 8001120:	4b14      	ldr	r3, [pc, #80]	; (8001174 <Modem_API_ParseMessage+0x84>)
 8001122:	809a      	strh	r2, [r3, #4]
    }

    cmd_api_args.response_buffer = modem_api_response_buffer;
 8001124:	4b13      	ldr	r3, [pc, #76]	; (8001174 <Modem_API_ParseMessage+0x84>)
 8001126:	4a14      	ldr	r2, [pc, #80]	; (8001178 <Modem_API_ParseMessage+0x88>)
 8001128:	609a      	str	r2, [r3, #8]
    cmd_api_args.response_buffer_length = RESPONSE_BUFFER_LENGTH;
 800112a:	4b12      	ldr	r3, [pc, #72]	; (8001174 <Modem_API_ParseMessage+0x84>)
 800112c:	2280      	movs	r2, #128	; 0x80
 800112e:	819a      	strh	r2, [r3, #12]
    cmd_api_args.static_lut_length = (uint16_t) eModemApiCmd_Last;
 8001130:	4b10      	ldr	r3, [pc, #64]	; (8001174 <Modem_API_ParseMessage+0x84>)
 8001132:	2216      	movs	r2, #22
 8001134:	81da      	strh	r2, [r3, #14]
    cmd_api_args.static_lut = (sCmdApiStaticLut_t*) &static_modem_api_lut;
 8001136:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <Modem_API_ParseMessage+0x84>)
 8001138:	4a10      	ldr	r2, [pc, #64]	; (800117c <Modem_API_ParseMessage+0x8c>)
 800113a:	611a      	str	r2, [r3, #16]

    CMD_API_ParseCommand(&cmd_api_args, SEPARATOR);
 800113c:	4910      	ldr	r1, [pc, #64]	; (8001180 <Modem_API_ParseMessage+0x90>)
 800113e:	480d      	ldr	r0, [pc, #52]	; (8001174 <Modem_API_ParseMessage+0x84>)
 8001140:	f7ff faa8 	bl	8000694 <CMD_API_ParseCommand>
    if (*cmd_api_args.response_buffer != '\0') {
 8001144:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <Modem_API_ParseMessage+0x84>)
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d00a      	beq.n	8001164 <Modem_API_ParseMessage+0x74>
        modem("%s\n", cmd_api_args.response_buffer);
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <Modem_API_ParseMessage+0x84>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <Modem_API_ParseMessage+0x94>)
 8001156:	2200      	movs	r2, #0
 8001158:	2100      	movs	r1, #0
 800115a:	480b      	ldr	r0, [pc, #44]	; (8001188 <Modem_API_ParseMessage+0x98>)
 800115c:	f7ff fd64 	bl	8000c28 <Debug_API_Print>
        return true;
 8001160:	2301      	movs	r3, #1
 8001162:	e000      	b.n	8001166 <Modem_API_ParseMessage+0x76>
    } else {
        return false;
 8001164:	2300      	movs	r3, #0
    }
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200007f0 	.word	0x200007f0
 8001174:	200007f8 	.word	0x200007f8
 8001178:	20000770 	.word	0x20000770
 800117c:	0800e97c 	.word	0x0800e97c
 8001180:	0800e270 	.word	0x0800e270
 8001184:	0800e274 	.word	0x0800e274
 8001188:	0800e228 	.word	0x0800e228

0800118c <Modem_API_Thread>:

/* THREAD */
static void Modem_API_Thread (void *argument) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
    while (true) {
        if (UART_API_GetMessage(&modem_message, eUart_Modem) == true) {
 8001194:	2101      	movs	r1, #1
 8001196:	4817      	ldr	r0, [pc, #92]	; (80011f4 <Modem_API_Thread+0x68>)
 8001198:	f001 face 	bl	8002738 <UART_API_GetMessage>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d0f8      	beq.n	8001194 <Modem_API_Thread+0x8>
            if (modem_message.length != 1 && modem_message.buffer[0] != '\n') {
 80011a2:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <Modem_API_Thread+0x68>)
 80011a4:	889b      	ldrh	r3, [r3, #4]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d018      	beq.n	80011dc <Modem_API_Thread+0x50>
 80011aa:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <Modem_API_Thread+0x68>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b0a      	cmp	r3, #10
 80011b2:	d013      	beq.n	80011dc <Modem_API_Thread+0x50>
//                modem("\t\t\t\t\t\t%s", modem_message.buffer); // FOR TESTING PURPOSES
//                debug("mem:%u\n", Heap_API_BlockCount()); // FOR TESTING PURPOSES
                switch (Modem_API_GetState(eModemFlag_SmsRead)) {
 80011b4:	2008      	movs	r0, #8
 80011b6:	f000 fb6b 	bl	8001890 <Modem_API_GetState>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d005      	beq.n	80011cc <Modem_API_Thread+0x40>
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d106      	bne.n	80011d2 <Modem_API_Thread+0x46>

                    case eModemApiState_NotReady: {
                        Modem_API_ParseMessage(NULL);
 80011c4:	2000      	movs	r0, #0
 80011c6:	f7ff ff93 	bl	80010f0 <Modem_API_ParseMessage>
                        break;
 80011ca:	e008      	b.n	80011de <Modem_API_Thread+0x52>
                    }

                    case eModemApiState_Ready: {
                        Modem_API_ParseSms();
 80011cc:	f7ff ff58 	bl	8001080 <Modem_API_ParseSms>
                        break;
 80011d0:	e005      	b.n	80011de <Modem_API_Thread+0x52>
                    }

                    default: {
                        Modem_API_ClearFlag(eModemFlag_SmsRead, eModemApiState_NotReady);
 80011d2:	2102      	movs	r1, #2
 80011d4:	2008      	movs	r0, #8
 80011d6:	f000 fac5 	bl	8001764 <Modem_API_ClearFlag>
                        break;
 80011da:	e000      	b.n	80011de <Modem_API_Thread+0x52>
                    }
                }
            }
 80011dc:	bf00      	nop

            if (modem_message.buffer != NULL) {
 80011de:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <Modem_API_Thread+0x68>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d0d6      	beq.n	8001194 <Modem_API_Thread+0x8>
                Heap_API_Free(modem_message.buffer);
 80011e6:	4b03      	ldr	r3, [pc, #12]	; (80011f4 <Modem_API_Thread+0x68>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff fe22 	bl	8000e34 <Heap_API_Free>
        if (UART_API_GetMessage(&modem_message, eUart_Modem) == true) {
 80011f0:	e7d0      	b.n	8001194 <Modem_API_Thread+0x8>
 80011f2:	bf00      	nop
 80011f4:	200007f0 	.word	0x200007f0

080011f8 <Modem_API_InitGpio>:
        }
    }
    osThreadTerminate(NULL);
}

static bool Modem_API_InitGpio (void) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
    if (GPIO_Driver_Init(eGpioDriver_ModemONPin) == false) { // MODEM_ON
 80011fc:	2005      	movs	r0, #5
 80011fe:	f002 fbdd 	bl	80039bc <GPIO_Driver_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	f083 0301 	eor.w	r3, r3, #1
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <Modem_API_InitGpio+0x1a>
        return false;
 800120e:	2300      	movs	r3, #0
 8001210:	e037      	b.n	8001282 <Modem_API_InitGpio+0x8a>
    };
    if (GPIO_Driver_Init(eGpioDriver_ModemPowerOffPin) == false) { // Reset_N
 8001212:	2000      	movs	r0, #0
 8001214:	f002 fbd2 	bl	80039bc <GPIO_Driver_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	f083 0301 	eor.w	r3, r3, #1
 800121e:	b2db      	uxtb	r3, r3
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <Modem_API_InitGpio+0x30>
        return false;
 8001224:	2300      	movs	r3, #0
 8001226:	e02c      	b.n	8001282 <Modem_API_InitGpio+0x8a>
    };
    if (GPIO_Driver_Init(eGpioDriver_GNSSOnPin) == false) { // Reset_N
 8001228:	2007      	movs	r0, #7
 800122a:	f002 fbc7 	bl	80039bc <GPIO_Driver_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	f083 0301 	eor.w	r3, r3, #1
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <Modem_API_InitGpio+0x46>
        return false;
 800123a:	2300      	movs	r3, #0
 800123c:	e021      	b.n	8001282 <Modem_API_InitGpio+0x8a>
    };

    if (GPIO_Driver_SetPin(eGpioDriver_ModemONPin) == false) {
 800123e:	2005      	movs	r0, #5
 8001240:	f002 fc30 	bl	8003aa4 <GPIO_Driver_SetPin>
 8001244:	4603      	mov	r3, r0
 8001246:	f083 0301 	eor.w	r3, r3, #1
 800124a:	b2db      	uxtb	r3, r3
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <Modem_API_InitGpio+0x5c>
        return false;
 8001250:	2300      	movs	r3, #0
 8001252:	e016      	b.n	8001282 <Modem_API_InitGpio+0x8a>
    }
    if (GPIO_Driver_SetPin(eGpioDriver_ModemPowerOffPin) == false) {
 8001254:	2000      	movs	r0, #0
 8001256:	f002 fc25 	bl	8003aa4 <GPIO_Driver_SetPin>
 800125a:	4603      	mov	r3, r0
 800125c:	f083 0301 	eor.w	r3, r3, #1
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <Modem_API_InitGpio+0x72>
        return false;
 8001266:	2300      	movs	r3, #0
 8001268:	e00b      	b.n	8001282 <Modem_API_InitGpio+0x8a>
    }
    if (GPIO_Driver_SetPin(eGpioDriver_GNSSOnPin) == false) {
 800126a:	2007      	movs	r0, #7
 800126c:	f002 fc1a 	bl	8003aa4 <GPIO_Driver_SetPin>
 8001270:	4603      	mov	r3, r0
 8001272:	f083 0301 	eor.w	r3, r3, #1
 8001276:	b2db      	uxtb	r3, r3
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <Modem_API_InitGpio+0x88>
        return false;
 800127c:	2300      	movs	r3, #0
 800127e:	e000      	b.n	8001282 <Modem_API_InitGpio+0x8a>
    }
    return true;
 8001280:	2301      	movs	r3, #1
}
 8001282:	4618      	mov	r0, r3
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <Modem_API_Init>:
/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/
bool Modem_API_Init (void) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
    /* GPIO */
    if (Modem_API_InitGpio() == false) {
 800128e:	f7ff ffb3 	bl	80011f8 <Modem_API_InitGpio>
 8001292:	4603      	mov	r3, r0
 8001294:	f083 0301 	eor.w	r3, r3, #1
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <Modem_API_Init+0x1a>
        return false;
 800129e:	2300      	movs	r3, #0
 80012a0:	e083      	b.n	80013aa <Modem_API_Init+0x122>
    }
    UART_API_Init(eUart_Modem, "\n\r", eUartBaudrate_Default);
 80012a2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012a6:	4943      	ldr	r1, [pc, #268]	; (80013b4 <Modem_API_Init+0x12c>)
 80012a8:	2001      	movs	r0, #1
 80012aa:	f001 f983 	bl	80025b4 <UART_API_Init>

    /* MUTEX */
    modem_mutex_id = osMutexNew(&mutex_attributes);
 80012ae:	4842      	ldr	r0, [pc, #264]	; (80013b8 <Modem_API_Init+0x130>)
 80012b0:	f005 fd7d 	bl	8006dae <osMutexNew>
 80012b4:	4603      	mov	r3, r0
 80012b6:	4a41      	ldr	r2, [pc, #260]	; (80013bc <Modem_API_Init+0x134>)
 80012b8:	6013      	str	r3, [r2, #0]
    if (modem_mutex_id == NULL) {
 80012ba:	4b40      	ldr	r3, [pc, #256]	; (80013bc <Modem_API_Init+0x134>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d108      	bne.n	80012d4 <Modem_API_Init+0x4c>
        error("Failed to create MUTEX\n");
 80012c2:	4b3f      	ldr	r3, [pc, #252]	; (80013c0 <Modem_API_Init+0x138>)
 80012c4:	6818      	ldr	r0, [r3, #0]
 80012c6:	4b3f      	ldr	r3, [pc, #252]	; (80013c4 <Modem_API_Init+0x13c>)
 80012c8:	22f2      	movs	r2, #242	; 0xf2
 80012ca:	493f      	ldr	r1, [pc, #252]	; (80013c8 <Modem_API_Init+0x140>)
 80012cc:	f7ff fcac 	bl	8000c28 <Debug_API_Print>
        return false;
 80012d0:	2300      	movs	r3, #0
 80012d2:	e06a      	b.n	80013aa <Modem_API_Init+0x122>
    }
    /* EVENT FLAGS */
    evt_id = osEventFlagsNew(NULL);
 80012d4:	2000      	movs	r0, #0
 80012d6:	f005 fc2e 	bl	8006b36 <osEventFlagsNew>
 80012da:	4603      	mov	r3, r0
 80012dc:	4a3b      	ldr	r2, [pc, #236]	; (80013cc <Modem_API_Init+0x144>)
 80012de:	6013      	str	r3, [r2, #0]
    if (evt_id == NULL) {
 80012e0:	4b3a      	ldr	r3, [pc, #232]	; (80013cc <Modem_API_Init+0x144>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d10d      	bne.n	8001304 <Modem_API_Init+0x7c>
        osMutexDelete(modem_mutex_id);
 80012e8:	4b34      	ldr	r3, [pc, #208]	; (80013bc <Modem_API_Init+0x134>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f005 fe6c 	bl	8006fca <osMutexDelete>
        error("Failed to create event flags\n");
 80012f2:	4b33      	ldr	r3, [pc, #204]	; (80013c0 <Modem_API_Init+0x138>)
 80012f4:	6818      	ldr	r0, [r3, #0]
 80012f6:	4b36      	ldr	r3, [pc, #216]	; (80013d0 <Modem_API_Init+0x148>)
 80012f8:	22f9      	movs	r2, #249	; 0xf9
 80012fa:	4933      	ldr	r1, [pc, #204]	; (80013c8 <Modem_API_Init+0x140>)
 80012fc:	f7ff fc94 	bl	8000c28 <Debug_API_Print>
        return false;
 8001300:	2300      	movs	r3, #0
 8001302:	e052      	b.n	80013aa <Modem_API_Init+0x122>
    }
    for (uint8_t flag = eModemFlag_First; flag < eModemFlag_Last; flag++) {
 8001304:	2300      	movs	r3, #0
 8001306:	71fb      	strb	r3, [r7, #7]
 8001308:	e00d      	b.n	8001326 <Modem_API_Init+0x9e>
        modem_api_flag_lut[flag].event_flag_id = evt_id;
 800130a:	79fa      	ldrb	r2, [r7, #7]
 800130c:	4b2f      	ldr	r3, [pc, #188]	; (80013cc <Modem_API_Init+0x144>)
 800130e:	6819      	ldr	r1, [r3, #0]
 8001310:	4830      	ldr	r0, [pc, #192]	; (80013d4 <Modem_API_Init+0x14c>)
 8001312:	4613      	mov	r3, r2
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	4413      	add	r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	4403      	add	r3, r0
 800131c:	3304      	adds	r3, #4
 800131e:	6019      	str	r1, [r3, #0]
    for (uint8_t flag = eModemFlag_First; flag < eModemFlag_Last; flag++) {
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	3301      	adds	r3, #1
 8001324:	71fb      	strb	r3, [r7, #7]
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	2b11      	cmp	r3, #17
 800132a:	d9ee      	bls.n	800130a <Modem_API_Init+0x82>
    }
    /* TIMER */
    timer_id = osTimerNew(Modem_API_EndOfSmsCallback,
 800132c:	2300      	movs	r3, #0
 800132e:	2200      	movs	r2, #0
 8001330:	2100      	movs	r1, #0
 8001332:	4829      	ldr	r0, [pc, #164]	; (80013d8 <Modem_API_Init+0x150>)
 8001334:	f005 faea 	bl	800690c <osTimerNew>
 8001338:	4603      	mov	r3, r0
 800133a:	4a28      	ldr	r2, [pc, #160]	; (80013dc <Modem_API_Init+0x154>)
 800133c:	6013      	str	r3, [r2, #0]
    osTimerOnce, NULL, NULL);
    if (timer_id == NULL) {
 800133e:	4b27      	ldr	r3, [pc, #156]	; (80013dc <Modem_API_Init+0x154>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d113      	bne.n	800136e <Modem_API_Init+0xe6>
        osMutexDelete(modem_mutex_id);
 8001346:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <Modem_API_Init+0x134>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f005 fe3d 	bl	8006fca <osMutexDelete>
        osEventFlagsDelete(evt_id);
 8001350:	4b1e      	ldr	r3, [pc, #120]	; (80013cc <Modem_API_Init+0x144>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f005 fd09 	bl	8006d6c <osEventFlagsDelete>
        error("Failed to create event flags\n");
 800135a:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <Modem_API_Init+0x138>)
 800135c:	6818      	ldr	r0, [r3, #0]
 800135e:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <Modem_API_Init+0x148>)
 8001360:	f240 1205 	movw	r2, #261	; 0x105
 8001364:	4918      	ldr	r1, [pc, #96]	; (80013c8 <Modem_API_Init+0x140>)
 8001366:	f7ff fc5f 	bl	8000c28 <Debug_API_Print>
        return false;
 800136a:	2300      	movs	r3, #0
 800136c:	e01d      	b.n	80013aa <Modem_API_Init+0x122>
    }
    /* THREAD */
    modem_api_task_handle = osThreadNew(Modem_API_Thread, NULL, &modem_api_task_attributes);
 800136e:	4a1c      	ldr	r2, [pc, #112]	; (80013e0 <Modem_API_Init+0x158>)
 8001370:	2100      	movs	r1, #0
 8001372:	481c      	ldr	r0, [pc, #112]	; (80013e4 <Modem_API_Init+0x15c>)
 8001374:	f005 fa08 	bl	8006788 <osThreadNew>
 8001378:	4603      	mov	r3, r0
 800137a:	4a1b      	ldr	r2, [pc, #108]	; (80013e8 <Modem_API_Init+0x160>)
 800137c:	6013      	str	r3, [r2, #0]
    if (modem_api_task_handle == NULL) {
 800137e:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <Modem_API_Init+0x160>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d110      	bne.n	80013a8 <Modem_API_Init+0x120>
        osMutexDelete(modem_mutex_id);
 8001386:	4b0d      	ldr	r3, [pc, #52]	; (80013bc <Modem_API_Init+0x134>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f005 fe1d 	bl	8006fca <osMutexDelete>
        osEventFlagsDelete(evt_id);
 8001390:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <Modem_API_Init+0x144>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f005 fce9 	bl	8006d6c <osEventFlagsDelete>
        osTimerDelete(timer_id);
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <Modem_API_Init+0x154>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f005 fb95 	bl	8006ace <osTimerDelete>
        return false;
 80013a4:	2300      	movs	r3, #0
 80013a6:	e000      	b.n	80013aa <Modem_API_Init+0x122>
    }

    return true;
 80013a8:	2301      	movs	r3, #1
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	0800e278 	.word	0x0800e278
 80013b8:	0800e96c 	.word	0x0800e96c
 80013bc:	200006e4 	.word	0x200006e4
 80013c0:	2000001c 	.word	0x2000001c
 80013c4:	0800e27c 	.word	0x0800e27c
 80013c8:	0800e254 	.word	0x0800e254
 80013cc:	200006e8 	.word	0x200006e8
 80013d0:	0800e294 	.word	0x0800e294
 80013d4:	20000020 	.word	0x20000020
 80013d8:	08001001 	.word	0x08001001
 80013dc:	200006ec 	.word	0x200006ec
 80013e0:	0800e948 	.word	0x0800e948
 80013e4:	0800118d 	.word	0x0800118d
 80013e8:	200006e0 	.word	0x200006e0

080013ec <Modem_API_PutResponse>:

/* RESPONSE */
bool Modem_API_PutResponse (eModemApiCommandEnum_t response_enum, char *response) {
 80013ec:	b590      	push	{r4, r7, lr}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	6039      	str	r1, [r7, #0]
 80013f6:	71fb      	strb	r3, [r7, #7]
    if (response_enum >= eModemApiCmd_Last || response == NULL) {
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	2b15      	cmp	r3, #21
 80013fc:	d802      	bhi.n	8001404 <Modem_API_PutResponse+0x18>
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d101      	bne.n	8001408 <Modem_API_PutResponse+0x1c>
        return false;
 8001404:	2300      	movs	r3, #0
 8001406:	e035      	b.n	8001474 <Modem_API_PutResponse+0x88>
    }

    if (dynamic_modem_api_lut[response_enum].buffer != NULL) {
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	4a1c      	ldr	r2, [pc, #112]	; (800147c <Modem_API_PutResponse+0x90>)
 800140c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d00c      	beq.n	800142e <Modem_API_PutResponse+0x42>
        dynamic_modem_api_lut[response_enum].length = 0;
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	4a19      	ldr	r2, [pc, #100]	; (800147c <Modem_API_PutResponse+0x90>)
 8001418:	00db      	lsls	r3, r3, #3
 800141a:	4413      	add	r3, r2
 800141c:	2200      	movs	r2, #0
 800141e:	809a      	strh	r2, [r3, #4]
        Heap_API_Free(dynamic_modem_api_lut[response_enum].buffer);
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	4a16      	ldr	r2, [pc, #88]	; (800147c <Modem_API_PutResponse+0x90>)
 8001424:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff fd03 	bl	8000e34 <Heap_API_Free>
    }
    dynamic_modem_api_lut[response_enum].length = strlen(response);
 800142e:	6838      	ldr	r0, [r7, #0]
 8001430:	f7fe ff00 	bl	8000234 <strlen>
 8001434:	4602      	mov	r2, r0
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	b291      	uxth	r1, r2
 800143a:	4a10      	ldr	r2, [pc, #64]	; (800147c <Modem_API_PutResponse+0x90>)
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	4413      	add	r3, r2
 8001440:	460a      	mov	r2, r1
 8001442:	809a      	strh	r2, [r3, #4]
    dynamic_modem_api_lut[response_enum].buffer = Heap_API_Allocate(dynamic_modem_api_lut[response_enum].length + 1, sizeof(char));
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	4a0d      	ldr	r2, [pc, #52]	; (800147c <Modem_API_PutResponse+0x90>)
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	4413      	add	r3, r2
 800144c:	889b      	ldrh	r3, [r3, #4]
 800144e:	3301      	adds	r3, #1
 8001450:	79fc      	ldrb	r4, [r7, #7]
 8001452:	2101      	movs	r1, #1
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff fc87 	bl	8000d68 <Heap_API_Allocate>
 800145a:	4603      	mov	r3, r0
 800145c:	4a07      	ldr	r2, [pc, #28]	; (800147c <Modem_API_PutResponse+0x90>)
 800145e:	f842 3034 	str.w	r3, [r2, r4, lsl #3]

    strcpy(dynamic_modem_api_lut[response_enum].buffer, response);
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	4a05      	ldr	r2, [pc, #20]	; (800147c <Modem_API_PutResponse+0x90>)
 8001466:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800146a:	6839      	ldr	r1, [r7, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f00a fc82 	bl	800bd76 <strcpy>

    return true;
 8001472:	2301      	movs	r3, #1
}
 8001474:	4618      	mov	r0, r3
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	bd90      	pop	{r4, r7, pc}
 800147c:	2000080c 	.word	0x2000080c

08001480 <Modem_API_GetResponse>:
bool Modem_API_GetResponse (eModemApiCommandEnum_t response_enum, char *response) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	6039      	str	r1, [r7, #0]
 800148a:	71fb      	strb	r3, [r7, #7]
    if (response_enum >= eModemApiCmd_Last || response == NULL) {
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	2b15      	cmp	r3, #21
 8001490:	d802      	bhi.n	8001498 <Modem_API_GetResponse+0x18>
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <Modem_API_GetResponse+0x1c>
        return false;
 8001498:	2300      	movs	r3, #0
 800149a:	e026      	b.n	80014ea <Modem_API_GetResponse+0x6a>
    }
    if (strcmp(dynamic_modem_api_lut[response_enum].buffer, "\0") != 0) {
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	4a15      	ldr	r2, [pc, #84]	; (80014f4 <Modem_API_GetResponse+0x74>)
 80014a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d01e      	beq.n	80014e8 <Modem_API_GetResponse+0x68>
        strncpy(response, dynamic_modem_api_lut[response_enum].buffer, dynamic_modem_api_lut[response_enum].length);
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	4a11      	ldr	r2, [pc, #68]	; (80014f4 <Modem_API_GetResponse+0x74>)
 80014ae:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	4a0f      	ldr	r2, [pc, #60]	; (80014f4 <Modem_API_GetResponse+0x74>)
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	4413      	add	r3, r2
 80014ba:	889b      	ldrh	r3, [r3, #4]
 80014bc:	461a      	mov	r2, r3
 80014be:	6838      	ldr	r0, [r7, #0]
 80014c0:	f00a fc61 	bl	800bd86 <strncpy>
        Heap_API_Free(dynamic_modem_api_lut[response_enum].buffer);
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	4a0b      	ldr	r2, [pc, #44]	; (80014f4 <Modem_API_GetResponse+0x74>)
 80014c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff fcb1 	bl	8000e34 <Heap_API_Free>
        dynamic_modem_api_lut[response_enum].buffer = NULL;
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	4a07      	ldr	r2, [pc, #28]	; (80014f4 <Modem_API_GetResponse+0x74>)
 80014d6:	2100      	movs	r1, #0
 80014d8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
        dynamic_modem_api_lut[response_enum].length = 0;
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	4a05      	ldr	r2, [pc, #20]	; (80014f4 <Modem_API_GetResponse+0x74>)
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	4413      	add	r3, r2
 80014e4:	2200      	movs	r2, #0
 80014e6:	809a      	strh	r2, [r3, #4]
    }
    return true;
 80014e8:	2301      	movs	r3, #1
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	2000080c 	.word	0x2000080c

080014f8 <Modem_API_SendAndWait>:

/* SEND */
bool Modem_API_SendAndWait (char *command_buffer, uint32_t timeout, uint32_t try_count) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b088      	sub	sp, #32
 80014fc:	af02      	add	r7, sp, #8
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
    /* MUTEX */
    if (osMutexAcquire(modem_mutex_id, timeout) != osOK) {
 8001504:	4b47      	ldr	r3, [pc, #284]	; (8001624 <Modem_API_SendAndWait+0x12c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	68b9      	ldr	r1, [r7, #8]
 800150a:	4618      	mov	r0, r3
 800150c:	f005 fcd5 	bl	8006eba <osMutexAcquire>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <Modem_API_SendAndWait+0x22>
        return false;
 8001516:	2300      	movs	r3, #0
 8001518:	e07f      	b.n	800161a <Modem_API_SendAndWait+0x122>
    }

    /* CLEAR FLAG */
    uint32_t flag_status = osFlagsErrorUnknown;
 800151a:	f04f 33ff 	mov.w	r3, #4294967295
 800151e:	613b      	str	r3, [r7, #16]
    flag_status = osEventFlagsClear(modem_api_flag_lut[eModemFlag_MsgRecieved].event_flag_id, modem_api_flag_lut[eModemFlag_MsgRecieved].event_flag_mask);
 8001520:	4b41      	ldr	r3, [pc, #260]	; (8001628 <Modem_API_SendAndWait+0x130>)
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	4a40      	ldr	r2, [pc, #256]	; (8001628 <Modem_API_SendAndWait+0x130>)
 8001526:	6952      	ldr	r2, [r2, #20]
 8001528:	4611      	mov	r1, r2
 800152a:	4618      	mov	r0, r3
 800152c:	f005 fb86 	bl	8006c3c <osEventFlagsClear>
 8001530:	6138      	str	r0, [r7, #16]
    /* ASSERT */
    if (flag_status == osFlagsErrorUnknown || flag_status == osFlagsErrorParameter || flag_status == osFlagsErrorResource) {
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001538:	d007      	beq.n	800154a <Modem_API_SendAndWait+0x52>
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	f113 0f04 	cmn.w	r3, #4
 8001540:	d003      	beq.n	800154a <Modem_API_SendAndWait+0x52>
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	f113 0f03 	cmn.w	r3, #3
 8001548:	d10e      	bne.n	8001568 <Modem_API_SendAndWait+0x70>
        error("Failed to clear message flag.\n");
 800154a:	4b38      	ldr	r3, [pc, #224]	; (800162c <Modem_API_SendAndWait+0x134>)
 800154c:	6818      	ldr	r0, [r3, #0]
 800154e:	4b38      	ldr	r3, [pc, #224]	; (8001630 <Modem_API_SendAndWait+0x138>)
 8001550:	f44f 729f 	mov.w	r2, #318	; 0x13e
 8001554:	4937      	ldr	r1, [pc, #220]	; (8001634 <Modem_API_SendAndWait+0x13c>)
 8001556:	f7ff fb67 	bl	8000c28 <Debug_API_Print>
        osMutexRelease(modem_mutex_id);
 800155a:	4b32      	ldr	r3, [pc, #200]	; (8001624 <Modem_API_SendAndWait+0x12c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f005 fcf6 	bl	8006f50 <osMutexRelease>
        return false;
 8001564:	2300      	movs	r3, #0
 8001566:	e058      	b.n	800161a <Modem_API_SendAndWait+0x122>
    }

    for (uint16_t i = 0; i < try_count; i++) {
 8001568:	2300      	movs	r3, #0
 800156a:	82fb      	strh	r3, [r7, #22]
 800156c:	e044      	b.n	80015f8 <Modem_API_SendAndWait+0x100>
        /* SEND */
        modem("%s", command_buffer);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	4b31      	ldr	r3, [pc, #196]	; (8001638 <Modem_API_SendAndWait+0x140>)
 8001574:	2200      	movs	r2, #0
 8001576:	2100      	movs	r1, #0
 8001578:	4830      	ldr	r0, [pc, #192]	; (800163c <Modem_API_SendAndWait+0x144>)
 800157a:	f7ff fb55 	bl	8000c28 <Debug_API_Print>
        UART_API_Send(eUart_Modem, command_buffer);
 800157e:	68f8      	ldr	r0, [r7, #12]
 8001580:	f7fe fe58 	bl	8000234 <strlen>
 8001584:	4603      	mov	r3, r0
 8001586:	b29b      	uxth	r3, r3
 8001588:	461a      	mov	r2, r3
 800158a:	68f9      	ldr	r1, [r7, #12]
 800158c:	2001      	movs	r0, #1
 800158e:	f001 f90d 	bl	80027ac <UART_API_SendString>
        flag_status = osEventFlagsWait(modem_api_flag_lut[eModemFlag_MsgRecieved].event_flag_id, modem_api_flag_lut[eModemFlag_MsgRecieved].event_flag_mask, osFlagsWaitAny, timeout);
 8001592:	4b25      	ldr	r3, [pc, #148]	; (8001628 <Modem_API_SendAndWait+0x130>)
 8001594:	6918      	ldr	r0, [r3, #16]
 8001596:	4b24      	ldr	r3, [pc, #144]	; (8001628 <Modem_API_SendAndWait+0x130>)
 8001598:	6959      	ldr	r1, [r3, #20]
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	2200      	movs	r2, #0
 800159e:	f005 fb7f 	bl	8006ca0 <osEventFlagsWait>
 80015a2:	6138      	str	r0, [r7, #16]
        /* ASSERT */
        if (flag_status == osFlagsErrorUnknown || flag_status == osFlagsErrorParameter || flag_status == osFlagsErrorResource) {
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015aa:	d007      	beq.n	80015bc <Modem_API_SendAndWait+0xc4>
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	f113 0f04 	cmn.w	r3, #4
 80015b2:	d003      	beq.n	80015bc <Modem_API_SendAndWait+0xc4>
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	f113 0f03 	cmn.w	r3, #3
 80015ba:	d106      	bne.n	80015ca <Modem_API_SendAndWait+0xd2>
            osMutexRelease(modem_mutex_id);
 80015bc:	4b19      	ldr	r3, [pc, #100]	; (8001624 <Modem_API_SendAndWait+0x12c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f005 fcc5 	bl	8006f50 <osMutexRelease>
            return false;
 80015c6:	2300      	movs	r3, #0
 80015c8:	e027      	b.n	800161a <Modem_API_SendAndWait+0x122>
        }
        /* TIMEOUT */
        if (flag_status == osFlagsErrorTimeout) {
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	f113 0f02 	cmn.w	r3, #2
 80015d0:	d106      	bne.n	80015e0 <Modem_API_SendAndWait+0xe8>
            osMutexRelease(modem_mutex_id);
 80015d2:	4b14      	ldr	r3, [pc, #80]	; (8001624 <Modem_API_SendAndWait+0x12c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f005 fcba 	bl	8006f50 <osMutexRelease>
            return false;
 80015dc:	2300      	movs	r3, #0
 80015de:	e01c      	b.n	800161a <Modem_API_SendAndWait+0x122>
        }
        /* MESSAGE RECIEVED */
        if (Modem_API_GetState(eModemFlag_MsgRecieved) != eModemApiState_ERROR) {
 80015e0:	2001      	movs	r0, #1
 80015e2:	f000 f955 	bl	8001890 <Modem_API_GetState>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b04      	cmp	r3, #4
 80015ea:	d10a      	bne.n	8001602 <Modem_API_SendAndWait+0x10a>
            break;
        } else {
            osDelay(timeout);
 80015ec:	68b8      	ldr	r0, [r7, #8]
 80015ee:	f005 f95d 	bl	80068ac <osDelay>
    for (uint16_t i = 0; i < try_count; i++) {
 80015f2:	8afb      	ldrh	r3, [r7, #22]
 80015f4:	3301      	adds	r3, #1
 80015f6:	82fb      	strh	r3, [r7, #22]
 80015f8:	8afb      	ldrh	r3, [r7, #22]
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d8b6      	bhi.n	800156e <Modem_API_SendAndWait+0x76>
 8001600:	e000      	b.n	8001604 <Modem_API_SendAndWait+0x10c>
            break;
 8001602:	bf00      	nop
        }
    }

    if (osMutexRelease(modem_mutex_id) != osOK) {
 8001604:	4b07      	ldr	r3, [pc, #28]	; (8001624 <Modem_API_SendAndWait+0x12c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f005 fca1 	bl	8006f50 <osMutexRelease>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <Modem_API_SendAndWait+0x120>
        return false;
 8001614:	2300      	movs	r3, #0
 8001616:	e000      	b.n	800161a <Modem_API_SendAndWait+0x122>
    }
    return true;
 8001618:	2301      	movs	r3, #1
}
 800161a:	4618      	mov	r0, r3
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	200006e4 	.word	0x200006e4
 8001628:	20000020 	.word	0x20000020
 800162c:	2000001c 	.word	0x2000001c
 8001630:	0800e2b4 	.word	0x0800e2b4
 8001634:	0800e254 	.word	0x0800e254
 8001638:	0800e2d4 	.word	0x0800e2d4
 800163c:	0800e228 	.word	0x0800e228

08001640 <Modem_API_Send>:
bool Modem_API_Send (char *command_buffer) {
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af02      	add	r7, sp, #8
 8001646:	6078      	str	r0, [r7, #4]
    if (osMutexAcquire(modem_mutex_id, osWaitForever) != osOK) {
 8001648:	4b26      	ldr	r3, [pc, #152]	; (80016e4 <Modem_API_Send+0xa4>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f04f 31ff 	mov.w	r1, #4294967295
 8001650:	4618      	mov	r0, r3
 8001652:	f005 fc32 	bl	8006eba <osMutexAcquire>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <Modem_API_Send+0x20>
        return false;
 800165c:	2300      	movs	r3, #0
 800165e:	e03d      	b.n	80016dc <Modem_API_Send+0x9c>
    }

    /* CLEAR FLAG */
    uint32_t flag_status = osFlagsErrorUnknown;
 8001660:	f04f 33ff 	mov.w	r3, #4294967295
 8001664:	60fb      	str	r3, [r7, #12]
    flag_status = osEventFlagsClear(modem_mutex_id, modem_api_flag_lut[eModemFlag_MsgRecieved].event_flag_mask);
 8001666:	4b1f      	ldr	r3, [pc, #124]	; (80016e4 <Modem_API_Send+0xa4>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a1f      	ldr	r2, [pc, #124]	; (80016e8 <Modem_API_Send+0xa8>)
 800166c:	6952      	ldr	r2, [r2, #20]
 800166e:	4611      	mov	r1, r2
 8001670:	4618      	mov	r0, r3
 8001672:	f005 fae3 	bl	8006c3c <osEventFlagsClear>
 8001676:	60f8      	str	r0, [r7, #12]
    /* ASSERT */
    if (flag_status == osFlagsErrorUnknown || flag_status == osFlagsErrorParameter || flag_status == osFlagsErrorResource) {
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800167e:	d007      	beq.n	8001690 <Modem_API_Send+0x50>
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f113 0f04 	cmn.w	r3, #4
 8001686:	d003      	beq.n	8001690 <Modem_API_Send+0x50>
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f113 0f03 	cmn.w	r3, #3
 800168e:	d106      	bne.n	800169e <Modem_API_Send+0x5e>
        osMutexRelease(modem_mutex_id);
 8001690:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <Modem_API_Send+0xa4>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f005 fc5b 	bl	8006f50 <osMutexRelease>
        return false;
 800169a:	2300      	movs	r3, #0
 800169c:	e01e      	b.n	80016dc <Modem_API_Send+0x9c>
    }
    /* SEND */
    bool status = UART_API_Send(eUart_Modem, command_buffer);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7fe fdc8 	bl	8000234 <strlen>
 80016a4:	4603      	mov	r3, r0
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	461a      	mov	r2, r3
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	2001      	movs	r0, #1
 80016ae:	f001 f87d 	bl	80027ac <UART_API_SendString>
 80016b2:	4603      	mov	r3, r0
 80016b4:	72fb      	strb	r3, [r7, #11]
    modem("%s", command_buffer);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <Modem_API_Send+0xac>)
 80016bc:	2200      	movs	r2, #0
 80016be:	2100      	movs	r1, #0
 80016c0:	480b      	ldr	r0, [pc, #44]	; (80016f0 <Modem_API_Send+0xb0>)
 80016c2:	f7ff fab1 	bl	8000c28 <Debug_API_Print>
    if (osMutexRelease(modem_mutex_id) != osOK) {
 80016c6:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <Modem_API_Send+0xa4>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f005 fc40 	bl	8006f50 <osMutexRelease>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <Modem_API_Send+0x9a>
        return false;
 80016d6:	2300      	movs	r3, #0
 80016d8:	e000      	b.n	80016dc <Modem_API_Send+0x9c>
    }
    return status;
 80016da:	7afb      	ldrb	r3, [r7, #11]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	200006e4 	.word	0x200006e4
 80016e8:	20000020 	.word	0x20000020
 80016ec:	0800e2d4 	.word	0x0800e2d4
 80016f0:	0800e228 	.word	0x0800e228

080016f4 <Modem_API_SetFlag>:

/* FLAGS */
bool Modem_API_SetFlag (eModemFlagsEnum_t flag, eModemApiStateEnum_t state) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	460a      	mov	r2, r1
 80016fe:	71fb      	strb	r3, [r7, #7]
 8001700:	4613      	mov	r3, r2
 8001702:	71bb      	strb	r3, [r7, #6]
    uint32_t flag_status = osFlagsErrorUnknown;
 8001704:	f04f 33ff 	mov.w	r3, #4294967295
 8001708:	60fb      	str	r3, [r7, #12]
    flag_status = osEventFlagsSet(modem_api_flag_lut[eModemFlag_MsgRecieved].event_flag_id, modem_api_flag_lut[flag].event_flag_mask);
 800170a:	4b15      	ldr	r3, [pc, #84]	; (8001760 <Modem_API_SetFlag+0x6c>)
 800170c:	6918      	ldr	r0, [r3, #16]
 800170e:	79fa      	ldrb	r2, [r7, #7]
 8001710:	4913      	ldr	r1, [pc, #76]	; (8001760 <Modem_API_SetFlag+0x6c>)
 8001712:	4613      	mov	r3, r2
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	4413      	add	r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	440b      	add	r3, r1
 800171c:	3308      	adds	r3, #8
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4619      	mov	r1, r3
 8001722:	f005 fa47 	bl	8006bb4 <osEventFlagsSet>
 8001726:	60f8      	str	r0, [r7, #12]
    if (flag_status == osFlagsErrorUnknown || flag_status == osFlagsErrorParameter || flag_status == osFlagsErrorResource) {
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800172e:	d007      	beq.n	8001740 <Modem_API_SetFlag+0x4c>
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f113 0f04 	cmn.w	r3, #4
 8001736:	d003      	beq.n	8001740 <Modem_API_SetFlag+0x4c>
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f113 0f03 	cmn.w	r3, #3
 800173e:	d101      	bne.n	8001744 <Modem_API_SetFlag+0x50>
        return false;
 8001740:	2300      	movs	r3, #0
 8001742:	e009      	b.n	8001758 <Modem_API_SetFlag+0x64>
    }
    modem_api_flag_lut[flag].state = state;
 8001744:	79fa      	ldrb	r2, [r7, #7]
 8001746:	4906      	ldr	r1, [pc, #24]	; (8001760 <Modem_API_SetFlag+0x6c>)
 8001748:	4613      	mov	r3, r2
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	4413      	add	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	440b      	add	r3, r1
 8001752:	79ba      	ldrb	r2, [r7, #6]
 8001754:	701a      	strb	r2, [r3, #0]
    return true;
 8001756:	2301      	movs	r3, #1
}
 8001758:	4618      	mov	r0, r3
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20000020 	.word	0x20000020

08001764 <Modem_API_ClearFlag>:
bool Modem_API_ClearFlag (eModemFlagsEnum_t flag, eModemApiStateEnum_t state) {
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	460a      	mov	r2, r1
 800176e:	71fb      	strb	r3, [r7, #7]
 8001770:	4613      	mov	r3, r2
 8001772:	71bb      	strb	r3, [r7, #6]
    uint32_t flag_status = osFlagsErrorUnknown;
 8001774:	f04f 33ff 	mov.w	r3, #4294967295
 8001778:	60fb      	str	r3, [r7, #12]
    flag_status = osEventFlagsClear(modem_api_flag_lut[eModemFlag_MsgRecieved].event_flag_id, modem_api_flag_lut[flag].event_flag_mask);
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <Modem_API_ClearFlag+0x6c>)
 800177c:	6918      	ldr	r0, [r3, #16]
 800177e:	79fa      	ldrb	r2, [r7, #7]
 8001780:	4913      	ldr	r1, [pc, #76]	; (80017d0 <Modem_API_ClearFlag+0x6c>)
 8001782:	4613      	mov	r3, r2
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	4413      	add	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	440b      	add	r3, r1
 800178c:	3308      	adds	r3, #8
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4619      	mov	r1, r3
 8001792:	f005 fa53 	bl	8006c3c <osEventFlagsClear>
 8001796:	60f8      	str	r0, [r7, #12]
    if (flag_status == osFlagsErrorUnknown || flag_status == osFlagsErrorParameter || flag_status == osFlagsErrorResource) {
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800179e:	d007      	beq.n	80017b0 <Modem_API_ClearFlag+0x4c>
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f113 0f04 	cmn.w	r3, #4
 80017a6:	d003      	beq.n	80017b0 <Modem_API_ClearFlag+0x4c>
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f113 0f03 	cmn.w	r3, #3
 80017ae:	d101      	bne.n	80017b4 <Modem_API_ClearFlag+0x50>
        return false;
 80017b0:	2300      	movs	r3, #0
 80017b2:	e009      	b.n	80017c8 <Modem_API_ClearFlag+0x64>
    }
    modem_api_flag_lut[flag].state = state;
 80017b4:	79fa      	ldrb	r2, [r7, #7]
 80017b6:	4906      	ldr	r1, [pc, #24]	; (80017d0 <Modem_API_ClearFlag+0x6c>)
 80017b8:	4613      	mov	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	4413      	add	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	440b      	add	r3, r1
 80017c2:	79ba      	ldrb	r2, [r7, #6]
 80017c4:	701a      	strb	r2, [r3, #0]
    return true;
 80017c6:	2301      	movs	r3, #1
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20000020 	.word	0x20000020

080017d4 <Modem_API_WaitFlag>:
bool Modem_API_WaitFlag (eModemFlagsEnum_t flag, uint32_t timeout) {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	6039      	str	r1, [r7, #0]
 80017de:	71fb      	strb	r3, [r7, #7]
    uint32_t flag_status = osFlagsErrorUnknown;
 80017e0:	f04f 33ff 	mov.w	r3, #4294967295
 80017e4:	60fb      	str	r3, [r7, #12]
    flag_status = osEventFlagsWait(modem_api_flag_lut[flag].event_flag_id, modem_api_flag_lut[flag].event_flag_mask, osFlagsNoClear, timeout);
 80017e6:	79fa      	ldrb	r2, [r7, #7]
 80017e8:	4917      	ldr	r1, [pc, #92]	; (8001848 <Modem_API_WaitFlag+0x74>)
 80017ea:	4613      	mov	r3, r2
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	4413      	add	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	440b      	add	r3, r1
 80017f4:	3304      	adds	r3, #4
 80017f6:	6818      	ldr	r0, [r3, #0]
 80017f8:	79fa      	ldrb	r2, [r7, #7]
 80017fa:	4913      	ldr	r1, [pc, #76]	; (8001848 <Modem_API_WaitFlag+0x74>)
 80017fc:	4613      	mov	r3, r2
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	4413      	add	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	440b      	add	r3, r1
 8001806:	3308      	adds	r3, #8
 8001808:	6819      	ldr	r1, [r3, #0]
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	2202      	movs	r2, #2
 800180e:	f005 fa47 	bl	8006ca0 <osEventFlagsWait>
 8001812:	60f8      	str	r0, [r7, #12]
    /* ASSERT */
    if (flag_status == osFlagsErrorUnknown || flag_status == osFlagsErrorParameter || flag_status == osFlagsErrorResource) {
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800181a:	d007      	beq.n	800182c <Modem_API_WaitFlag+0x58>
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f113 0f04 	cmn.w	r3, #4
 8001822:	d003      	beq.n	800182c <Modem_API_WaitFlag+0x58>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f113 0f03 	cmn.w	r3, #3
 800182a:	d101      	bne.n	8001830 <Modem_API_WaitFlag+0x5c>
        return false;
 800182c:	2300      	movs	r3, #0
 800182e:	e006      	b.n	800183e <Modem_API_WaitFlag+0x6a>
    }
    /* TIMEOUT */
    if (flag_status == osFlagsErrorTimeout) {
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f113 0f02 	cmn.w	r3, #2
 8001836:	d101      	bne.n	800183c <Modem_API_WaitFlag+0x68>
        return false;
 8001838:	2300      	movs	r3, #0
 800183a:	e000      	b.n	800183e <Modem_API_WaitFlag+0x6a>
    }
    return true;
 800183c:	2301      	movs	r3, #1
}
 800183e:	4618      	mov	r0, r3
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000020 	.word	0x20000020

0800184c <SMS_APP_SendAndSetFlag>:
bool SMS_APP_SendAndSetFlag (char *command, eModemFlagsEnum_t flag, eModemApiStateEnum_t state, uint32_t timeout) {
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	607b      	str	r3, [r7, #4]
 8001856:	460b      	mov	r3, r1
 8001858:	72fb      	strb	r3, [r7, #11]
 800185a:	4613      	mov	r3, r2
 800185c:	72bb      	strb	r3, [r7, #10]
    Modem_API_SendAndWait(command, timeout, RETRY_COUNT);
 800185e:	2205      	movs	r2, #5
 8001860:	6879      	ldr	r1, [r7, #4]
 8001862:	68f8      	ldr	r0, [r7, #12]
 8001864:	f7ff fe48 	bl	80014f8 <Modem_API_SendAndWait>
    if (Modem_API_GetState(eModemFlag_MsgRecieved) == eModemApiState_OK) {
 8001868:	2001      	movs	r0, #1
 800186a:	f000 f811 	bl	8001890 <Modem_API_GetState>
 800186e:	4603      	mov	r3, r0
 8001870:	2b03      	cmp	r3, #3
 8001872:	d107      	bne.n	8001884 <SMS_APP_SendAndSetFlag+0x38>
        return Modem_API_SetFlag(flag, state);
 8001874:	7aba      	ldrb	r2, [r7, #10]
 8001876:	7afb      	ldrb	r3, [r7, #11]
 8001878:	4611      	mov	r1, r2
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff ff3a 	bl	80016f4 <Modem_API_SetFlag>
 8001880:	4603      	mov	r3, r0
 8001882:	e000      	b.n	8001886 <SMS_APP_SendAndSetFlag+0x3a>
    }
    return false;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <Modem_API_GetState>:
eModemApiStateEnum_t Modem_API_GetState (eModemFlagsEnum_t flag) {
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	71fb      	strb	r3, [r7, #7]
    return modem_api_flag_lut[flag].state;
 800189a:	79fa      	ldrb	r2, [r7, #7]
 800189c:	4906      	ldr	r1, [pc, #24]	; (80018b8 <Modem_API_GetState+0x28>)
 800189e:	4613      	mov	r3, r2
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	4413      	add	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	440b      	add	r3, r1
 80018a8:	781b      	ldrb	r3, [r3, #0]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	20000020 	.word	0x20000020

080018bc <Modem_API_ParseInt>:
 *********************************************************************************************************************/

/**********************************************************************************************************************
 * Definitions of private functions
 *********************************************************************************************************************/
static int Modem_API_ParseInt (char *buffer, char *separator) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
    if (StrContains(buffer, strlen(buffer), separator) == true) {
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7fe fcb4 	bl	8000234 <strlen>
 80018cc:	4603      	mov	r3, r0
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	4619      	mov	r1, r3
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f009 fae8 	bl	800aea8 <StrContains>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d007      	beq.n	80018ee <Modem_API_ParseInt+0x32>
        token = strtok(buffer, separator);
 80018de:	6839      	ldr	r1, [r7, #0]
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f00a fa79 	bl	800bdd8 <strtok>
 80018e6:	4603      	mov	r3, r0
 80018e8:	4a09      	ldr	r2, [pc, #36]	; (8001910 <Modem_API_ParseInt+0x54>)
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	e006      	b.n	80018fc <Modem_API_ParseInt+0x40>
    } else {
        token = strtok(NULL, separator);
 80018ee:	6839      	ldr	r1, [r7, #0]
 80018f0:	2000      	movs	r0, #0
 80018f2:	f00a fa71 	bl	800bdd8 <strtok>
 80018f6:	4603      	mov	r3, r0
 80018f8:	4a05      	ldr	r2, [pc, #20]	; (8001910 <Modem_API_ParseInt+0x54>)
 80018fa:	6013      	str	r3, [r2, #0]
    }
    return atoi(token);
 80018fc:	4b04      	ldr	r3, [pc, #16]	; (8001910 <Modem_API_ParseInt+0x54>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f009 fd82 	bl	800b40a <atoi>
 8001906:	4603      	mov	r3, r0
}
 8001908:	4618      	mov	r0, r3
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	200008bc 	.word	0x200008bc

08001914 <Modem_API_ParseString>:
static char* Modem_API_ParseString (char *buffer, char *separator) {
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
    if (StrContains(buffer, strlen(buffer), separator) == true) {
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7fe fc88 	bl	8000234 <strlen>
 8001924:	4603      	mov	r3, r0
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	4619      	mov	r1, r3
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f009 fabc 	bl	800aea8 <StrContains>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d007      	beq.n	8001946 <Modem_API_ParseString+0x32>
        token = strtok(buffer, separator);
 8001936:	6839      	ldr	r1, [r7, #0]
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f00a fa4d 	bl	800bdd8 <strtok>
 800193e:	4603      	mov	r3, r0
 8001940:	4a07      	ldr	r2, [pc, #28]	; (8001960 <Modem_API_ParseString+0x4c>)
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	e006      	b.n	8001954 <Modem_API_ParseString+0x40>
    } else {
        token = strtok(NULL, separator);
 8001946:	6839      	ldr	r1, [r7, #0]
 8001948:	2000      	movs	r0, #0
 800194a:	f00a fa45 	bl	800bdd8 <strtok>
 800194e:	4603      	mov	r3, r0
 8001950:	4a03      	ldr	r2, [pc, #12]	; (8001960 <Modem_API_ParseString+0x4c>)
 8001952:	6013      	str	r3, [r2, #0]
    }
    return token;
 8001954:	4b02      	ldr	r3, [pc, #8]	; (8001960 <Modem_API_ParseString+0x4c>)
 8001956:	681b      	ldr	r3, [r3, #0]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	200008bc 	.word	0x200008bc

08001964 <Modem_API_OK_Callback>:

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/
/* DEFAULT */
bool Modem_API_OK_Callback (sCmdApi_CallbackArgs_t *cmd_api_callback_args) {
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
    Modem_API_SetFlag(eModemFlag_MsgRecieved, eModemApiState_OK);
 800196c:	2103      	movs	r1, #3
 800196e:	2001      	movs	r0, #1
 8001970:	f7ff fec0 	bl	80016f4 <Modem_API_SetFlag>
    snprintf(cmd_api_callback_args->response_buffer, cmd_api_callback_args->response_buffer_length,
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6898      	ldr	r0, [r3, #8]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	899b      	ldrh	r3, [r3, #12]
 800197c:	4a07      	ldr	r2, [pc, #28]	; (800199c <Modem_API_OK_Callback+0x38>)
 800197e:	4619      	mov	r1, r3
 8001980:	f00a f944 	bl	800bc0c <sniprintf>
    "OK");
    Modem_API_PutResponse(eModemApiCmd_OK, cmd_api_callback_args->response_buffer);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	4619      	mov	r1, r3
 800198a:	2000      	movs	r0, #0
 800198c:	f7ff fd2e 	bl	80013ec <Modem_API_PutResponse>
    return true;
 8001990:	2301      	movs	r3, #1
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	0800e2d8 	.word	0x0800e2d8

080019a0 <Modem_API_ERROR_Callback>:
bool Modem_API_ERROR_Callback (sCmdApi_CallbackArgs_t *cmd_api_callback_args) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
    Modem_API_SetFlag(eModemFlag_MsgRecieved, eModemApiState_ERROR);
 80019a8:	2104      	movs	r1, #4
 80019aa:	2001      	movs	r0, #1
 80019ac:	f7ff fea2 	bl	80016f4 <Modem_API_SetFlag>
    snprintf(cmd_api_callback_args->response_buffer, cmd_api_callback_args->response_buffer_length,
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6898      	ldr	r0, [r3, #8]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	899b      	ldrh	r3, [r3, #12]
 80019b8:	4a07      	ldr	r2, [pc, #28]	; (80019d8 <Modem_API_ERROR_Callback+0x38>)
 80019ba:	4619      	mov	r1, r3
 80019bc:	f00a f926 	bl	800bc0c <sniprintf>
    "ERROR");
    Modem_API_PutResponse(eModemApiCmd_OK, cmd_api_callback_args->response_buffer);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	4619      	mov	r1, r3
 80019c6:	2000      	movs	r0, #0
 80019c8:	f7ff fd10 	bl	80013ec <Modem_API_PutResponse>
    return true;
 80019cc:	2301      	movs	r3, #1
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	0800e2dc 	.word	0x0800e2dc

080019dc <Modem_API_EIND_Callback>:

/* SETUP */
bool Modem_API_EIND_Callback (sCmdApi_CallbackArgs_t *cmd_api_callback_args) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
    StrRemChar(cmd_api_callback_args->arguments, BAD_CHARS);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4916      	ldr	r1, [pc, #88]	; (8001a44 <Modem_API_EIND_Callback+0x68>)
 80019ea:	4618      	mov	r0, r3
 80019ec:	f009 faba 	bl	800af64 <StrRemChar>
    if (strcmp(cmd_api_callback_args->arguments, "1") == 0) {
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4914      	ldr	r1, [pc, #80]	; (8001a48 <Modem_API_EIND_Callback+0x6c>)
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7fe fc12 	bl	8000220 <strcmp>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d10c      	bne.n	8001a1c <Modem_API_EIND_Callback+0x40>
        Modem_API_SetFlag(eModemFlag_Ready, eModemApiState_Ready);
 8001a02:	2101      	movs	r1, #1
 8001a04:	2000      	movs	r0, #0
 8001a06:	f7ff fe75 	bl	80016f4 <Modem_API_SetFlag>
        snprintf(cmd_api_callback_args->response_buffer, cmd_api_callback_args->response_buffer_length,
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6898      	ldr	r0, [r3, #8]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	899b      	ldrh	r3, [r3, #12]
 8001a12:	4a0e      	ldr	r2, [pc, #56]	; (8001a4c <Modem_API_EIND_Callback+0x70>)
 8001a14:	4619      	mov	r1, r3
 8001a16:	f00a f8f9 	bl	800bc0c <sniprintf>
 8001a1a:	e007      	b.n	8001a2c <Modem_API_EIND_Callback+0x50>
        "Modem is ready.");
    } else {
        strncpy(cmd_api_callback_args->response_buffer, "", cmd_api_callback_args->response_buffer_length);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6898      	ldr	r0, [r3, #8]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	899b      	ldrh	r3, [r3, #12]
 8001a24:	461a      	mov	r2, r3
 8001a26:	490a      	ldr	r1, [pc, #40]	; (8001a50 <Modem_API_EIND_Callback+0x74>)
 8001a28:	f00a f9ad 	bl	800bd86 <strncpy>
    }
    Modem_API_PutResponse(eModemApiCmd_EIND, cmd_api_callback_args->arguments);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4619      	mov	r1, r3
 8001a32:	2002      	movs	r0, #2
 8001a34:	f7ff fcda 	bl	80013ec <Modem_API_PutResponse>
    return true;
 8001a38:	2301      	movs	r3, #1
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	0800e2e4 	.word	0x0800e2e4
 8001a48:	0800e2e8 	.word	0x0800e2e8
 8001a4c:	0800e2ec 	.word	0x0800e2ec
 8001a50:	0800e2fc 	.word	0x0800e2fc

08001a54 <Modem_API_EUSIM_Callback>:
bool Modem_API_EUSIM_Callback (sCmdApi_CallbackArgs_t *cmd_api_callback_args) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
    StrRemChar(cmd_api_callback_args->arguments, BAD_CHARS);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4916      	ldr	r1, [pc, #88]	; (8001abc <Modem_API_EUSIM_Callback+0x68>)
 8001a62:	4618      	mov	r0, r3
 8001a64:	f009 fa7e 	bl	800af64 <StrRemChar>
    if (strcmp(cmd_api_callback_args->arguments, "1") == 0) {
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4914      	ldr	r1, [pc, #80]	; (8001ac0 <Modem_API_EUSIM_Callback+0x6c>)
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe fbd6 	bl	8000220 <strcmp>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d104      	bne.n	8001a84 <Modem_API_EUSIM_Callback+0x30>
        Modem_API_SetFlag(eModemFlag_Sim1, eModemApiState_Ready);
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	2004      	movs	r0, #4
 8001a7e:	f7ff fe39 	bl	80016f4 <Modem_API_SetFlag>
 8001a82:	e00c      	b.n	8001a9e <Modem_API_EUSIM_Callback+0x4a>
    } else if (strcmp(cmd_api_callback_args->arguments, "2") == 0) {
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	490e      	ldr	r1, [pc, #56]	; (8001ac4 <Modem_API_EUSIM_Callback+0x70>)
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7fe fbc8 	bl	8000220 <strcmp>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d103      	bne.n	8001a9e <Modem_API_EUSIM_Callback+0x4a>
        Modem_API_SetFlag(eModemFlag_Sim2, eModemApiState_Ready);
 8001a96:	2101      	movs	r1, #1
 8001a98:	2005      	movs	r0, #5
 8001a9a:	f7ff fe2b 	bl	80016f4 <Modem_API_SetFlag>
    }

    snprintf(cmd_api_callback_args->response_buffer, cmd_api_callback_args->response_buffer_length,
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6898      	ldr	r0, [r3, #8]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	899b      	ldrh	r3, [r3, #12]
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a06      	ldr	r2, [pc, #24]	; (8001ac8 <Modem_API_EUSIM_Callback+0x74>)
 8001aae:	f00a f8ad 	bl	800bc0c <sniprintf>
    "SIM slot: %s", cmd_api_callback_args->arguments);
    return true;
 8001ab2:	2301      	movs	r3, #1
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	0800e2e4 	.word	0x0800e2e4
 8001ac0:	0800e2e8 	.word	0x0800e2e8
 8001ac4:	0800e300 	.word	0x0800e300
 8001ac8:	0800e304 	.word	0x0800e304

08001acc <Modem_API_ECHO_Callback>:
bool Modem_API_ECHO_Callback (sCmdApi_CallbackArgs_t *cmd_api_callback_args) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
    snprintf(cmd_api_callback_args->response_buffer, cmd_api_callback_args->response_buffer_length,
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6898      	ldr	r0, [r3, #8]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	899b      	ldrh	r3, [r3, #12]
 8001adc:	4a04      	ldr	r2, [pc, #16]	; (8001af0 <Modem_API_ECHO_Callback+0x24>)
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f00a f894 	bl	800bc0c <sniprintf>
    "Echo disabled.");
    return true;
 8001ae4:	2301      	movs	r3, #1
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	0800e314 	.word	0x0800e314

08001af4 <Modem_API_CGDCONT_Callback>:

/* TCP IP SETUP */
bool Modem_API_CGDCONT_Callback (sCmdApi_CallbackArgs_t *cmd_api_callback_args) {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
    snprintf(cmd_api_callback_args->response_buffer, cmd_api_callback_args->response_buffer_length,
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6898      	ldr	r0, [r3, #8]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	899b      	ldrh	r3, [r3, #12]
 8001b04:	4619      	mov	r1, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a07      	ldr	r2, [pc, #28]	; (8001b28 <Modem_API_CGDCONT_Callback+0x34>)
 8001b0c:	f00a f87e 	bl	800bc0c <sniprintf>
    "PDP context parameters:%s", cmd_api_callback_args->arguments);
    Modem_API_PutResponse(eModemApiCmd_CGDCONT, cmd_api_callback_args->arguments);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4619      	mov	r1, r3
 8001b16:	200d      	movs	r0, #13
 8001b18:	f7ff fc68 	bl	80013ec <Modem_API_PutResponse>
    return true;
 8001b1c:	2301      	movs	r3, #1
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	0800e324 	.word	0x0800e324

08001b2c <Modem_API_EGDCONT_Callback>:
bool Modem_API_EGDCONT_Callback (sCmdApi_CallbackArgs_t *cmd_api_callback_args) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
    snprintf(cmd_api_callback_args->response_buffer, cmd_api_callback_args->response_buffer_length,
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6898      	ldr	r0, [r3, #8]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	899b      	ldrh	r3, [r3, #12]
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a07      	ldr	r2, [pc, #28]	; (8001b60 <Modem_API_EGDCONT_Callback+0x34>)
 8001b44:	f00a f862 	bl	800bc0c <sniprintf>
    "TCP/IP data account parameters:%s", cmd_api_callback_args->arguments);
    Modem_API_PutResponse(eModemApiCmd_EGDCONT, cmd_api_callback_args->arguments);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	200e      	movs	r0, #14
 8001b50:	f7ff fc4c 	bl	80013ec <Modem_API_PutResponse>
    return true;
 8001b54:	2301      	movs	r3, #1
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	0800e340 	.word	0x0800e340

08001b64 <Modem_API_CGATT_Callback>:
bool Modem_API_CGATT_Callback (sCmdApi_CallbackArgs_t *cmd_api_callback_args) {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
    snprintf(cmd_api_callback_args->response_buffer, cmd_api_callback_args->response_buffer_length,
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6898      	ldr	r0, [r3, #8]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	899b      	ldrh	r3, [r3, #12]
 8001b74:	4619      	mov	r1, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a10      	ldr	r2, [pc, #64]	; (8001bbc <Modem_API_CGATT_Callback+0x58>)
 8001b7c:	f00a f846 	bl	800bc0c <sniprintf>
    "MT state:%s", cmd_api_callback_args->arguments);
    if (strcmp(cmd_api_callback_args->arguments, " 1") == 0) {
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	490e      	ldr	r1, [pc, #56]	; (8001bc0 <Modem_API_CGATT_Callback+0x5c>)
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7fe fb4a 	bl	8000220 <strcmp>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d104      	bne.n	8001b9c <Modem_API_CGATT_Callback+0x38>
        Modem_API_SetFlag(eModemFlag_PdpAttach, eModemApiState_Ready);
 8001b92:	2101      	movs	r1, #1
 8001b94:	200b      	movs	r0, #11
 8001b96:	f7ff fdad 	bl	80016f4 <Modem_API_SetFlag>
 8001b9a:	e003      	b.n	8001ba4 <Modem_API_CGATT_Callback+0x40>
    } else {
        Modem_API_ClearFlag(eModemFlag_PdpAttach, eModemApiState_NotReady);
 8001b9c:	2102      	movs	r1, #2
 8001b9e:	200b      	movs	r0, #11
 8001ba0:	f7ff fde0 	bl	8001764 <Modem_API_ClearFlag>
    }
    Modem_API_PutResponse(eModemApiCmd_CGATT, cmd_api_callback_args->arguments);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	200f      	movs	r0, #15
 8001bac:	f7ff fc1e 	bl	80013ec <Modem_API_PutResponse>
    return true;
 8001bb0:	2301      	movs	r3, #1
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	0800e364 	.word	0x0800e364
 8001bc0:	0800e370 	.word	0x0800e370

08001bc4 <Modem_API_CGACT_Callback>:
bool Modem_API_CGACT_Callback (sCmdApi_CallbackArgs_t *cmd_api_callback_args) {
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af02      	add	r7, sp, #8
 8001bca:	6078      	str	r0, [r7, #4]
    int cid = Modem_API_ParseInt(cmd_api_callback_args->arguments, SEPARATOR);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	491a      	ldr	r1, [pc, #104]	; (8001c3c <Modem_API_CGACT_Callback+0x78>)
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff fe72 	bl	80018bc <Modem_API_ParseInt>
 8001bd8:	60f8      	str	r0, [r7, #12]
    int state = Modem_API_ParseInt(cmd_api_callback_args->arguments, SEPARATOR);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4917      	ldr	r1, [pc, #92]	; (8001c3c <Modem_API_CGACT_Callback+0x78>)
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff fe6b 	bl	80018bc <Modem_API_ParseInt>
 8001be6:	60b8      	str	r0, [r7, #8]
    snprintf(cmd_api_callback_args->response_buffer, cmd_api_callback_args->response_buffer_length,
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6898      	ldr	r0, [r3, #8]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	899b      	ldrh	r3, [r3, #12]
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d101      	bne.n	8001bfc <Modem_API_CGACT_Callback+0x38>
 8001bf8:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <Modem_API_CGACT_Callback+0x7c>)
 8001bfa:	e000      	b.n	8001bfe <Modem_API_CGACT_Callback+0x3a>
 8001bfc:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <Modem_API_CGACT_Callback+0x80>)
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4a11      	ldr	r2, [pc, #68]	; (8001c48 <Modem_API_CGACT_Callback+0x84>)
 8001c04:	f00a f802 	bl	800bc0c <sniprintf>
    "TCP/IP CID-%d; state:%s", cid, (state == 1) ? "Activated" : "Deactivated");
    if (state == 1) {
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d108      	bne.n	8001c20 <Modem_API_CGACT_Callback+0x5c>
        Modem_API_SetFlag(eModemFlag_PdpActive, eModemApiState_Ready);
 8001c0e:	2101      	movs	r1, #1
 8001c10:	200c      	movs	r0, #12
 8001c12:	f7ff fd6f 	bl	80016f4 <Modem_API_SetFlag>
        Modem_API_PutResponse(eModemApiCmd_CGACT, "Activated");
 8001c16:	490a      	ldr	r1, [pc, #40]	; (8001c40 <Modem_API_CGACT_Callback+0x7c>)
 8001c18:	2010      	movs	r0, #16
 8001c1a:	f7ff fbe7 	bl	80013ec <Modem_API_PutResponse>
 8001c1e:	e007      	b.n	8001c30 <Modem_API_CGACT_Callback+0x6c>
    } else {
        Modem_API_ClearFlag(eModemFlag_PdpActive, eModemApiState_NotReady);
 8001c20:	2102      	movs	r1, #2
 8001c22:	200c      	movs	r0, #12
 8001c24:	f7ff fd9e 	bl	8001764 <Modem_API_ClearFlag>
        Modem_API_PutResponse(eModemApiCmd_CGACT, "Deactivated");
 8001c28:	4906      	ldr	r1, [pc, #24]	; (8001c44 <Modem_API_CGACT_Callback+0x80>)
 8001c2a:	2010      	movs	r0, #16
 8001c2c:	f7ff fbde 	bl	80013ec <Modem_API_PutResponse>
    }
    return true;
 8001c30:	2301      	movs	r3, #1
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	0800e374 	.word	0x0800e374
 8001c40:	0800e378 	.word	0x0800e378
 8001c44:	0800e384 	.word	0x0800e384
 8001c48:	0800e390 	.word	0x0800e390

08001c4c <Modem_API_CGPADDR_Callback>:
bool Modem_API_CGPADDR_Callback (sCmdApi_CallbackArgs_t *cmd_api_callback_args) {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
    snprintf(cmd_api_callback_args->response_buffer, cmd_api_callback_args->response_buffer_length,
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6898      	ldr	r0, [r3, #8]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	899b      	ldrh	r3, [r3, #12]
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a04      	ldr	r2, [pc, #16]	; (8001c74 <Modem_API_CGPADDR_Callback+0x28>)
 8001c64:	f009 ffd2 	bl	800bc0c <sniprintf>
    "TCP/IP address:%s", cmd_api_callback_args->arguments);
    return true;
 8001c68:	2301      	movs	r3, #1
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	0800e3a8 	.word	0x0800e3a8

08001c78 <Modem_API_ETL_Callback>:
bool Modem_API_ETL_Callback (sCmdApi_CallbackArgs_t *cmd_api_callback_args) {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
    snprintf(cmd_api_callback_args->response_buffer, cmd_api_callback_args->response_buffer_length,
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6898      	ldr	r0, [r3, #8]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	899b      	ldrh	r3, [r3, #12]
 8001c88:	4619      	mov	r1, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a07      	ldr	r2, [pc, #28]	; (8001cac <Modem_API_ETL_Callback+0x34>)
 8001c90:	f009 ffbc 	bl	800bc0c <sniprintf>
    "Socket:%s", cmd_api_callback_args->arguments);
    Modem_API_PutResponse(eModemApiCmd_ETL, cmd_api_callback_args->arguments);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4619      	mov	r1, r3
 8001c9a:	2012      	movs	r0, #18
 8001c9c:	f7ff fba6 	bl	80013ec <Modem_API_PutResponse>
    return true;
 8001ca0:	2301      	movs	r3, #1
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	0800e3bc 	.word	0x0800e3bc

08001cb0 <Modem_API_EIPSEND_Callback>:
/* TCP IP SEND/RECIEVE */
bool Modem_API_EIPSEND_Callback (sCmdApi_CallbackArgs_t *cmd_api_callback_args) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
    snprintf(cmd_api_callback_args->response_buffer, cmd_api_callback_args->response_buffer_length,
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6898      	ldr	r0, [r3, #8]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	899b      	ldrh	r3, [r3, #12]
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a04      	ldr	r2, [pc, #16]	; (8001cd8 <Modem_API_EIPSEND_Callback+0x28>)
 8001cc8:	f009 ffa0 	bl	800bc0c <sniprintf>
    "Data length:%s", cmd_api_callback_args->arguments);
    return true;
 8001ccc:	2301      	movs	r3, #1
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	0800e3c8 	.word	0x0800e3c8

08001cdc <Modem_API_ESOCK_Callback>:
bool Modem_API_ESOCK_Callback (sCmdApi_CallbackArgs_t *cmd_api_callback_args) {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
    StrRemChar(cmd_api_callback_args->arguments, ",");
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4915      	ldr	r1, [pc, #84]	; (8001d40 <Modem_API_ESOCK_Callback+0x64>)
 8001cea:	4618      	mov	r0, r3
 8001cec:	f009 f93a 	bl	800af64 <StrRemChar>
    snprintf(cmd_api_callback_args->response_buffer, cmd_api_callback_args->response_buffer_length,
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6898      	ldr	r0, [r3, #8]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	899b      	ldrh	r3, [r3, #12]
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a11      	ldr	r2, [pc, #68]	; (8001d44 <Modem_API_ESOCK_Callback+0x68>)
 8001d00:	f009 ff84 	bl	800bc0c <sniprintf>
    "Socket:%s ", cmd_api_callback_args->arguments);

    /* RESPONSE */
    if (strstr(cmd_api_callback_args->arguments, "RECV") != NULL) {
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	490f      	ldr	r1, [pc, #60]	; (8001d48 <Modem_API_ESOCK_Callback+0x6c>)
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f00a f84e 	bl	800bdac <strstr>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00e      	beq.n	8001d34 <Modem_API_ESOCK_Callback+0x58>
        char *socket_id = Modem_API_ParseString(cmd_api_callback_args->arguments, " ");
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	490c      	ldr	r1, [pc, #48]	; (8001d4c <Modem_API_ESOCK_Callback+0x70>)
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff fdf9 	bl	8001914 <Modem_API_ParseString>
 8001d22:	60f8      	str	r0, [r7, #12]
        Modem_API_PutResponse(eModemApiCmd_ESOCK, socket_id);
 8001d24:	68f9      	ldr	r1, [r7, #12]
 8001d26:	2014      	movs	r0, #20
 8001d28:	f7ff fb60 	bl	80013ec <Modem_API_PutResponse>
        Modem_API_SetFlag(eModemFlag_UdpRecieved, eModemApiState_Ready);
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	2011      	movs	r0, #17
 8001d30:	f7ff fce0 	bl	80016f4 <Modem_API_SetFlag>
    }

    return true;
 8001d34:	2301      	movs	r3, #1
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	0800e374 	.word	0x0800e374
 8001d44:	0800e3d8 	.word	0x0800e3d8
 8001d48:	0800e3e4 	.word	0x0800e3e4
 8001d4c:	0800e2e4 	.word	0x0800e2e4

08001d50 <Modem_API_EIPRECV_Callback>:
bool Modem_API_EIPRECV_Callback (sCmdApi_CallbackArgs_t *cmd_api_callback_args) {
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af02      	add	r7, sp, #8
 8001d56:	6078      	str	r0, [r7, #4]
    char *socket_id = Modem_API_ParseString(cmd_api_callback_args->arguments, ",");
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4911      	ldr	r1, [pc, #68]	; (8001da4 <Modem_API_EIPRECV_Callback+0x54>)
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff fdd8 	bl	8001914 <Modem_API_ParseString>
 8001d64:	60f8      	str	r0, [r7, #12]
    char *data = Modem_API_ParseString(cmd_api_callback_args->arguments, ",");
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	490e      	ldr	r1, [pc, #56]	; (8001da4 <Modem_API_EIPRECV_Callback+0x54>)
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff fdd1 	bl	8001914 <Modem_API_ParseString>
 8001d72:	60b8      	str	r0, [r7, #8]
    snprintf(cmd_api_callback_args->response_buffer, cmd_api_callback_args->response_buffer_length,
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6898      	ldr	r0, [r3, #8]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	899b      	ldrh	r3, [r3, #12]
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	4a08      	ldr	r2, [pc, #32]	; (8001da8 <Modem_API_EIPRECV_Callback+0x58>)
 8001d86:	f009 ff41 	bl	800bc0c <sniprintf>
    "Socket:%s  DataRecieved: %s", socket_id, data);

    Modem_API_PutResponse(eModemApiCmd_EIPRECV, data);
 8001d8a:	68b9      	ldr	r1, [r7, #8]
 8001d8c:	2015      	movs	r0, #21
 8001d8e:	f7ff fb2d 	bl	80013ec <Modem_API_PutResponse>
    Modem_API_SetFlag(eModemFlag_UdpRecieved, eModemApiState_OK);
 8001d92:	2103      	movs	r1, #3
 8001d94:	2011      	movs	r0, #17
 8001d96:	f7ff fcad 	bl	80016f4 <Modem_API_SetFlag>
    return true;
 8001d9a:	2301      	movs	r3, #1
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	0800e374 	.word	0x0800e374
 8001da8:	0800e3ec 	.word	0x0800e3ec

08001dac <Modem_API_MsgSent_Callback>:

/* SMS */
bool Modem_API_MsgSent_Callback (sCmdApi_CallbackArgs_t *cmd_api_callback_args) {
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
    snprintf(cmd_api_callback_args->response_buffer, cmd_api_callback_args->response_buffer_length,
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6898      	ldr	r0, [r3, #8]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	899b      	ldrh	r3, [r3, #12]
 8001dbc:	4a04      	ldr	r2, [pc, #16]	; (8001dd0 <Modem_API_MsgSent_Callback+0x24>)
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	f009 ff24 	bl	800bc0c <sniprintf>
    "Message sent.");
    return true;
 8001dc4:	2301      	movs	r3, #1
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	0800e408 	.word	0x0800e408

08001dd4 <Modem_API_MsgRef_Callback>:
bool Modem_API_MsgRef_Callback (sCmdApi_CallbackArgs_t *cmd_api_callback_args) {
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
    strncpy(cmd_api_callback_args->response_buffer, "", cmd_api_callback_args->response_buffer_length);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6898      	ldr	r0, [r3, #8]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	899b      	ldrh	r3, [r3, #12]
 8001de4:	461a      	mov	r2, r3
 8001de6:	4907      	ldr	r1, [pc, #28]	; (8001e04 <Modem_API_MsgRef_Callback+0x30>)
 8001de8:	f009 ffcd 	bl	800bd86 <strncpy>
    Modem_API_PutResponse(eModemApiCmd_MsgRef, cmd_api_callback_args->arguments);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4619      	mov	r1, r3
 8001df2:	2006      	movs	r0, #6
 8001df4:	f7ff fafa 	bl	80013ec <Modem_API_PutResponse>
    return true;
 8001df8:	2301      	movs	r3, #1
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	0800e2fc 	.word	0x0800e2fc

08001e08 <Modem_API_CPMS_Callback>:
bool Modem_API_CPMS_Callback (sCmdApi_CallbackArgs_t *cmd_api_callback_args) {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
    snprintf(cmd_api_callback_args->response_buffer, cmd_api_callback_args->response_buffer_length,
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6898      	ldr	r0, [r3, #8]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	899b      	ldrh	r3, [r3, #12]
 8001e18:	4619      	mov	r1, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a07      	ldr	r2, [pc, #28]	; (8001e3c <Modem_API_CPMS_Callback+0x34>)
 8001e20:	f009 fef4 	bl	800bc0c <sniprintf>
    "Message Storage (stored/total):%s", cmd_api_callback_args->arguments);
    Modem_API_PutResponse(eModemApiCmd_CPMS, cmd_api_callback_args->arguments);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4619      	mov	r1, r3
 8001e2a:	2007      	movs	r0, #7
 8001e2c:	f7ff fade 	bl	80013ec <Modem_API_PutResponse>
    return true;
 8001e30:	2301      	movs	r3, #1
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	0800e418 	.word	0x0800e418

08001e40 <Modem_API_CMTI_Callback>:
/* SMS READ */
bool Modem_API_CMTI_Callback (sCmdApi_CallbackArgs_t *cmd_api_callback_args) {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
    Modem_API_SetFlag(eModemFlag_SmsRecieved, eModemApiState_Ready);
 8001e48:	2101      	movs	r1, #1
 8001e4a:	2009      	movs	r0, #9
 8001e4c:	f7ff fc52 	bl	80016f4 <Modem_API_SetFlag>
    StrRemChar(cmd_api_callback_args->arguments, BAD_CHARS);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4911      	ldr	r1, [pc, #68]	; (8001e9c <Modem_API_CMTI_Callback+0x5c>)
 8001e56:	4618      	mov	r0, r3
 8001e58:	f009 f884 	bl	800af64 <StrRemChar>

    Modem_API_ParseString(cmd_api_callback_args->arguments, SEPARATOR);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	490f      	ldr	r1, [pc, #60]	; (8001ea0 <Modem_API_CMTI_Callback+0x60>)
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff fd56 	bl	8001914 <Modem_API_ParseString>
    char *sms_num = Modem_API_ParseString(cmd_api_callback_args->arguments, SEPARATOR);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	490c      	ldr	r1, [pc, #48]	; (8001ea0 <Modem_API_CMTI_Callback+0x60>)
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff fd50 	bl	8001914 <Modem_API_ParseString>
 8001e74:	60f8      	str	r0, [r7, #12]
    snprintf(cmd_api_callback_args->response_buffer, cmd_api_callback_args->response_buffer_length,
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6898      	ldr	r0, [r3, #8]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	899b      	ldrh	r3, [r3, #12]
 8001e7e:	4619      	mov	r1, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	4a08      	ldr	r2, [pc, #32]	; (8001ea4 <Modem_API_CMTI_Callback+0x64>)
 8001e84:	f009 fec2 	bl	800bc0c <sniprintf>
    "New SMS id:%s", sms_num);
    Modem_API_PutResponse(eModemApiCmd_CMTI, sms_num);
 8001e88:	68f9      	ldr	r1, [r7, #12]
 8001e8a:	2008      	movs	r0, #8
 8001e8c:	f7ff faae 	bl	80013ec <Modem_API_PutResponse>
    return true;
 8001e90:	2301      	movs	r3, #1
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	0800e2e4 	.word	0x0800e2e4
 8001ea0:	0800e374 	.word	0x0800e374
 8001ea4:	0800e43c 	.word	0x0800e43c

08001ea8 <Modem_API_CMGL_Callback>:
bool Modem_API_CMGL_Callback (sCmdApi_CallbackArgs_t *cmd_api_callback_args) {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
    Modem_API_ClearFlag(eModemFlag_SmsRead, eModemApiState_Ready);
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	2008      	movs	r0, #8
 8001eb4:	f7ff fc56 	bl	8001764 <Modem_API_ClearFlag>
    snprintf(cmd_api_callback_args->response_buffer, cmd_api_callback_args->response_buffer_length,
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6898      	ldr	r0, [r3, #8]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	899b      	ldrh	r3, [r3, #12]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a07      	ldr	r2, [pc, #28]	; (8001ee4 <Modem_API_CMGL_Callback+0x3c>)
 8001ec8:	f009 fea0 	bl	800bc0c <sniprintf>
    "SMS info:%s", cmd_api_callback_args->arguments);
    Modem_API_PutResponse(eModemApiCmd_CMGL, cmd_api_callback_args->arguments);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	2009      	movs	r0, #9
 8001ed4:	f7ff fa8a 	bl	80013ec <Modem_API_PutResponse>
    return true;
 8001ed8:	2301      	movs	r3, #1
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	0800e44c 	.word	0x0800e44c

08001ee8 <Modem_API_CMGR_Callback>:
bool Modem_API_CMGR_Callback (sCmdApi_CallbackArgs_t *cmd_api_callback_args) {
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
    Modem_API_ClearFlag(eModemFlag_SmsRead, eModemApiState_Ready);
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	2008      	movs	r0, #8
 8001ef4:	f7ff fc36 	bl	8001764 <Modem_API_ClearFlag>
    snprintf(cmd_api_callback_args->response_buffer, cmd_api_callback_args->response_buffer_length,
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6898      	ldr	r0, [r3, #8]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	899b      	ldrh	r3, [r3, #12]
 8001f00:	4619      	mov	r1, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a07      	ldr	r2, [pc, #28]	; (8001f24 <Modem_API_CMGR_Callback+0x3c>)
 8001f08:	f009 fe80 	bl	800bc0c <sniprintf>
    "SMS info:%s", cmd_api_callback_args->arguments);
    Modem_API_PutResponse(eModemApiCmd_CMGL, cmd_api_callback_args->arguments);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4619      	mov	r1, r3
 8001f12:	2009      	movs	r0, #9
 8001f14:	f7ff fa6a 	bl	80013ec <Modem_API_PutResponse>
    return true;
 8001f18:	2301      	movs	r3, #1
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	0800e44c 	.word	0x0800e44c

08001f28 <Modem_API_Start_Callback>:

bool Modem_API_Start_Callback (sCmdApi_CallbackArgs_t *cmd_api_callback_args) {
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
    snprintf(cmd_api_callback_args->response_buffer, cmd_api_callback_args->response_buffer_length,
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6898      	ldr	r0, [r3, #8]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	899b      	ldrh	r3, [r3, #12]
 8001f38:	4619      	mov	r1, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a04      	ldr	r2, [pc, #16]	; (8001f50 <Modem_API_Start_Callback+0x28>)
 8001f40:	f009 fe64 	bl	800bc0c <sniprintf>
    "Message received: %s", cmd_api_callback_args->arguments);
    return true;
 8001f44:	2301      	movs	r3, #1
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	0800e458 	.word	0x0800e458

08001f54 <Modem_API_Stop_Callback>:
bool Modem_API_Stop_Callback (sCmdApi_CallbackArgs_t *cmd_api_callback_args) {
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
    snprintf(cmd_api_callback_args->response_buffer, cmd_api_callback_args->response_buffer_length,
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6898      	ldr	r0, [r3, #8]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	899b      	ldrh	r3, [r3, #12]
 8001f64:	4619      	mov	r1, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a04      	ldr	r2, [pc, #16]	; (8001f7c <Modem_API_Stop_Callback+0x28>)
 8001f6c:	f009 fe4e 	bl	800bc0c <sniprintf>
    "Message received: %s", cmd_api_callback_args->arguments);
    return true;
 8001f70:	2301      	movs	r3, #1
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	0800e458 	.word	0x0800e458

08001f80 <NTP_API_StructToHexStr>:
static bool NTP_API_ArrayToStruct (uint8_t *ntp_array, sNtpApi_NtpStruct_t *ntp_struct);
static bool NTP_API_AppendUint32 (uint32_t element, uint8_t *ntp_array, uint16_t *ntp_index); // TO UTILITIES!
/**********************************************************************************************************************
 * Definitions of private functions
 *********************************************************************************************************************/
static bool NTP_API_StructToHexStr (sNtpApi_NtpStruct_t *ntp_struct, char **ntp_hex_string) {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
    /* Uses dynamically allocated memory. Use Heap_Api_Free(ntp_hex_string). */
    if (ntp_struct == NULL) {
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <NTP_API_StructToHexStr+0x14>
        return false;
 8001f90:	2300      	movs	r3, #0
 8001f92:	e00c      	b.n	8001fae <NTP_API_StructToHexStr+0x2e>
    }

    /* STRUCT TO ARRAY */
    uint8_t *ntp_array = NTP_API_StructToArray(ntp_struct);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 f837 	bl	8002008 <NTP_API_StructToArray>
 8001f9a:	60f8      	str	r0, [r7, #12]
    StrToHex((char*) ntp_array, NTP_STRUCT_SIZE, ntp_hex_string);
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	2130      	movs	r1, #48	; 0x30
 8001fa0:	68f8      	ldr	r0, [r7, #12]
 8001fa2:	f009 f8b3 	bl	800b10c <StrToHex>
    Heap_API_Free(ntp_array);
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f7fe ff44 	bl	8000e34 <Heap_API_Free>

    return true;
 8001fac:	2301      	movs	r3, #1
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
	...

08001fb8 <NTP_API_HexStrToStruct>:
static bool NTP_API_HexStrToStruct (char *ntp_hex_string, sNtpApi_NtpStruct_t *ntp_struct) {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
    if (ntp_hex_string == NULL) {
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <NTP_API_HexStrToStruct+0x14>
        return false;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	e016      	b.n	8001ffa <NTP_API_HexStrToStruct+0x42>
    }
    StrRemChar(ntp_hex_string, "\"");
 8001fcc:	490d      	ldr	r1, [pc, #52]	; (8002004 <NTP_API_HexStrToStruct+0x4c>)
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f008 ffc8 	bl	800af64 <StrRemChar>
    char *ntp_string = NULL;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	60fb      	str	r3, [r7, #12]
    StrHexToStr(ntp_hex_string, NTP_STRUCT_SIZE * 2, &ntp_string);
 8001fd8:	f107 030c 	add.w	r3, r7, #12
 8001fdc:	461a      	mov	r2, r3
 8001fde:	2160      	movs	r1, #96	; 0x60
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f009 f8d3 	bl	800b18c <StrHexToStr>
    NTP_API_ArrayToStruct((uint8_t*) ntp_string, ntp_struct);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6839      	ldr	r1, [r7, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f000 f887 	bl	80020fe <NTP_API_ArrayToStruct>
    Heap_API_Free(ntp_string);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7fe ff1e 	bl	8000e34 <Heap_API_Free>
    return true;
 8001ff8:	2301      	movs	r3, #1
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	0800e470 	.word	0x0800e470

08002008 <NTP_API_StructToArray>:

static uint8_t* NTP_API_StructToArray (sNtpApi_NtpStruct_t *ntp_struct) {
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
    uint8_t *ntp_array = Heap_API_Allocate(NTP_STRUCT_SIZE + 1, sizeof(uint8_t));
 8002010:	2101      	movs	r1, #1
 8002012:	2031      	movs	r0, #49	; 0x31
 8002014:	f7fe fea8 	bl	8000d68 <Heap_API_Allocate>
 8002018:	60f8      	str	r0, [r7, #12]
    ntp_array[0] = ntp_struct->li_vn_mode;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	781a      	ldrb	r2, [r3, #0]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	701a      	strb	r2, [r3, #0]
    ntp_array[1] = ntp_struct->stratum;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	3301      	adds	r3, #1
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	7852      	ldrb	r2, [r2, #1]
 800202a:	701a      	strb	r2, [r3, #0]
    ntp_array[2] = ntp_struct->poll;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	3302      	adds	r3, #2
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	7892      	ldrb	r2, [r2, #2]
 8002034:	701a      	strb	r2, [r3, #0]
    ntp_array[3] = ntp_struct->precision;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	3303      	adds	r3, #3
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	78d2      	ldrb	r2, [r2, #3]
 800203e:	701a      	strb	r2, [r3, #0]

    uint16_t ntp_index = 4;
 8002040:	2304      	movs	r3, #4
 8002042:	817b      	strh	r3, [r7, #10]
    NTP_API_AppendUint32(ntp_struct->rootDelay, ntp_array, &ntp_index);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f107 020a 	add.w	r2, r7, #10
 800204c:	68f9      	ldr	r1, [r7, #12]
 800204e:	4618      	mov	r0, r3
 8002050:	f000 f8d1 	bl	80021f6 <NTP_API_AppendUint32>
    NTP_API_AppendUint32(ntp_struct->rootDispersion, ntp_array, &ntp_index);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f107 020a 	add.w	r2, r7, #10
 800205c:	68f9      	ldr	r1, [r7, #12]
 800205e:	4618      	mov	r0, r3
 8002060:	f000 f8c9 	bl	80021f6 <NTP_API_AppendUint32>
    NTP_API_AppendUint32(ntp_struct->refId, ntp_array, &ntp_index);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	f107 020a 	add.w	r2, r7, #10
 800206c:	68f9      	ldr	r1, [r7, #12]
 800206e:	4618      	mov	r0, r3
 8002070:	f000 f8c1 	bl	80021f6 <NTP_API_AppendUint32>

    NTP_API_AppendUint32(ntp_struct->refTm_s, ntp_array, &ntp_index);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	f107 020a 	add.w	r2, r7, #10
 800207c:	68f9      	ldr	r1, [r7, #12]
 800207e:	4618      	mov	r0, r3
 8002080:	f000 f8b9 	bl	80021f6 <NTP_API_AppendUint32>
    NTP_API_AppendUint32(ntp_struct->refTm_f, ntp_array, &ntp_index);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	f107 020a 	add.w	r2, r7, #10
 800208c:	68f9      	ldr	r1, [r7, #12]
 800208e:	4618      	mov	r0, r3
 8002090:	f000 f8b1 	bl	80021f6 <NTP_API_AppendUint32>

    NTP_API_AppendUint32(ntp_struct->origTm_s, ntp_array, &ntp_index);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	f107 020a 	add.w	r2, r7, #10
 800209c:	68f9      	ldr	r1, [r7, #12]
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 f8a9 	bl	80021f6 <NTP_API_AppendUint32>
    NTP_API_AppendUint32(ntp_struct->origTm_f, ntp_array, &ntp_index);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	f107 020a 	add.w	r2, r7, #10
 80020ac:	68f9      	ldr	r1, [r7, #12]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 f8a1 	bl	80021f6 <NTP_API_AppendUint32>

    NTP_API_AppendUint32(ntp_struct->rxTm_s, ntp_array, &ntp_index);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	f107 020a 	add.w	r2, r7, #10
 80020bc:	68f9      	ldr	r1, [r7, #12]
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 f899 	bl	80021f6 <NTP_API_AppendUint32>
    NTP_API_AppendUint32(ntp_struct->rxTm_f, ntp_array, &ntp_index);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	f107 020a 	add.w	r2, r7, #10
 80020cc:	68f9      	ldr	r1, [r7, #12]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f000 f891 	bl	80021f6 <NTP_API_AppendUint32>

    NTP_API_AppendUint32(ntp_struct->txTm_s, ntp_array, &ntp_index);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d8:	f107 020a 	add.w	r2, r7, #10
 80020dc:	68f9      	ldr	r1, [r7, #12]
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 f889 	bl	80021f6 <NTP_API_AppendUint32>
    NTP_API_AppendUint32(ntp_struct->txTm_f, ntp_array, &ntp_index);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e8:	f107 020a 	add.w	r2, r7, #10
 80020ec:	68f9      	ldr	r1, [r7, #12]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 f881 	bl	80021f6 <NTP_API_AppendUint32>

    return ntp_array;
 80020f4:	68fb      	ldr	r3, [r7, #12]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <NTP_API_ArrayToStruct>:
static bool NTP_API_ArrayToStruct (uint8_t *ntp_array, sNtpApi_NtpStruct_t *ntp_struct) {
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
 8002106:	6039      	str	r1, [r7, #0]
    ntp_struct->li_vn_mode = ntp_array[0];
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	781a      	ldrb	r2, [r3, #0]
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	701a      	strb	r2, [r3, #0]
    ntp_struct->stratum = ntp_array[1];
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	785a      	ldrb	r2, [r3, #1]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	705a      	strb	r2, [r3, #1]
    ntp_struct->poll = ntp_array[2];
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	789a      	ldrb	r2, [r3, #2]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	709a      	strb	r2, [r3, #2]
    ntp_struct->precision = ntp_array[3];
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	78da      	ldrb	r2, [r3, #3]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	70da      	strb	r2, [r3, #3]

    StrUint8ToUint32(&ntp_array[4], &ntp_struct->rootDelay, false);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	1d18      	adds	r0, r3, #4
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	3304      	adds	r3, #4
 8002130:	2200      	movs	r2, #0
 8002132:	4619      	mov	r1, r3
 8002134:	f009 f8f7 	bl	800b326 <StrUint8ToUint32>
    StrUint8ToUint32(&ntp_array[8], &ntp_struct->rootDispersion, false);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f103 0008 	add.w	r0, r3, #8
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	3308      	adds	r3, #8
 8002142:	2200      	movs	r2, #0
 8002144:	4619      	mov	r1, r3
 8002146:	f009 f8ee 	bl	800b326 <StrUint8ToUint32>
    StrUint8ToUint32(&ntp_array[12], &ntp_struct->refId, false);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f103 000c 	add.w	r0, r3, #12
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	330c      	adds	r3, #12
 8002154:	2200      	movs	r2, #0
 8002156:	4619      	mov	r1, r3
 8002158:	f009 f8e5 	bl	800b326 <StrUint8ToUint32>

    StrUint8ToUint32(&ntp_array[16], &ntp_struct->refTm_s, false);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f103 0010 	add.w	r0, r3, #16
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	3310      	adds	r3, #16
 8002166:	2200      	movs	r2, #0
 8002168:	4619      	mov	r1, r3
 800216a:	f009 f8dc 	bl	800b326 <StrUint8ToUint32>
    StrUint8ToUint32(&ntp_array[20], &ntp_struct->refTm_f, false);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f103 0014 	add.w	r0, r3, #20
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	3314      	adds	r3, #20
 8002178:	2200      	movs	r2, #0
 800217a:	4619      	mov	r1, r3
 800217c:	f009 f8d3 	bl	800b326 <StrUint8ToUint32>

    StrUint8ToUint32(&ntp_array[24], &ntp_struct->origTm_s, false);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f103 0018 	add.w	r0, r3, #24
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	3318      	adds	r3, #24
 800218a:	2200      	movs	r2, #0
 800218c:	4619      	mov	r1, r3
 800218e:	f009 f8ca 	bl	800b326 <StrUint8ToUint32>
    StrUint8ToUint32(&ntp_array[28], &ntp_struct->origTm_f, false);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f103 001c 	add.w	r0, r3, #28
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	331c      	adds	r3, #28
 800219c:	2200      	movs	r2, #0
 800219e:	4619      	mov	r1, r3
 80021a0:	f009 f8c1 	bl	800b326 <StrUint8ToUint32>

    StrUint8ToUint32(&ntp_array[32], &ntp_struct->rxTm_s, false);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f103 0020 	add.w	r0, r3, #32
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	3320      	adds	r3, #32
 80021ae:	2200      	movs	r2, #0
 80021b0:	4619      	mov	r1, r3
 80021b2:	f009 f8b8 	bl	800b326 <StrUint8ToUint32>
    StrUint8ToUint32(&ntp_array[36], &ntp_struct->rxTm_f, false);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	3324      	adds	r3, #36	; 0x24
 80021c0:	2200      	movs	r2, #0
 80021c2:	4619      	mov	r1, r3
 80021c4:	f009 f8af 	bl	800b326 <StrUint8ToUint32>

    StrUint8ToUint32(&ntp_array[40], &ntp_struct->txTm_s, false);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	3328      	adds	r3, #40	; 0x28
 80021d2:	2200      	movs	r2, #0
 80021d4:	4619      	mov	r1, r3
 80021d6:	f009 f8a6 	bl	800b326 <StrUint8ToUint32>
    StrUint8ToUint32(&ntp_array[44], &ntp_struct->txTm_f, false);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	332c      	adds	r3, #44	; 0x2c
 80021e4:	2200      	movs	r2, #0
 80021e6:	4619      	mov	r1, r3
 80021e8:	f009 f89d 	bl	800b326 <StrUint8ToUint32>

    return true;
 80021ec:	2301      	movs	r3, #1
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <NTP_API_AppendUint32>:
static bool NTP_API_AppendUint32 (uint32_t element, uint8_t *ntp_array, uint16_t *ntp_index) {
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b086      	sub	sp, #24
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	60f8      	str	r0, [r7, #12]
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	607a      	str	r2, [r7, #4]
    uint8_t u8_buffer[4] = {0};
 8002202:	2300      	movs	r3, #0
 8002204:	613b      	str	r3, [r7, #16]
    StrUint32ToUint8(element, u8_buffer, false);
 8002206:	f107 0310 	add.w	r3, r7, #16
 800220a:	2200      	movs	r2, #0
 800220c:	4619      	mov	r1, r3
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	f009 f83a 	bl	800b288 <StrUint32ToUint8>
    for (uint8_t i = 0; i < 4; i++) {
 8002214:	2300      	movs	r3, #0
 8002216:	75fb      	strb	r3, [r7, #23]
 8002218:	e013      	b.n	8002242 <NTP_API_AppendUint32+0x4c>
        ntp_array[*ntp_index] = u8_buffer[i];
 800221a:	7dfa      	ldrb	r2, [r7, #23]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	881b      	ldrh	r3, [r3, #0]
 8002220:	4619      	mov	r1, r3
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	440b      	add	r3, r1
 8002226:	3218      	adds	r2, #24
 8002228:	443a      	add	r2, r7
 800222a:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 800222e:	701a      	strb	r2, [r3, #0]
        *ntp_index += 1;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	3301      	adds	r3, #1
 8002236:	b29a      	uxth	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++) {
 800223c:	7dfb      	ldrb	r3, [r7, #23]
 800223e:	3301      	adds	r3, #1
 8002240:	75fb      	strb	r3, [r7, #23]
 8002242:	7dfb      	ldrb	r3, [r7, #23]
 8002244:	2b03      	cmp	r3, #3
 8002246:	d9e8      	bls.n	800221a <NTP_API_AppendUint32+0x24>
    }
    return true;
 8002248:	2301      	movs	r3, #1
}
 800224a:	4618      	mov	r0, r3
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
	...

08002254 <NTP_API_GetNtp>:

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/
bool NTP_API_GetNtp (time_t *utc_time, sNetworkApp_Socket_t *socket) {
 8002254:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002258:	b086      	sub	sp, #24
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
 800225e:	6039      	str	r1, [r7, #0]
    /* PREP MESSAGE STRUCT */
    memset(&ntp_packet, 0, sizeof(sNtpApi_NtpStruct_t));
 8002260:	2230      	movs	r2, #48	; 0x30
 8002262:	2100      	movs	r1, #0
 8002264:	483d      	ldr	r0, [pc, #244]	; (800235c <NTP_API_GetNtp+0x108>)
 8002266:	f009 fb59 	bl	800b91c <memset>
    ntp_packet.li_vn_mode = 0b00011011; // li = 0, vn = 3, and mode = 3
 800226a:	4b3c      	ldr	r3, [pc, #240]	; (800235c <NTP_API_GetNtp+0x108>)
 800226c:	221b      	movs	r2, #27
 800226e:	701a      	strb	r2, [r3, #0]

    /* PACKET TO HEX */
    char *hex_buffer = NULL;
 8002270:	2300      	movs	r3, #0
 8002272:	60fb      	str	r3, [r7, #12]
    NTP_API_StructToHexStr(&ntp_packet, &hex_buffer);
 8002274:	f107 030c 	add.w	r3, r7, #12
 8002278:	4619      	mov	r1, r3
 800227a:	4838      	ldr	r0, [pc, #224]	; (800235c <NTP_API_GetNtp+0x108>)
 800227c:	f7ff fe80 	bl	8001f80 <NTP_API_StructToHexStr>

    /* SEND */
    Network_APP_OpenSocket(socket);
 8002280:	6838      	ldr	r0, [r7, #0]
 8002282:	f000 ffa1 	bl	80031c8 <Network_APP_OpenSocket>
    char *hex_message = Heap_API_Allocate(strlen(hex_buffer) + CMD_STRING_LENGTH, sizeof(char));
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	4618      	mov	r0, r3
 800228a:	f7fd ffd3 	bl	8000234 <strlen>
 800228e:	4603      	mov	r3, r0
 8002290:	3340      	adds	r3, #64	; 0x40
 8002292:	2101      	movs	r1, #1
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe fd67 	bl	8000d68 <Heap_API_Allocate>
 800229a:	6138      	str	r0, [r7, #16]
    sprintf(hex_message, "AT+EIPSEND=%d,\"%s\"\n", socket->id, hex_buffer);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	885b      	ldrh	r3, [r3, #2]
 80022a0:	461a      	mov	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	492e      	ldr	r1, [pc, #184]	; (8002360 <NTP_API_GetNtp+0x10c>)
 80022a6:	6938      	ldr	r0, [r7, #16]
 80022a8:	f009 fce4 	bl	800bc74 <siprintf>
    Modem_API_SendAndWait(hex_message, DEFAULT_WAIT_TIME, 2);
 80022ac:	2202      	movs	r2, #2
 80022ae:	f241 3188 	movw	r1, #5000	; 0x1388
 80022b2:	6938      	ldr	r0, [r7, #16]
 80022b4:	f7ff f920 	bl	80014f8 <Modem_API_SendAndWait>

    /* FINISH SEND */
    Heap_API_Free(hex_buffer);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fe fdba 	bl	8000e34 <Heap_API_Free>
    Heap_API_Free(hex_message);
 80022c0:	6938      	ldr	r0, [r7, #16]
 80022c2:	f7fe fdb7 	bl	8000e34 <Heap_API_Free>

    /* GET NTP BUFFER*/
    char *ntp_buffer = NULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	617b      	str	r3, [r7, #20]
    if (Modem_API_WaitFlag(eModemFlag_UdpRecieved, DEFAULT_WAIT_TIME) == true) {
 80022ca:	f241 3188 	movw	r1, #5000	; 0x1388
 80022ce:	2011      	movs	r0, #17
 80022d0:	f7ff fa80 	bl	80017d4 <Modem_API_WaitFlag>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d01a      	beq.n	8002310 <NTP_API_GetNtp+0xbc>
        Modem_API_ClearFlag(eModemFlag_UdpRecieved, eModemApiState_NotReady);
 80022da:	2102      	movs	r1, #2
 80022dc:	2011      	movs	r0, #17
 80022de:	f7ff fa41 	bl	8001764 <Modem_API_ClearFlag>
        Network_APP_ReadSocket();
 80022e2:	f000 fffd 	bl	80032e0 <Network_APP_ReadSocket>

        if (Modem_API_WaitFlag(eModemFlag_UdpRecieved, DEFAULT_WAIT_TIME) == true) {
 80022e6:	f241 3188 	movw	r1, #5000	; 0x1388
 80022ea:	2011      	movs	r0, #17
 80022ec:	f7ff fa72 	bl	80017d4 <Modem_API_WaitFlag>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00c      	beq.n	8002310 <NTP_API_GetNtp+0xbc>
            Modem_API_ClearFlag(eModemFlag_UdpRecieved, eModemApiState_NotReady);
 80022f6:	2102      	movs	r1, #2
 80022f8:	2011      	movs	r0, #17
 80022fa:	f7ff fa33 	bl	8001764 <Modem_API_ClearFlag>
            ntp_buffer = Heap_API_Allocate(NTP_STRUCT_SIZE * 2 + 4, sizeof(char));
 80022fe:	2101      	movs	r1, #1
 8002300:	2064      	movs	r0, #100	; 0x64
 8002302:	f7fe fd31 	bl	8000d68 <Heap_API_Allocate>
 8002306:	6178      	str	r0, [r7, #20]
            Modem_API_GetResponse(eModemApiCmd_EIPRECV, ntp_buffer);
 8002308:	6979      	ldr	r1, [r7, #20]
 800230a:	2015      	movs	r0, #21
 800230c:	f7ff f8b8 	bl	8001480 <Modem_API_GetResponse>
        }
    }

    /* NTP HEX TO PACKET */
    if (ntp_buffer == NULL) {
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <NTP_API_GetNtp+0xc6>
        return false;
 8002316:	2300      	movs	r3, #0
 8002318:	e01b      	b.n	8002352 <NTP_API_GetNtp+0xfe>
    }
    memset(&ntp_packet, 0, sizeof(sNtpApi_NtpStruct_t));
 800231a:	2230      	movs	r2, #48	; 0x30
 800231c:	2100      	movs	r1, #0
 800231e:	480f      	ldr	r0, [pc, #60]	; (800235c <NTP_API_GetNtp+0x108>)
 8002320:	f009 fafc 	bl	800b91c <memset>
    NTP_API_HexStrToStruct(ntp_buffer, &ntp_packet);
 8002324:	490d      	ldr	r1, [pc, #52]	; (800235c <NTP_API_GetNtp+0x108>)
 8002326:	6978      	ldr	r0, [r7, #20]
 8002328:	f7ff fe46 	bl	8001fb8 <NTP_API_HexStrToStruct>
    *utc_time = (time_t) (ntp_packet.txTm_s - NTP_TIMESTAMP_DELTA);
 800232c:	4b0b      	ldr	r3, [pc, #44]	; (800235c <NTP_API_GetNtp+0x108>)
 800232e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002330:	2200      	movs	r2, #0
 8002332:	461c      	mov	r4, r3
 8002334:	4615      	mov	r5, r2
 8002336:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <NTP_API_GetNtp+0x110>)
 8002338:	eb14 0803 	adds.w	r8, r4, r3
 800233c:	f145 39ff 	adc.w	r9, r5, #4294967295
 8002340:	4642      	mov	r2, r8
 8002342:	464b      	mov	r3, r9
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	e9c1 2300 	strd	r2, r3, [r1]
//    debug("%s\n", ctime((const time_t*) &current_utc));
//    Network_APP_CloseUdp();
    Heap_API_Free(ntp_buffer);
 800234a:	6978      	ldr	r0, [r7, #20]
 800234c:	f7fe fd72 	bl	8000e34 <Heap_API_Free>
    return true;
 8002350:	2301      	movs	r3, #1
}
 8002352:	4618      	mov	r0, r3
 8002354:	3718      	adds	r7, #24
 8002356:	46bd      	mov	sp, r7
 8002358:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800235c:	200008c0 	.word	0x200008c0
 8002360:	0800e474 	.word	0x0800e474
 8002364:	7c558180 	.word	0x7c558180

08002368 <UART_API_Thread>:
 *********************************************************************************************************************/

/**********************************************************************************************************************
 * Definitions of private functions
 *********************************************************************************************************************/
static void UART_API_Thread (void *argument) {
 8002368:	b590      	push	{r4, r7, lr}
 800236a:	b089      	sub	sp, #36	; 0x24
 800236c:	af02      	add	r7, sp, #8
 800236e:	6078      	str	r0, [r7, #4]
    while (true) {
        for (eUart_Driver_Enum_t uart = eUartDriver_First; uart < eUartDriver_Last; uart++) {
 8002370:	2300      	movs	r3, #0
 8002372:	75fb      	strb	r3, [r7, #23]
 8002374:	e106      	b.n	8002584 <UART_API_Thread+0x21c>
            /* STATE MACHINE FOR EACH UART */
            switch (dynamic_uart_api_lut[uart].state) {
 8002376:	7dfb      	ldrb	r3, [r7, #23]
 8002378:	4a85      	ldr	r2, [pc, #532]	; (8002590 <UART_API_Thread+0x228>)
 800237a:	015b      	lsls	r3, r3, #5
 800237c:	4413      	add	r3, r2
 800237e:	3308      	adds	r3, #8
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b02      	cmp	r3, #2
 8002384:	f000 80cb 	beq.w	800251e <UART_API_Thread+0x1b6>
 8002388:	2b02      	cmp	r3, #2
 800238a:	f300 80f7 	bgt.w	800257c <UART_API_Thread+0x214>
 800238e:	2b00      	cmp	r3, #0
 8002390:	d002      	beq.n	8002398 <UART_API_Thread+0x30>
 8002392:	2b01      	cmp	r3, #1
 8002394:	d02d      	beq.n	80023f2 <UART_API_Thread+0x8a>
                    dynamic_uart_api_lut[uart].state = eUartState_Setup;
                    break;
                }

                default: {
                    break;
 8002396:	e0f1      	b.n	800257c <UART_API_Thread+0x214>
                    dynamic_uart_api_lut[uart].buffer_index = 0;
 8002398:	7dfb      	ldrb	r3, [r7, #23]
 800239a:	4a7d      	ldr	r2, [pc, #500]	; (8002590 <UART_API_Thread+0x228>)
 800239c:	015b      	lsls	r3, r3, #5
 800239e:	4413      	add	r3, r2
 80023a0:	2200      	movs	r2, #0
 80023a2:	801a      	strh	r2, [r3, #0]
                    dynamic_uart_api_lut[uart].buffer_ptr = Heap_API_Allocate(static_uart_api_lut[uart].buffer_length, sizeof(char));
 80023a4:	7dfb      	ldrb	r3, [r7, #23]
 80023a6:	4a7b      	ldr	r2, [pc, #492]	; (8002594 <UART_API_Thread+0x22c>)
 80023a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023ac:	7dfc      	ldrb	r4, [r7, #23]
 80023ae:	2101      	movs	r1, #1
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7fe fcd9 	bl	8000d68 <Heap_API_Allocate>
 80023b6:	4602      	mov	r2, r0
 80023b8:	4975      	ldr	r1, [pc, #468]	; (8002590 <UART_API_Thread+0x228>)
 80023ba:	0163      	lsls	r3, r4, #5
 80023bc:	440b      	add	r3, r1
 80023be:	3304      	adds	r3, #4
 80023c0:	601a      	str	r2, [r3, #0]
                    if (dynamic_uart_api_lut[uart].buffer_ptr == NULL) {
 80023c2:	7dfb      	ldrb	r3, [r7, #23]
 80023c4:	4a72      	ldr	r2, [pc, #456]	; (8002590 <UART_API_Thread+0x228>)
 80023c6:	015b      	lsls	r3, r3, #5
 80023c8:	4413      	add	r3, r2
 80023ca:	3304      	adds	r3, #4
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d107      	bne.n	80023e2 <UART_API_Thread+0x7a>
                        error("Failed to initialize buffer\n");
 80023d2:	4b71      	ldr	r3, [pc, #452]	; (8002598 <UART_API_Thread+0x230>)
 80023d4:	6818      	ldr	r0, [r3, #0]
 80023d6:	4b71      	ldr	r3, [pc, #452]	; (800259c <UART_API_Thread+0x234>)
 80023d8:	2259      	movs	r2, #89	; 0x59
 80023da:	4971      	ldr	r1, [pc, #452]	; (80025a0 <UART_API_Thread+0x238>)
 80023dc:	f7fe fc24 	bl	8000c28 <Debug_API_Print>
                        break;
 80023e0:	e0cd      	b.n	800257e <UART_API_Thread+0x216>
                    dynamic_uart_api_lut[uart].state = eUartState_Collect;
 80023e2:	7dfb      	ldrb	r3, [r7, #23]
 80023e4:	4a6a      	ldr	r2, [pc, #424]	; (8002590 <UART_API_Thread+0x228>)
 80023e6:	015b      	lsls	r3, r3, #5
 80023e8:	4413      	add	r3, r2
 80023ea:	3308      	adds	r3, #8
 80023ec:	2201      	movs	r2, #1
 80023ee:	701a      	strb	r2, [r3, #0]
                    break;
 80023f0:	e0c5      	b.n	800257e <UART_API_Thread+0x216>
                    recieved_byte = 0;
 80023f2:	4b6c      	ldr	r3, [pc, #432]	; (80025a4 <UART_API_Thread+0x23c>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	701a      	strb	r2, [r3, #0]
                    while (UART_Driver_GetByte(uart, (uint8_t*) &recieved_byte) == true) {
 80023f8:	e086      	b.n	8002508 <UART_API_Thread+0x1a0>
                        if (recieved_byte == 0) {
 80023fa:	4b6a      	ldr	r3, [pc, #424]	; (80025a4 <UART_API_Thread+0x23c>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10a      	bne.n	8002418 <UART_API_Thread+0xb0>
                            error("Received byte 0. (USART%u)\n", uart + 1);
 8002402:	4b65      	ldr	r3, [pc, #404]	; (8002598 <UART_API_Thread+0x230>)
 8002404:	6818      	ldr	r0, [r3, #0]
 8002406:	7dfb      	ldrb	r3, [r7, #23]
 8002408:	3301      	adds	r3, #1
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	4b66      	ldr	r3, [pc, #408]	; (80025a8 <UART_API_Thread+0x240>)
 800240e:	2265      	movs	r2, #101	; 0x65
 8002410:	4963      	ldr	r1, [pc, #396]	; (80025a0 <UART_API_Thread+0x238>)
 8002412:	f7fe fc09 	bl	8000c28 <Debug_API_Print>
                            break;
 8002416:	e081      	b.n	800251c <UART_API_Thread+0x1b4>
                        if (StrContains(&recieved_byte, 1, dynamic_uart_api_lut[uart].delim)) {
 8002418:	7dfb      	ldrb	r3, [r7, #23]
 800241a:	4a5d      	ldr	r2, [pc, #372]	; (8002590 <UART_API_Thread+0x228>)
 800241c:	015b      	lsls	r3, r3, #5
 800241e:	4413      	add	r3, r2
 8002420:	331c      	adds	r3, #28
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	461a      	mov	r2, r3
 8002426:	2101      	movs	r1, #1
 8002428:	485e      	ldr	r0, [pc, #376]	; (80025a4 <UART_API_Thread+0x23c>)
 800242a:	f008 fd3d 	bl	800aea8 <StrContains>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d021      	beq.n	8002478 <UART_API_Thread+0x110>
                            dynamic_uart_api_lut[uart].buffer_ptr[dynamic_uart_api_lut[uart].buffer_index] = '\n';
 8002434:	7dfb      	ldrb	r3, [r7, #23]
 8002436:	4a56      	ldr	r2, [pc, #344]	; (8002590 <UART_API_Thread+0x228>)
 8002438:	015b      	lsls	r3, r3, #5
 800243a:	4413      	add	r3, r2
 800243c:	3304      	adds	r3, #4
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	7dfa      	ldrb	r2, [r7, #23]
 8002442:	4953      	ldr	r1, [pc, #332]	; (8002590 <UART_API_Thread+0x228>)
 8002444:	0152      	lsls	r2, r2, #5
 8002446:	440a      	add	r2, r1
 8002448:	8812      	ldrh	r2, [r2, #0]
 800244a:	4413      	add	r3, r2
 800244c:	220a      	movs	r2, #10
 800244e:	701a      	strb	r2, [r3, #0]
                            dynamic_uart_api_lut[uart].buffer_index++;
 8002450:	7dfb      	ldrb	r3, [r7, #23]
 8002452:	494f      	ldr	r1, [pc, #316]	; (8002590 <UART_API_Thread+0x228>)
 8002454:	015a      	lsls	r2, r3, #5
 8002456:	440a      	add	r2, r1
 8002458:	8812      	ldrh	r2, [r2, #0]
 800245a:	3201      	adds	r2, #1
 800245c:	b291      	uxth	r1, r2
 800245e:	4a4c      	ldr	r2, [pc, #304]	; (8002590 <UART_API_Thread+0x228>)
 8002460:	015b      	lsls	r3, r3, #5
 8002462:	4413      	add	r3, r2
 8002464:	460a      	mov	r2, r1
 8002466:	801a      	strh	r2, [r3, #0]
                            dynamic_uart_api_lut[uart].state = eUartState_Flush;
 8002468:	7dfb      	ldrb	r3, [r7, #23]
 800246a:	4a49      	ldr	r2, [pc, #292]	; (8002590 <UART_API_Thread+0x228>)
 800246c:	015b      	lsls	r3, r3, #5
 800246e:	4413      	add	r3, r2
 8002470:	3308      	adds	r3, #8
 8002472:	2202      	movs	r2, #2
 8002474:	701a      	strb	r2, [r3, #0]
                            break;
 8002476:	e051      	b.n	800251c <UART_API_Thread+0x1b4>
                        dynamic_uart_api_lut[uart].buffer_ptr[dynamic_uart_api_lut[uart].buffer_index] = recieved_byte;
 8002478:	7dfb      	ldrb	r3, [r7, #23]
 800247a:	4a45      	ldr	r2, [pc, #276]	; (8002590 <UART_API_Thread+0x228>)
 800247c:	015b      	lsls	r3, r3, #5
 800247e:	4413      	add	r3, r2
 8002480:	3304      	adds	r3, #4
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	7dfa      	ldrb	r2, [r7, #23]
 8002486:	4942      	ldr	r1, [pc, #264]	; (8002590 <UART_API_Thread+0x228>)
 8002488:	0152      	lsls	r2, r2, #5
 800248a:	440a      	add	r2, r1
 800248c:	8812      	ldrh	r2, [r2, #0]
 800248e:	4413      	add	r3, r2
 8002490:	4a44      	ldr	r2, [pc, #272]	; (80025a4 <UART_API_Thread+0x23c>)
 8002492:	7812      	ldrb	r2, [r2, #0]
 8002494:	701a      	strb	r2, [r3, #0]
                        dynamic_uart_api_lut[uart].buffer_index++;
 8002496:	7dfb      	ldrb	r3, [r7, #23]
 8002498:	493d      	ldr	r1, [pc, #244]	; (8002590 <UART_API_Thread+0x228>)
 800249a:	015a      	lsls	r2, r3, #5
 800249c:	440a      	add	r2, r1
 800249e:	8812      	ldrh	r2, [r2, #0]
 80024a0:	3201      	adds	r2, #1
 80024a2:	b291      	uxth	r1, r2
 80024a4:	4a3a      	ldr	r2, [pc, #232]	; (8002590 <UART_API_Thread+0x228>)
 80024a6:	015b      	lsls	r3, r3, #5
 80024a8:	4413      	add	r3, r2
 80024aa:	460a      	mov	r2, r1
 80024ac:	801a      	strh	r2, [r3, #0]
                        if (dynamic_uart_api_lut[uart].buffer_index == static_uart_api_lut[uart].buffer_length) {
 80024ae:	7dfb      	ldrb	r3, [r7, #23]
 80024b0:	4a37      	ldr	r2, [pc, #220]	; (8002590 <UART_API_Thread+0x228>)
 80024b2:	015b      	lsls	r3, r3, #5
 80024b4:	4413      	add	r3, r2
 80024b6:	881a      	ldrh	r2, [r3, #0]
 80024b8:	7dfb      	ldrb	r3, [r7, #23]
 80024ba:	4936      	ldr	r1, [pc, #216]	; (8002594 <UART_API_Thread+0x22c>)
 80024bc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d121      	bne.n	8002508 <UART_API_Thread+0x1a0>
                            error("Message buffer overflow. (USART%u)\n", uart + 1);
 80024c4:	4b34      	ldr	r3, [pc, #208]	; (8002598 <UART_API_Thread+0x230>)
 80024c6:	6818      	ldr	r0, [r3, #0]
 80024c8:	7dfb      	ldrb	r3, [r7, #23]
 80024ca:	3301      	adds	r3, #1
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	4b37      	ldr	r3, [pc, #220]	; (80025ac <UART_API_Thread+0x244>)
 80024d0:	2272      	movs	r2, #114	; 0x72
 80024d2:	4933      	ldr	r1, [pc, #204]	; (80025a0 <UART_API_Thread+0x238>)
 80024d4:	f7fe fba8 	bl	8000c28 <Debug_API_Print>
                            dynamic_uart_api_lut[uart].state = eUartState_Setup;
 80024d8:	7dfb      	ldrb	r3, [r7, #23]
 80024da:	4a2d      	ldr	r2, [pc, #180]	; (8002590 <UART_API_Thread+0x228>)
 80024dc:	015b      	lsls	r3, r3, #5
 80024de:	4413      	add	r3, r2
 80024e0:	3308      	adds	r3, #8
 80024e2:	2200      	movs	r2, #0
 80024e4:	701a      	strb	r2, [r3, #0]
                            Heap_API_Free(dynamic_uart_api_lut[uart].buffer_ptr);
 80024e6:	7dfb      	ldrb	r3, [r7, #23]
 80024e8:	4a29      	ldr	r2, [pc, #164]	; (8002590 <UART_API_Thread+0x228>)
 80024ea:	015b      	lsls	r3, r3, #5
 80024ec:	4413      	add	r3, r2
 80024ee:	3304      	adds	r3, #4
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fe fc9e 	bl	8000e34 <Heap_API_Free>
                            dynamic_uart_api_lut[uart].buffer_ptr = NULL;
 80024f8:	7dfb      	ldrb	r3, [r7, #23]
 80024fa:	4a25      	ldr	r2, [pc, #148]	; (8002590 <UART_API_Thread+0x228>)
 80024fc:	015b      	lsls	r3, r3, #5
 80024fe:	4413      	add	r3, r2
 8002500:	3304      	adds	r3, #4
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
                            break;
 8002506:	e009      	b.n	800251c <UART_API_Thread+0x1b4>
                    while (UART_Driver_GetByte(uart, (uint8_t*) &recieved_byte) == true) {
 8002508:	7dfb      	ldrb	r3, [r7, #23]
 800250a:	4926      	ldr	r1, [pc, #152]	; (80025a4 <UART_API_Thread+0x23c>)
 800250c:	4618      	mov	r0, r3
 800250e:	f002 f921 	bl	8004754 <UART_Driver_GetByte>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	f47f af70 	bne.w	80023fa <UART_API_Thread+0x92>
                    break;
 800251a:	e030      	b.n	800257e <UART_API_Thread+0x216>
 800251c:	e02f      	b.n	800257e <UART_API_Thread+0x216>
                        .buffer = dynamic_uart_api_lut[uart].buffer_ptr,
 800251e:	7dfb      	ldrb	r3, [r7, #23]
 8002520:	4a1b      	ldr	r2, [pc, #108]	; (8002590 <UART_API_Thread+0x228>)
 8002522:	015b      	lsls	r3, r3, #5
 8002524:	4413      	add	r3, r2
 8002526:	3304      	adds	r3, #4
 8002528:	681b      	ldr	r3, [r3, #0]
                    sMessage_t message = {
 800252a:	60fb      	str	r3, [r7, #12]
                        .length = dynamic_uart_api_lut[uart].buffer_index
 800252c:	7dfb      	ldrb	r3, [r7, #23]
 800252e:	4a18      	ldr	r2, [pc, #96]	; (8002590 <UART_API_Thread+0x228>)
 8002530:	015b      	lsls	r3, r3, #5
 8002532:	4413      	add	r3, r2
 8002534:	881b      	ldrh	r3, [r3, #0]
                    sMessage_t message = {
 8002536:	823b      	strh	r3, [r7, #16]
                    if (osMessageQueuePut(dynamic_uart_api_lut[uart].message_queue, &message, 0U, 0U) != osOK) {
 8002538:	7dfb      	ldrb	r3, [r7, #23]
 800253a:	4a15      	ldr	r2, [pc, #84]	; (8002590 <UART_API_Thread+0x228>)
 800253c:	015b      	lsls	r3, r3, #5
 800253e:	4413      	add	r3, r2
 8002540:	3318      	adds	r3, #24
 8002542:	6818      	ldr	r0, [r3, #0]
 8002544:	f107 010c 	add.w	r1, r7, #12
 8002548:	2300      	movs	r3, #0
 800254a:	2200      	movs	r2, #0
 800254c:	f004 fdd6 	bl	80070fc <osMessageQueuePut>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00a      	beq.n	800256c <UART_API_Thread+0x204>
                        error("Failed to put message in message queue\n");
 8002556:	4b10      	ldr	r3, [pc, #64]	; (8002598 <UART_API_Thread+0x230>)
 8002558:	6818      	ldr	r0, [r3, #0]
 800255a:	4b15      	ldr	r3, [pc, #84]	; (80025b0 <UART_API_Thread+0x248>)
 800255c:	2284      	movs	r2, #132	; 0x84
 800255e:	4910      	ldr	r1, [pc, #64]	; (80025a0 <UART_API_Thread+0x238>)
 8002560:	f7fe fb62 	bl	8000c28 <Debug_API_Print>
                        Heap_API_Free(message.buffer);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4618      	mov	r0, r3
 8002568:	f7fe fc64 	bl	8000e34 <Heap_API_Free>
                    dynamic_uart_api_lut[uart].state = eUartState_Setup;
 800256c:	7dfb      	ldrb	r3, [r7, #23]
 800256e:	4a08      	ldr	r2, [pc, #32]	; (8002590 <UART_API_Thread+0x228>)
 8002570:	015b      	lsls	r3, r3, #5
 8002572:	4413      	add	r3, r2
 8002574:	3308      	adds	r3, #8
 8002576:	2200      	movs	r2, #0
 8002578:	701a      	strb	r2, [r3, #0]
                    break;
 800257a:	e000      	b.n	800257e <UART_API_Thread+0x216>
                    break;
 800257c:	bf00      	nop
        for (eUart_Driver_Enum_t uart = eUartDriver_First; uart < eUartDriver_Last; uart++) {
 800257e:	7dfb      	ldrb	r3, [r7, #23]
 8002580:	3301      	adds	r3, #1
 8002582:	75fb      	strb	r3, [r7, #23]
 8002584:	7dfb      	ldrb	r3, [r7, #23]
 8002586:	2b01      	cmp	r3, #1
 8002588:	f67f aef5 	bls.w	8002376 <UART_API_Thread+0xe>
 800258c:	e6f0      	b.n	8002370 <UART_API_Thread+0x8>
 800258e:	bf00      	nop
 8002590:	200000fc 	.word	0x200000fc
 8002594:	0800ea2c 	.word	0x0800ea2c
 8002598:	200000f8 	.word	0x200000f8
 800259c:	0800e4b8 	.word	0x0800e4b8
 80025a0:	0800e4d8 	.word	0x0800e4d8
 80025a4:	200008f4 	.word	0x200008f4
 80025a8:	0800e4f4 	.word	0x0800e4f4
 80025ac:	0800e510 	.word	0x0800e510
 80025b0:	0800e534 	.word	0x0800e534

080025b4 <UART_API_Init>:
}

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/
bool UART_API_Init (eUartAPIEnum_t uart, char *delim, eUartBaudrate_t baud_rate) {
 80025b4:	b590      	push	{r4, r7, lr}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
 80025c0:	73fb      	strb	r3, [r7, #15]
    if (uart >= eUart_Last) {
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d901      	bls.n	80025cc <UART_API_Init+0x18>
        return false;
 80025c8:	2300      	movs	r3, #0
 80025ca:	e09d      	b.n	8002708 <UART_API_Init+0x154>
    }
    /* INIT UART */
    if (delim != NULL) {
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d006      	beq.n	80025e0 <UART_API_Init+0x2c>
        dynamic_uart_api_lut[uart].delim = delim;
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
 80025d4:	4a4e      	ldr	r2, [pc, #312]	; (8002710 <UART_API_Init+0x15c>)
 80025d6:	015b      	lsls	r3, r3, #5
 80025d8:	4413      	add	r3, r2
 80025da:	331c      	adds	r3, #28
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	601a      	str	r2, [r3, #0]
    }
    if (baud_rate < eUartBaudrate_Last) {
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
 80025e6:	d806      	bhi.n	80025f6 <UART_API_Init+0x42>
        dynamic_uart_api_lut[uart].baud_rate = baud_rate;
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
 80025ea:	4a49      	ldr	r2, [pc, #292]	; (8002710 <UART_API_Init+0x15c>)
 80025ec:	015b      	lsls	r3, r3, #5
 80025ee:	4413      	add	r3, r2
 80025f0:	330c      	adds	r3, #12
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	601a      	str	r2, [r3, #0]
    }
    UART_Driver_Init(dynamic_uart_api_lut[uart].driver, dynamic_uart_api_lut[uart].baud_rate, static_uart_api_lut[uart].buffer_length);
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
 80025f8:	4a45      	ldr	r2, [pc, #276]	; (8002710 <UART_API_Init+0x15c>)
 80025fa:	015b      	lsls	r3, r3, #5
 80025fc:	4413      	add	r3, r2
 80025fe:	3310      	adds	r3, #16
 8002600:	7818      	ldrb	r0, [r3, #0]
 8002602:	7bfb      	ldrb	r3, [r7, #15]
 8002604:	4a42      	ldr	r2, [pc, #264]	; (8002710 <UART_API_Init+0x15c>)
 8002606:	015b      	lsls	r3, r3, #5
 8002608:	4413      	add	r3, r2
 800260a:	330c      	adds	r3, #12
 800260c:	6819      	ldr	r1, [r3, #0]
 800260e:	7bfb      	ldrb	r3, [r7, #15]
 8002610:	4a40      	ldr	r2, [pc, #256]	; (8002714 <UART_API_Init+0x160>)
 8002612:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002616:	461a      	mov	r2, r3
 8002618:	f001 ff72 	bl	8004500 <UART_Driver_Init>

    /* MUTEX */
    if (dynamic_uart_api_lut[uart].mutex_id == NULL) {
 800261c:	7bfb      	ldrb	r3, [r7, #15]
 800261e:	4a3c      	ldr	r2, [pc, #240]	; (8002710 <UART_API_Init+0x15c>)
 8002620:	015b      	lsls	r3, r3, #5
 8002622:	4413      	add	r3, r2
 8002624:	3314      	adds	r3, #20
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d11a      	bne.n	8002662 <UART_API_Init+0xae>
        dynamic_uart_api_lut[uart].mutex_id = osMutexNew(&mutex_attributes);
 800262c:	7bfc      	ldrb	r4, [r7, #15]
 800262e:	483a      	ldr	r0, [pc, #232]	; (8002718 <UART_API_Init+0x164>)
 8002630:	f004 fbbd 	bl	8006dae <osMutexNew>
 8002634:	4602      	mov	r2, r0
 8002636:	4936      	ldr	r1, [pc, #216]	; (8002710 <UART_API_Init+0x15c>)
 8002638:	0163      	lsls	r3, r4, #5
 800263a:	440b      	add	r3, r1
 800263c:	3314      	adds	r3, #20
 800263e:	601a      	str	r2, [r3, #0]
        if (dynamic_uart_api_lut[uart].mutex_id == NULL) {
 8002640:	7bfb      	ldrb	r3, [r7, #15]
 8002642:	4a33      	ldr	r2, [pc, #204]	; (8002710 <UART_API_Init+0x15c>)
 8002644:	015b      	lsls	r3, r3, #5
 8002646:	4413      	add	r3, r2
 8002648:	3314      	adds	r3, #20
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d108      	bne.n	8002662 <UART_API_Init+0xae>
            error("Failed to create MUTEX\n");
 8002650:	4b32      	ldr	r3, [pc, #200]	; (800271c <UART_API_Init+0x168>)
 8002652:	6818      	ldr	r0, [r3, #0]
 8002654:	4b32      	ldr	r3, [pc, #200]	; (8002720 <UART_API_Init+0x16c>)
 8002656:	22aa      	movs	r2, #170	; 0xaa
 8002658:	4932      	ldr	r1, [pc, #200]	; (8002724 <UART_API_Init+0x170>)
 800265a:	f7fe fae5 	bl	8000c28 <Debug_API_Print>
            return false;
 800265e:	2300      	movs	r3, #0
 8002660:	e052      	b.n	8002708 <UART_API_Init+0x154>
        }
    }

    /* MESSAGE QUEUE */
    if (dynamic_uart_api_lut[uart].message_queue == NULL) {
 8002662:	7bfb      	ldrb	r3, [r7, #15]
 8002664:	4a2a      	ldr	r2, [pc, #168]	; (8002710 <UART_API_Init+0x15c>)
 8002666:	015b      	lsls	r3, r3, #5
 8002668:	4413      	add	r3, r2
 800266a:	3318      	adds	r3, #24
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d125      	bne.n	80026be <UART_API_Init+0x10a>
        dynamic_uart_api_lut[uart].message_queue = osMessageQueueNew(MESSAGE_QUEUE_NUM, sizeof(sMessage_t), NULL);
 8002672:	7bfc      	ldrb	r4, [r7, #15]
 8002674:	2200      	movs	r2, #0
 8002676:	2108      	movs	r1, #8
 8002678:	2004      	movs	r0, #4
 800267a:	f004 fccc 	bl	8007016 <osMessageQueueNew>
 800267e:	4602      	mov	r2, r0
 8002680:	4923      	ldr	r1, [pc, #140]	; (8002710 <UART_API_Init+0x15c>)
 8002682:	0163      	lsls	r3, r4, #5
 8002684:	440b      	add	r3, r1
 8002686:	3318      	adds	r3, #24
 8002688:	601a      	str	r2, [r3, #0]
        if (dynamic_uart_api_lut[uart].message_queue == NULL) {
 800268a:	7bfb      	ldrb	r3, [r7, #15]
 800268c:	4a20      	ldr	r2, [pc, #128]	; (8002710 <UART_API_Init+0x15c>)
 800268e:	015b      	lsls	r3, r3, #5
 8002690:	4413      	add	r3, r2
 8002692:	3318      	adds	r3, #24
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d111      	bne.n	80026be <UART_API_Init+0x10a>
            error("Failed to create message queue\n");
 800269a:	4b20      	ldr	r3, [pc, #128]	; (800271c <UART_API_Init+0x168>)
 800269c:	6818      	ldr	r0, [r3, #0]
 800269e:	4b22      	ldr	r3, [pc, #136]	; (8002728 <UART_API_Init+0x174>)
 80026a0:	22b3      	movs	r2, #179	; 0xb3
 80026a2:	4920      	ldr	r1, [pc, #128]	; (8002724 <UART_API_Init+0x170>)
 80026a4:	f7fe fac0 	bl	8000c28 <Debug_API_Print>
            osMutexDelete(dynamic_uart_api_lut[uart].mutex_id);
 80026a8:	7bfb      	ldrb	r3, [r7, #15]
 80026aa:	4a19      	ldr	r2, [pc, #100]	; (8002710 <UART_API_Init+0x15c>)
 80026ac:	015b      	lsls	r3, r3, #5
 80026ae:	4413      	add	r3, r2
 80026b0:	3314      	adds	r3, #20
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f004 fc88 	bl	8006fca <osMutexDelete>
            return false;
 80026ba:	2300      	movs	r3, #0
 80026bc:	e024      	b.n	8002708 <UART_API_Init+0x154>
        }
    }

    /* THREAD */
    if (uart_api_task_handle == NULL) {
 80026be:	4b1b      	ldr	r3, [pc, #108]	; (800272c <UART_API_Init+0x178>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d11f      	bne.n	8002706 <UART_API_Init+0x152>
        uart_api_task_handle = osThreadNew(UART_API_Thread, NULL, &uart_api_task_attributes);
 80026c6:	4a1a      	ldr	r2, [pc, #104]	; (8002730 <UART_API_Init+0x17c>)
 80026c8:	2100      	movs	r1, #0
 80026ca:	481a      	ldr	r0, [pc, #104]	; (8002734 <UART_API_Init+0x180>)
 80026cc:	f004 f85c 	bl	8006788 <osThreadNew>
 80026d0:	4603      	mov	r3, r0
 80026d2:	4a16      	ldr	r2, [pc, #88]	; (800272c <UART_API_Init+0x178>)
 80026d4:	6013      	str	r3, [r2, #0]
        if (uart_api_task_handle == NULL) {
 80026d6:	4b15      	ldr	r3, [pc, #84]	; (800272c <UART_API_Init+0x178>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d113      	bne.n	8002706 <UART_API_Init+0x152>
            osMessageQueueDelete(dynamic_uart_api_lut[uart].message_queue);
 80026de:	7bfb      	ldrb	r3, [r7, #15]
 80026e0:	4a0b      	ldr	r2, [pc, #44]	; (8002710 <UART_API_Init+0x15c>)
 80026e2:	015b      	lsls	r3, r3, #5
 80026e4:	4413      	add	r3, r2
 80026e6:	3318      	adds	r3, #24
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f004 fdc4 	bl	8007278 <osMessageQueueDelete>
            osMutexDelete(dynamic_uart_api_lut[uart].mutex_id);
 80026f0:	7bfb      	ldrb	r3, [r7, #15]
 80026f2:	4a07      	ldr	r2, [pc, #28]	; (8002710 <UART_API_Init+0x15c>)
 80026f4:	015b      	lsls	r3, r3, #5
 80026f6:	4413      	add	r3, r2
 80026f8:	3314      	adds	r3, #20
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f004 fc64 	bl	8006fca <osMutexDelete>
            return false;
 8002702:	2300      	movs	r3, #0
 8002704:	e000      	b.n	8002708 <UART_API_Init+0x154>
        }

    }
    return true;
 8002706:	2301      	movs	r3, #1
}
 8002708:	4618      	mov	r0, r3
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	bd90      	pop	{r4, r7, pc}
 8002710:	200000fc 	.word	0x200000fc
 8002714:	0800ea2c 	.word	0x0800ea2c
 8002718:	0800ea54 	.word	0x0800ea54
 800271c:	200000f8 	.word	0x200000f8
 8002720:	0800e55c 	.word	0x0800e55c
 8002724:	0800e4d8 	.word	0x0800e4d8
 8002728:	0800e574 	.word	0x0800e574
 800272c:	200008f0 	.word	0x200008f0
 8002730:	0800ea30 	.word	0x0800ea30
 8002734:	08002369 	.word	0x08002369

08002738 <UART_API_GetMessage>:
//        Heap_API_Free(message->buffer);
//    }
//    return true;
//}

bool UART_API_GetMessage (sMessage_t *message, eUartAPIEnum_t uart) {
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	460b      	mov	r3, r1
 8002742:	70fb      	strb	r3, [r7, #3]
    if (message == NULL) {
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d108      	bne.n	800275c <UART_API_GetMessage+0x24>
        error("Argument message == NULL\n");
 800274a:	4b13      	ldr	r3, [pc, #76]	; (8002798 <UART_API_GetMessage+0x60>)
 800274c:	6818      	ldr	r0, [r3, #0]
 800274e:	4b13      	ldr	r3, [pc, #76]	; (800279c <UART_API_GetMessage+0x64>)
 8002750:	22d4      	movs	r2, #212	; 0xd4
 8002752:	4913      	ldr	r1, [pc, #76]	; (80027a0 <UART_API_GetMessage+0x68>)
 8002754:	f7fe fa68 	bl	8000c28 <Debug_API_Print>
        return false;
 8002758:	2300      	movs	r3, #0
 800275a:	e018      	b.n	800278e <UART_API_GetMessage+0x56>
    }
    if (osMessageQueueGet(dynamic_uart_api_lut[uart].message_queue, message, 0U, osWaitForever) != osOK) {
 800275c:	78fb      	ldrb	r3, [r7, #3]
 800275e:	4a11      	ldr	r2, [pc, #68]	; (80027a4 <UART_API_GetMessage+0x6c>)
 8002760:	015b      	lsls	r3, r3, #5
 8002762:	4413      	add	r3, r2
 8002764:	3318      	adds	r3, #24
 8002766:	6818      	ldr	r0, [r3, #0]
 8002768:	f04f 33ff 	mov.w	r3, #4294967295
 800276c:	2200      	movs	r2, #0
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	f004 fd24 	bl	80071bc <osMessageQueueGet>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d008      	beq.n	800278c <UART_API_GetMessage+0x54>
        error("Failed to get message from message queue\n");
 800277a:	4b07      	ldr	r3, [pc, #28]	; (8002798 <UART_API_GetMessage+0x60>)
 800277c:	6818      	ldr	r0, [r3, #0]
 800277e:	4b0a      	ldr	r3, [pc, #40]	; (80027a8 <UART_API_GetMessage+0x70>)
 8002780:	22d8      	movs	r2, #216	; 0xd8
 8002782:	4907      	ldr	r1, [pc, #28]	; (80027a0 <UART_API_GetMessage+0x68>)
 8002784:	f7fe fa50 	bl	8000c28 <Debug_API_Print>
        return false;
 8002788:	2300      	movs	r3, #0
 800278a:	e000      	b.n	800278e <UART_API_GetMessage+0x56>
    }
    return true;
 800278c:	2301      	movs	r3, #1
}
 800278e:	4618      	mov	r0, r3
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	200000f8 	.word	0x200000f8
 800279c:	0800e594 	.word	0x0800e594
 80027a0:	0800e4d8 	.word	0x0800e4d8
 80027a4:	200000fc 	.word	0x200000fc
 80027a8:	0800e5b0 	.word	0x0800e5b0

080027ac <UART_API_SendString>:

bool UART_API_SendString (eUartAPIEnum_t uart, char *data, uint16_t length) {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	6039      	str	r1, [r7, #0]
 80027b6:	71fb      	strb	r3, [r7, #7]
 80027b8:	4613      	mov	r3, r2
 80027ba:	80bb      	strh	r3, [r7, #4]
    if (osMutexAcquire(dynamic_uart_api_lut[uart].mutex_id, osWaitForever) != osOK) {
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	4a16      	ldr	r2, [pc, #88]	; (8002818 <UART_API_SendString+0x6c>)
 80027c0:	015b      	lsls	r3, r3, #5
 80027c2:	4413      	add	r3, r2
 80027c4:	3314      	adds	r3, #20
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f04f 31ff 	mov.w	r1, #4294967295
 80027cc:	4618      	mov	r0, r3
 80027ce:	f004 fb74 	bl	8006eba <osMutexAcquire>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <UART_API_SendString+0x30>
        return false;
 80027d8:	2300      	movs	r3, #0
 80027da:	e018      	b.n	800280e <UART_API_SendString+0x62>
    }
    bool status = false;
 80027dc:	2300      	movs	r3, #0
 80027de:	73fb      	strb	r3, [r7, #15]
    status = UART_Driver_SendString(uart, data, length);
 80027e0:	88ba      	ldrh	r2, [r7, #4]
 80027e2:	79fb      	ldrb	r3, [r7, #7]
 80027e4:	6839      	ldr	r1, [r7, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f001 ff6e 	bl	80046c8 <UART_Driver_SendString>
 80027ec:	4603      	mov	r3, r0
 80027ee:	73fb      	strb	r3, [r7, #15]
    if (osMutexRelease(dynamic_uart_api_lut[uart].mutex_id) != osOK) {
 80027f0:	79fb      	ldrb	r3, [r7, #7]
 80027f2:	4a09      	ldr	r2, [pc, #36]	; (8002818 <UART_API_SendString+0x6c>)
 80027f4:	015b      	lsls	r3, r3, #5
 80027f6:	4413      	add	r3, r2
 80027f8:	3314      	adds	r3, #20
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f004 fba7 	bl	8006f50 <osMutexRelease>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <UART_API_SendString+0x60>
        return false;
 8002808:	2300      	movs	r3, #0
 800280a:	e000      	b.n	800280e <UART_API_SendString+0x62>
    }
    return status;
 800280c:	7bfb      	ldrb	r3, [r7, #15]
}
 800280e:	4618      	mov	r0, r3
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	200000fc 	.word	0x200000fc

0800281c <CLI_APP_Thread>:
 *********************************************************************************************************************/
static void CLI_APP_Thread (void *argument);
/**********************************************************************************************************************
 * Definitions of private functions
 *********************************************************************************************************************/
static void CLI_APP_Thread (void *argument) {
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af02      	add	r7, sp, #8
 8002822:	6078      	str	r0, [r7, #4]
    while (true) {
        if (UART_API_GetMessage(&uart_debug_message, eUart_Debug) == true) {
 8002824:	2100      	movs	r1, #0
 8002826:	4819      	ldr	r0, [pc, #100]	; (800288c <CLI_APP_Thread+0x70>)
 8002828:	f7ff ff86 	bl	8002738 <UART_API_GetMessage>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d0f8      	beq.n	8002824 <CLI_APP_Thread+0x8>

            cmd_api_args.message = uart_debug_message.buffer;
 8002832:	4b16      	ldr	r3, [pc, #88]	; (800288c <CLI_APP_Thread+0x70>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a16      	ldr	r2, [pc, #88]	; (8002890 <CLI_APP_Thread+0x74>)
 8002838:	6013      	str	r3, [r2, #0]
            cmd_api_args.message_length = uart_debug_message.length;
 800283a:	4b14      	ldr	r3, [pc, #80]	; (800288c <CLI_APP_Thread+0x70>)
 800283c:	889a      	ldrh	r2, [r3, #4]
 800283e:	4b14      	ldr	r3, [pc, #80]	; (8002890 <CLI_APP_Thread+0x74>)
 8002840:	809a      	strh	r2, [r3, #4]
            cmd_api_args.response_buffer = cli_app_response_buffer;
 8002842:	4b13      	ldr	r3, [pc, #76]	; (8002890 <CLI_APP_Thread+0x74>)
 8002844:	4a13      	ldr	r2, [pc, #76]	; (8002894 <CLI_APP_Thread+0x78>)
 8002846:	609a      	str	r2, [r3, #8]
            cmd_api_args.response_buffer_length = RESPONSE_BUFFER_LENGTH;
 8002848:	4b11      	ldr	r3, [pc, #68]	; (8002890 <CLI_APP_Thread+0x74>)
 800284a:	2280      	movs	r2, #128	; 0x80
 800284c:	819a      	strh	r2, [r3, #12]
            cmd_api_args.static_lut_length = (uint16_t) eCliAppCmd_Last;
 800284e:	4b10      	ldr	r3, [pc, #64]	; (8002890 <CLI_APP_Thread+0x74>)
 8002850:	2207      	movs	r2, #7
 8002852:	81da      	strh	r2, [r3, #14]
            cmd_api_args.static_lut = (sCmdApiStaticLut_t*) &static_cli_app_lut;
 8002854:	4b0e      	ldr	r3, [pc, #56]	; (8002890 <CLI_APP_Thread+0x74>)
 8002856:	4a10      	ldr	r2, [pc, #64]	; (8002898 <CLI_APP_Thread+0x7c>)
 8002858:	611a      	str	r2, [r3, #16]

            CMD_API_ParseCommand(&cmd_api_args, SEPARATOR);
 800285a:	4910      	ldr	r1, [pc, #64]	; (800289c <CLI_APP_Thread+0x80>)
 800285c:	480c      	ldr	r0, [pc, #48]	; (8002890 <CLI_APP_Thread+0x74>)
 800285e:	f7fd ff19 	bl	8000694 <CMD_API_ParseCommand>

            if (strcmp(cmd_api_args.response_buffer, "") != 0) {
 8002862:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <CLI_APP_Thread+0x74>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d009      	beq.n	8002880 <CLI_APP_Thread+0x64>
                debug("%s", cmd_api_args.response_buffer);
 800286c:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <CLI_APP_Thread+0x84>)
 800286e:	6818      	ldr	r0, [r3, #0]
 8002870:	4b07      	ldr	r3, [pc, #28]	; (8002890 <CLI_APP_Thread+0x74>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	4b0b      	ldr	r3, [pc, #44]	; (80028a4 <CLI_APP_Thread+0x88>)
 8002878:	2200      	movs	r2, #0
 800287a:	2100      	movs	r1, #0
 800287c:	f7fe f9d4 	bl	8000c28 <Debug_API_Print>
            }
            Heap_API_Free(uart_debug_message.buffer);
 8002880:	4b02      	ldr	r3, [pc, #8]	; (800288c <CLI_APP_Thread+0x70>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f7fe fad5 	bl	8000e34 <Heap_API_Free>
        if (UART_API_GetMessage(&uart_debug_message, eUart_Debug) == true) {
 800288a:	e7cb      	b.n	8002824 <CLI_APP_Thread+0x8>
 800288c:	200008fc 	.word	0x200008fc
 8002890:	20000904 	.word	0x20000904
 8002894:	20000918 	.word	0x20000918
 8002898:	0800ea88 	.word	0x0800ea88
 800289c:	0800e628 	.word	0x0800e628
 80028a0:	2000013c 	.word	0x2000013c
 80028a4:	0800e62c 	.word	0x0800e62c

080028a8 <CLI_APP_Init>:
}

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/
bool CLI_APP_Init (void) {
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
    /* Create new Thread */
    cli_app_task_handle = osThreadNew(CLI_APP_Thread, NULL, &cli_app_task_attributes);
 80028ac:	4a0b      	ldr	r2, [pc, #44]	; (80028dc <CLI_APP_Init+0x34>)
 80028ae:	2100      	movs	r1, #0
 80028b0:	480b      	ldr	r0, [pc, #44]	; (80028e0 <CLI_APP_Init+0x38>)
 80028b2:	f003 ff69 	bl	8006788 <osThreadNew>
 80028b6:	4603      	mov	r3, r0
 80028b8:	4a0a      	ldr	r2, [pc, #40]	; (80028e4 <CLI_APP_Init+0x3c>)
 80028ba:	6013      	str	r3, [r2, #0]
    if (cli_app_task_handle == NULL) {
 80028bc:	4b09      	ldr	r3, [pc, #36]	; (80028e4 <CLI_APP_Init+0x3c>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d108      	bne.n	80028d6 <CLI_APP_Init+0x2e>
        error("Failed to initialize CLI APP task\n");
 80028c4:	4b08      	ldr	r3, [pc, #32]	; (80028e8 <CLI_APP_Init+0x40>)
 80028c6:	6818      	ldr	r0, [r3, #0]
 80028c8:	4b08      	ldr	r3, [pc, #32]	; (80028ec <CLI_APP_Init+0x44>)
 80028ca:	2257      	movs	r2, #87	; 0x57
 80028cc:	4908      	ldr	r1, [pc, #32]	; (80028f0 <CLI_APP_Init+0x48>)
 80028ce:	f7fe f9ab 	bl	8000c28 <Debug_API_Print>
        return false;
 80028d2:	2300      	movs	r3, #0
 80028d4:	e000      	b.n	80028d8 <CLI_APP_Init+0x30>
    }
    return true;
 80028d6:	2301      	movs	r3, #1
}
 80028d8:	4618      	mov	r0, r3
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	0800ea64 	.word	0x0800ea64
 80028e0:	0800281d 	.word	0x0800281d
 80028e4:	200008f8 	.word	0x200008f8
 80028e8:	2000013c 	.word	0x2000013c
 80028ec:	0800e630 	.word	0x0800e630
 80028f0:	0800e654 	.word	0x0800e654

080028f4 <LED_APP_Thread>:
// @formatter:on0

/**********************************************************************************************************************
 * Definitions of private functions
 *********************************************************************************************************************/
static void LED_APP_Thread (void *argument) {
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af02      	add	r7, sp, #8
 80028fa:	6078      	str	r0, [r7, #4]
    while (true) {
        if (osMessageQueueGet(led_app_message_queue, &task_args_message, 0U, osWaitForever) == osOK) {
 80028fc:	4b12      	ldr	r3, [pc, #72]	; (8002948 <LED_APP_Thread+0x54>)
 80028fe:	6818      	ldr	r0, [r3, #0]
 8002900:	f04f 33ff 	mov.w	r3, #4294967295
 8002904:	2200      	movs	r2, #0
 8002906:	4911      	ldr	r1, [pc, #68]	; (800294c <LED_APP_Thread+0x58>)
 8002908:	f004 fc58 	bl	80071bc <osMessageQueueGet>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10f      	bne.n	8002932 <LED_APP_Thread+0x3e>
            led_app_static_lut[task_args_message.task].function_pointer(task_args_message.task_args_struct);
 8002912:	4b0e      	ldr	r3, [pc, #56]	; (800294c <LED_APP_Thread+0x58>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	461a      	mov	r2, r3
 8002918:	4b0d      	ldr	r3, [pc, #52]	; (8002950 <LED_APP_Thread+0x5c>)
 800291a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800291e:	4a0b      	ldr	r2, [pc, #44]	; (800294c <LED_APP_Thread+0x58>)
 8002920:	6852      	ldr	r2, [r2, #4]
 8002922:	4610      	mov	r0, r2
 8002924:	4798      	blx	r3
            Heap_API_Free(task_args_message.task_args_struct);
 8002926:	4b09      	ldr	r3, [pc, #36]	; (800294c <LED_APP_Thread+0x58>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	4618      	mov	r0, r3
 800292c:	f7fe fa82 	bl	8000e34 <Heap_API_Free>
 8002930:	e7e4      	b.n	80028fc <LED_APP_Thread+0x8>
        } else {
            error("%s\n", static_debug_message_lut[eDebugMsg_MessageQueueGetFailed]);
 8002932:	4b08      	ldr	r3, [pc, #32]	; (8002954 <LED_APP_Thread+0x60>)
 8002934:	6818      	ldr	r0, [r3, #0]
 8002936:	4b08      	ldr	r3, [pc, #32]	; (8002958 <LED_APP_Thread+0x64>)
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	4b07      	ldr	r3, [pc, #28]	; (800295c <LED_APP_Thread+0x68>)
 800293e:	2250      	movs	r2, #80	; 0x50
 8002940:	4907      	ldr	r1, [pc, #28]	; (8002960 <LED_APP_Thread+0x6c>)
 8002942:	f7fe f971 	bl	8000c28 <Debug_API_Print>
        if (osMessageQueueGet(led_app_message_queue, &task_args_message, 0U, osWaitForever) == osOK) {
 8002946:	e7d9      	b.n	80028fc <LED_APP_Thread+0x8>
 8002948:	2000099c 	.word	0x2000099c
 800294c:	200009a0 	.word	0x200009a0
 8002950:	0800eae4 	.word	0x0800eae4
 8002954:	20000158 	.word	0x20000158
 8002958:	20000000 	.word	0x20000000
 800295c:	0800e684 	.word	0x0800e684
 8002960:	0800e688 	.word	0x0800e688

08002964 <LED_APP_TaskSet>:
        }
    }
    osThreadTerminate(NULL);
}

static bool LED_APP_TaskSet (void *task_args_struct) {
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
    sLedAppTaskSet_t *set_args = (sLedAppTaskSet_t*) task_args_struct;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	60fb      	str	r3, [r7, #12]
    osTimerStop(led_app_dynamic_lut[set_args->pin].timer_id);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	4619      	mov	r1, r3
 8002976:	4a0a      	ldr	r2, [pc, #40]	; (80029a0 <LED_APP_TaskSet+0x3c>)
 8002978:	460b      	mov	r3, r1
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	440b      	add	r3, r1
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	3304      	adds	r3, #4
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f004 f86a 	bl	8006a60 <osTimerStop>
    LED_API_SetPin(set_args->pin);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	4618      	mov	r0, r3
 8002992:	f7fe fac5 	bl	8000f20 <LED_API_SetPin>
    return false;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	20000140 	.word	0x20000140

080029a4 <LED_APP_TaskReset>:
static bool LED_APP_TaskReset (void *task_args_struct) {
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
    sLedAppTaskReset_t *reset_args = (sLedAppTaskReset_t*) task_args_struct;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	60fb      	str	r3, [r7, #12]
    osTimerStop(led_app_dynamic_lut[reset_args->pin].timer_id);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	4619      	mov	r1, r3
 80029b6:	4a0a      	ldr	r2, [pc, #40]	; (80029e0 <LED_APP_TaskReset+0x3c>)
 80029b8:	460b      	mov	r3, r1
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	440b      	add	r3, r1
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	3304      	adds	r3, #4
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f004 f84a 	bl	8006a60 <osTimerStop>
    LED_API_ResetPin(reset_args->pin);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7fe fad1 	bl	8000f78 <LED_API_ResetPin>
    return false;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	20000140 	.word	0x20000140

080029e4 <LED_APP_TaskToggle>:
static bool LED_APP_TaskToggle (void *task_args_struct) {
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
    sLedAppTaskToggle_t *toggle_args = (sLedAppTaskToggle_t*) task_args_struct;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	60fb      	str	r3, [r7, #12]
    osTimerStop(led_app_dynamic_lut[toggle_args->pin].timer_id);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	4619      	mov	r1, r3
 80029f6:	4a0a      	ldr	r2, [pc, #40]	; (8002a20 <LED_APP_TaskToggle+0x3c>)
 80029f8:	460b      	mov	r3, r1
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	440b      	add	r3, r1
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	3304      	adds	r3, #4
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f004 f82a 	bl	8006a60 <osTimerStop>
    LED_API_TogglePin(toggle_args->pin);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fe fadd 	bl	8000fd0 <LED_API_TogglePin>
    return false;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	20000140 	.word	0x20000140

08002a24 <LED_APP_TaskBlink>:

static bool LED_APP_TaskBlink (void *task_args_struct) {
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
    sLedAppTaskBlink_t *blink_args = (sLedAppTaskBlink_t*) task_args_struct;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	60fb      	str	r3, [r7, #12]
    if (blink_args->time == 0) {
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	885b      	ldrh	r3, [r3, #2]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <LED_APP_TaskBlink+0x18>
        return false;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	e039      	b.n	8002ab0 <LED_APP_TaskBlink+0x8c>
    }
    if (blink_args->frequency == 0) {
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	889b      	ldrh	r3, [r3, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <LED_APP_TaskBlink+0x24>
        return false;
 8002a44:	2300      	movs	r3, #0
 8002a46:	e033      	b.n	8002ab0 <LED_APP_TaskBlink+0x8c>
    }

    led_app_dynamic_lut[blink_args->pin].blink_num = blink_args->time * blink_args->frequency;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	885a      	ldrh	r2, [r3, #2]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	889b      	ldrh	r3, [r3, #4]
 8002a50:	68f9      	ldr	r1, [r7, #12]
 8002a52:	7809      	ldrb	r1, [r1, #0]
 8002a54:	fb12 f303 	smulbb	r3, r2, r3
 8002a58:	b298      	uxth	r0, r3
 8002a5a:	4a17      	ldr	r2, [pc, #92]	; (8002ab8 <LED_APP_TaskBlink+0x94>)
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	440b      	add	r3, r1
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	3308      	adds	r3, #8
 8002a68:	4602      	mov	r2, r0
 8002a6a:	801a      	strh	r2, [r3, #0]
    uint32_t timer_period = (uint32_t) (SECOND_IN_MS / blink_args->frequency);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	889b      	ldrh	r3, [r3, #4]
 8002a70:	461a      	mov	r2, r3
 8002a72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a76:	fb93 f3f2 	sdiv	r3, r3, r2
 8002a7a:	60bb      	str	r3, [r7, #8]

    if (osTimerStart(led_app_dynamic_lut[blink_args->pin].timer_id, timer_period) != osOK) {
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	4619      	mov	r1, r3
 8002a82:	4a0d      	ldr	r2, [pc, #52]	; (8002ab8 <LED_APP_TaskBlink+0x94>)
 8002a84:	460b      	mov	r3, r1
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	440b      	add	r3, r1
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	3304      	adds	r3, #4
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68b9      	ldr	r1, [r7, #8]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f003 ffb5 	bl	8006a04 <osTimerStart>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d006      	beq.n	8002aae <LED_APP_TaskBlink+0x8a>
        error("Failed to start timer!\n");
 8002aa0:	4b06      	ldr	r3, [pc, #24]	; (8002abc <LED_APP_TaskBlink+0x98>)
 8002aa2:	6818      	ldr	r0, [r3, #0]
 8002aa4:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <LED_APP_TaskBlink+0x9c>)
 8002aa6:	2276      	movs	r2, #118	; 0x76
 8002aa8:	4906      	ldr	r1, [pc, #24]	; (8002ac4 <LED_APP_TaskBlink+0xa0>)
 8002aaa:	f7fe f8bd 	bl	8000c28 <Debug_API_Print>
    }
    return true;
 8002aae:	2301      	movs	r3, #1
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	20000140 	.word	0x20000140
 8002abc:	20000158 	.word	0x20000158
 8002ac0:	0800e6a0 	.word	0x0800e6a0
 8002ac4:	0800e688 	.word	0x0800e688

08002ac8 <LED_APP_BlinkPeriodic_Callback>:
static void LED_APP_BlinkPeriodic_Callback (void *argument) {
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
    sLedAppDynamic_t *blink_dynamic_lut = (sLedAppDynamic_t*) argument;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	60fb      	str	r3, [r7, #12]
    LED_API_TogglePin(blink_dynamic_lut->led);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7fe fa79 	bl	8000fd0 <LED_API_TogglePin>
    led_app_dynamic_lut[blink_dynamic_lut->led].blink_num--;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	491b      	ldr	r1, [pc, #108]	; (8002b54 <LED_APP_BlinkPeriodic_Callback+0x8c>)
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	4413      	add	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	440b      	add	r3, r1
 8002af0:	3308      	adds	r3, #8
 8002af2:	881b      	ldrh	r3, [r3, #0]
 8002af4:	3b01      	subs	r3, #1
 8002af6:	b298      	uxth	r0, r3
 8002af8:	4916      	ldr	r1, [pc, #88]	; (8002b54 <LED_APP_BlinkPeriodic_Callback+0x8c>)
 8002afa:	4613      	mov	r3, r2
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	4413      	add	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	440b      	add	r3, r1
 8002b04:	3308      	adds	r3, #8
 8002b06:	4602      	mov	r2, r0
 8002b08:	801a      	strh	r2, [r3, #0]
    if (led_app_dynamic_lut[blink_dynamic_lut->led].blink_num == 0) {
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4a10      	ldr	r2, [pc, #64]	; (8002b54 <LED_APP_BlinkPeriodic_Callback+0x8c>)
 8002b12:	460b      	mov	r3, r1
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	440b      	add	r3, r1
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	3308      	adds	r3, #8
 8002b1e:	881b      	ldrh	r3, [r3, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d112      	bne.n	8002b4a <LED_APP_BlinkPeriodic_Callback+0x82>
        LED_API_ResetPin(blink_dynamic_lut->led);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7fe fa25 	bl	8000f78 <LED_API_ResetPin>
        osTimerStop(led_app_dynamic_lut[blink_dynamic_lut->led].timer_id);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	4619      	mov	r1, r3
 8002b34:	4a07      	ldr	r2, [pc, #28]	; (8002b54 <LED_APP_BlinkPeriodic_Callback+0x8c>)
 8002b36:	460b      	mov	r3, r1
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	440b      	add	r3, r1
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	3304      	adds	r3, #4
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f003 ff8b 	bl	8006a60 <osTimerStop>
    }
}
 8002b4a:	bf00      	nop
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20000140 	.word	0x20000140

08002b58 <LED_APP_Init>:

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/
bool LED_APP_Init (void) {
 8002b58:	b590      	push	{r4, r7, lr}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
    LED_API_Init();
 8002b5e:	f7fe f9b9 	bl	8000ed4 <LED_API_Init>
    /* Create timers for each LED */
    for (eLedApiPinEnum_t led = eLedApiPin_First; led < eLedApiPin_Last; led++) {
 8002b62:	2300      	movs	r3, #0
 8002b64:	71fb      	strb	r3, [r7, #7]
 8002b66:	e01e      	b.n	8002ba6 <LED_APP_Init+0x4e>
        led_app_dynamic_lut[led].timer_id = osTimerNew(LED_APP_BlinkPeriodic_Callback,
        osTimerPeriodic, &led_app_dynamic_lut[led], NULL);
 8002b68:	79fa      	ldrb	r2, [r7, #7]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	4413      	add	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4a26      	ldr	r2, [pc, #152]	; (8002c0c <LED_APP_Init+0xb4>)
 8002b74:	441a      	add	r2, r3
        led_app_dynamic_lut[led].timer_id = osTimerNew(LED_APP_BlinkPeriodic_Callback,
 8002b76:	79fc      	ldrb	r4, [r7, #7]
 8002b78:	2300      	movs	r3, #0
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	4824      	ldr	r0, [pc, #144]	; (8002c10 <LED_APP_Init+0xb8>)
 8002b7e:	f003 fec5 	bl	800690c <osTimerNew>
 8002b82:	4602      	mov	r2, r0
 8002b84:	4921      	ldr	r1, [pc, #132]	; (8002c0c <LED_APP_Init+0xb4>)
 8002b86:	4623      	mov	r3, r4
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	4423      	add	r3, r4
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	440b      	add	r3, r1
 8002b90:	3304      	adds	r3, #4
 8002b92:	601a      	str	r2, [r3, #0]

        if (led_app_dynamic_lut[eLedApiPin_Last].timer_id == NULL) {
 8002b94:	4b1d      	ldr	r3, [pc, #116]	; (8002c0c <LED_APP_Init+0xb4>)
 8002b96:	69db      	ldr	r3, [r3, #28]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <LED_APP_Init+0x48>
            return false;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	e030      	b.n	8002c02 <LED_APP_Init+0xaa>
    for (eLedApiPinEnum_t led = eLedApiPin_First; led < eLedApiPin_Last; led++) {
 8002ba0:	79fb      	ldrb	r3, [r7, #7]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	71fb      	strb	r3, [r7, #7]
 8002ba6:	79fb      	ldrb	r3, [r7, #7]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d9dd      	bls.n	8002b68 <LED_APP_Init+0x10>
        }
    }

    /* Create a message queue */
    led_app_message_queue = osMessageQueueNew(10, sizeof(sLedAppTaskArgs_t), NULL);
 8002bac:	2200      	movs	r2, #0
 8002bae:	2108      	movs	r1, #8
 8002bb0:	200a      	movs	r0, #10
 8002bb2:	f004 fa30 	bl	8007016 <osMessageQueueNew>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	4a16      	ldr	r2, [pc, #88]	; (8002c14 <LED_APP_Init+0xbc>)
 8002bba:	6013      	str	r3, [r2, #0]
    if (led_app_message_queue == NULL) {
 8002bbc:	4b15      	ldr	r3, [pc, #84]	; (8002c14 <LED_APP_Init+0xbc>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d108      	bne.n	8002bd6 <LED_APP_Init+0x7e>
        error("Failed to create message queue");
 8002bc4:	4b14      	ldr	r3, [pc, #80]	; (8002c18 <LED_APP_Init+0xc0>)
 8002bc6:	6818      	ldr	r0, [r3, #0]
 8002bc8:	4b14      	ldr	r3, [pc, #80]	; (8002c1c <LED_APP_Init+0xc4>)
 8002bca:	2296      	movs	r2, #150	; 0x96
 8002bcc:	4914      	ldr	r1, [pc, #80]	; (8002c20 <LED_APP_Init+0xc8>)
 8002bce:	f7fe f82b 	bl	8000c28 <Debug_API_Print>
        return false;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	e015      	b.n	8002c02 <LED_APP_Init+0xaa>
    }

    /* Create a Thread */
    led_app_task_handle = osThreadNew(LED_APP_Thread, NULL, &led_app_task_attributes);
 8002bd6:	4a13      	ldr	r2, [pc, #76]	; (8002c24 <LED_APP_Init+0xcc>)
 8002bd8:	2100      	movs	r1, #0
 8002bda:	4813      	ldr	r0, [pc, #76]	; (8002c28 <LED_APP_Init+0xd0>)
 8002bdc:	f003 fdd4 	bl	8006788 <osThreadNew>
 8002be0:	4603      	mov	r3, r0
 8002be2:	4a12      	ldr	r2, [pc, #72]	; (8002c2c <LED_APP_Init+0xd4>)
 8002be4:	6013      	str	r3, [r2, #0]
    if (led_app_task_handle == NULL) {
 8002be6:	4b11      	ldr	r3, [pc, #68]	; (8002c2c <LED_APP_Init+0xd4>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d108      	bne.n	8002c00 <LED_APP_Init+0xa8>
        error("Failed to initialize task\n");
 8002bee:	4b0a      	ldr	r3, [pc, #40]	; (8002c18 <LED_APP_Init+0xc0>)
 8002bf0:	6818      	ldr	r0, [r3, #0]
 8002bf2:	4b0f      	ldr	r3, [pc, #60]	; (8002c30 <LED_APP_Init+0xd8>)
 8002bf4:	229d      	movs	r2, #157	; 0x9d
 8002bf6:	490a      	ldr	r1, [pc, #40]	; (8002c20 <LED_APP_Init+0xc8>)
 8002bf8:	f7fe f816 	bl	8000c28 <Debug_API_Print>
        return false;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	e000      	b.n	8002c02 <LED_APP_Init+0xaa>
    }
    return true;
 8002c00:	2301      	movs	r3, #1
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd90      	pop	{r4, r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	20000140 	.word	0x20000140
 8002c10:	08002ac9 	.word	0x08002ac9
 8002c14:	2000099c 	.word	0x2000099c
 8002c18:	20000158 	.word	0x20000158
 8002c1c:	0800e6b8 	.word	0x0800e6b8
 8002c20:	0800e688 	.word	0x0800e688
 8002c24:	0800eac0 	.word	0x0800eac0
 8002c28:	080028f5 	.word	0x080028f5
 8002c2c:	20000998 	.word	0x20000998
 8002c30:	0800e6d8 	.word	0x0800e6d8

08002c34 <LED_APP_AddTask>:

bool LED_APP_AddTask (sLedAppTaskArgs_t *task_struct) {
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
    if (task_struct == NULL) {
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <LED_APP_AddTask+0x12>
        return false;
 8002c42:	2300      	movs	r3, #0
 8002c44:	e011      	b.n	8002c6a <LED_APP_AddTask+0x36>
    }
    if (osMessageQueuePut(led_app_message_queue, task_struct, 0U, 0U) != osOK) {
 8002c46:	4b0b      	ldr	r3, [pc, #44]	; (8002c74 <LED_APP_AddTask+0x40>)
 8002c48:	6818      	ldr	r0, [r3, #0]
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	f004 fa54 	bl	80070fc <osMessageQueuePut>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d006      	beq.n	8002c68 <LED_APP_AddTask+0x34>
        Heap_API_Free(task_struct->task_args_struct);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7fe f8e8 	bl	8000e34 <Heap_API_Free>
        return false;
 8002c64:	2300      	movs	r3, #0
 8002c66:	e000      	b.n	8002c6a <LED_APP_AddTask+0x36>
    }
    return true;
 8002c68:	2301      	movs	r3, #1
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	2000099c 	.word	0x2000099c

08002c78 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002c7c:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <LL_RCC_HSI_Enable+0x1c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a04      	ldr	r2, [pc, #16]	; (8002c94 <LL_RCC_HSI_Enable+0x1c>)
 8002c82:	f043 0301 	orr.w	r3, r3, #1
 8002c86:	6013      	str	r3, [r2, #0]
}
 8002c88:	bf00      	nop
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	40023800 	.word	0x40023800

08002c98 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002c9c:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <LL_RCC_HSI_IsReady+0x20>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	bf0c      	ite	eq
 8002ca8:	2301      	moveq	r3, #1
 8002caa:	2300      	movne	r3, #0
 8002cac:	b2db      	uxtb	r3, r3
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr
 8002cb8:	40023800 	.word	0x40023800

08002cbc <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8002cc4:	4b07      	ldr	r3, [pc, #28]	; (8002ce4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	4904      	ldr	r1, [pc, #16]	; (8002ce4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	600b      	str	r3, [r1, #0]
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	40023800 	.word	0x40023800

08002ce8 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002cec:	4b05      	ldr	r3, [pc, #20]	; (8002d04 <LL_RCC_LSI_Enable+0x1c>)
 8002cee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf0:	4a04      	ldr	r2, [pc, #16]	; (8002d04 <LL_RCC_LSI_Enable+0x1c>)
 8002cf2:	f043 0301 	orr.w	r3, r3, #1
 8002cf6:	6753      	str	r3, [r2, #116]	; 0x74
}
 8002cf8:	bf00      	nop
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	40023800 	.word	0x40023800

08002d08 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY));
 8002d0c:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <LL_RCC_LSI_IsReady+0x20>)
 8002d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	bf0c      	ite	eq
 8002d18:	2301      	moveq	r3, #1
 8002d1a:	2300      	movne	r3, #0
 8002d1c:	b2db      	uxtb	r3, r3
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	40023800 	.word	0x40023800

08002d2c <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002d34:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <LL_RCC_SetSysClkSource+0x24>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f023 0203 	bic.w	r2, r3, #3
 8002d3c:	4904      	ldr	r1, [pc, #16]	; (8002d50 <LL_RCC_SetSysClkSource+0x24>)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	608b      	str	r3, [r1, #8]
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	40023800 	.word	0x40023800

08002d54 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002d58:	4b04      	ldr	r3, [pc, #16]	; (8002d6c <LL_RCC_GetSysClkSource+0x18>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 030c 	and.w	r3, r3, #12
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	40023800 	.word	0x40023800

08002d70 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002d78:	4b06      	ldr	r3, [pc, #24]	; (8002d94 <LL_RCC_SetAHBPrescaler+0x24>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d80:	4904      	ldr	r1, [pc, #16]	; (8002d94 <LL_RCC_SetAHBPrescaler+0x24>)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	608b      	str	r3, [r1, #8]
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	40023800 	.word	0x40023800

08002d98 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002da0:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <LL_RCC_SetAPB1Prescaler+0x24>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002da8:	4904      	ldr	r1, [pc, #16]	; (8002dbc <LL_RCC_SetAPB1Prescaler+0x24>)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	608b      	str	r3, [r1, #8]
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	40023800 	.word	0x40023800

08002dc0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002dc8:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dd0:	4904      	ldr	r1, [pc, #16]	; (8002de4 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	608b      	str	r3, [r1, #8]
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	40023800 	.word	0x40023800

08002de8 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8002df0:	4b07      	ldr	r3, [pc, #28]	; (8002e10 <LL_RCC_SetTIMPrescaler+0x28>)
 8002df2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002df6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002dfa:	4905      	ldr	r1, [pc, #20]	; (8002e10 <LL_RCC_SetTIMPrescaler+0x28>)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	40023800 	.word	0x40023800

08002e14 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002e18:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <LL_RCC_PLL_Enable+0x1c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a04      	ldr	r2, [pc, #16]	; (8002e30 <LL_RCC_PLL_Enable+0x1c>)
 8002e1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e22:	6013      	str	r3, [r2, #0]
}
 8002e24:	bf00      	nop
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	40023800 	.word	0x40023800

08002e34 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8002e38:	4b07      	ldr	r3, [pc, #28]	; (8002e58 <LL_RCC_PLL_IsReady+0x24>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e44:	bf0c      	ite	eq
 8002e46:	2301      	moveq	r3, #1
 8002e48:	2300      	movne	r3, #0
 8002e4a:	b2db      	uxtb	r3, r3
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40023800 	.word	0x40023800

08002e5c <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
 8002e68:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8002e6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ea0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ea4 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8002e70:	4013      	ands	r3, r2
 8002e72:	68f9      	ldr	r1, [r7, #12]
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	4311      	orrs	r1, r2
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	0192      	lsls	r2, r2, #6
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	4908      	ldr	r1, [pc, #32]	; (8002ea0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8002e84:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e8c:	4904      	ldr	r1, [pc, #16]	; (8002ea0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8002e94:	bf00      	nop
 8002e96:	3714      	adds	r7, #20
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	ffbf8000 	.word	0xffbf8000

08002ea8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002eb0:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <LL_FLASH_SetLatency+0x24>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f023 0207 	bic.w	r2, r3, #7
 8002eb8:	4904      	ldr	r1, [pc, #16]	; (8002ecc <LL_FLASH_SetLatency+0x24>)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	600b      	str	r3, [r1, #0]
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	40023c00 	.word	0x40023c00

08002ed0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8002ed4:	4b04      	ldr	r3, [pc, #16]	; (8002ee8 <LL_FLASH_GetLatency+0x18>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0307 	and.w	r3, r3, #7
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	40023c00 	.word	0x40023c00

08002eec <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8002ef4:	4b06      	ldr	r3, [pc, #24]	; (8002f10 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002efc:	4904      	ldr	r1, [pc, #16]	; (8002f10 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	600b      	str	r3, [r1, #0]
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	40007000 	.word	0x40007000

08002f14 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR    DBP       LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f18:	4b05      	ldr	r3, [pc, #20]	; (8002f30 <LL_PWR_EnableBkUpAccess+0x1c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a04      	ldr	r2, [pc, #16]	; (8002f30 <LL_PWR_EnableBkUpAccess+0x1c>)
 8002f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f22:	6013      	str	r3, [r2, #0]
}
 8002f24:	bf00      	nop
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	40007000 	.word	0x40007000

08002f34 <SystemClock_Config>:
 *********************************************************************************************************************/
static void SystemClock_Config (void);
/**********************************************************************************************************************
 * Definitions of private functions
 *********************************************************************************************************************/
static void SystemClock_Config (void) {
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
    /* LATENCY */
    LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8002f38:	2003      	movs	r0, #3
 8002f3a:	f7ff ffb5 	bl	8002ea8 <LL_FLASH_SetLatency>
    while (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_3) {
 8002f3e:	bf00      	nop
 8002f40:	f7ff ffc6 	bl	8002ed0 <LL_FLASH_GetLatency>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b03      	cmp	r3, #3
 8002f48:	d1fa      	bne.n	8002f40 <SystemClock_Config+0xc>
    }
    LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8002f4a:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8002f4e:	f7ff ffcd 	bl	8002eec <LL_PWR_SetRegulVoltageScaling>
    LL_RCC_HSI_SetCalibTrimming(16);
 8002f52:	2010      	movs	r0, #16
 8002f54:	f7ff feb2 	bl	8002cbc <LL_RCC_HSI_SetCalibTrimming>
    LL_RCC_HSI_Enable();
 8002f58:	f7ff fe8e 	bl	8002c78 <LL_RCC_HSI_Enable>

    /* LSI */
    LL_RCC_LSI_Enable();
 8002f5c:	f7ff fec4 	bl	8002ce8 <LL_RCC_LSI_Enable>
    while (LL_RCC_LSI_IsReady() != 1) {
 8002f60:	bf00      	nop
 8002f62:	f7ff fed1 	bl	8002d08 <LL_RCC_LSI_IsReady>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d1fa      	bne.n	8002f62 <SystemClock_Config+0x2e>
    }
    LL_PWR_EnableBkUpAccess();
 8002f6c:	f7ff ffd2 	bl	8002f14 <LL_PWR_EnableBkUpAccess>

    /* PLL CONFIG */
    while (LL_RCC_HSI_IsReady() != 1) {
 8002f70:	bf00      	nop
 8002f72:	f7ff fe91 	bl	8002c98 <LL_RCC_HSI_IsReady>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d1fa      	bne.n	8002f72 <SystemClock_Config+0x3e>
    }
    LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 100, LL_RCC_PLLP_DIV_2);
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	2264      	movs	r2, #100	; 0x64
 8002f80:	2108      	movs	r1, #8
 8002f82:	2000      	movs	r0, #0
 8002f84:	f7ff ff6a 	bl	8002e5c <LL_RCC_PLL_ConfigDomain_SYS>
    LL_RCC_PLL_Enable();
 8002f88:	f7ff ff44 	bl	8002e14 <LL_RCC_PLL_Enable>
    while (LL_RCC_PLL_IsReady() != 1) {
 8002f8c:	bf00      	nop
 8002f8e:	f7ff ff51 	bl	8002e34 <LL_RCC_PLL_IsReady>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d1fa      	bne.n	8002f8e <SystemClock_Config+0x5a>
    }
    LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8002f98:	2000      	movs	r0, #0
 8002f9a:	f7ff fee9 	bl	8002d70 <LL_RCC_SetAHBPrescaler>
    LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8002f9e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002fa2:	f7ff fef9 	bl	8002d98 <LL_RCC_SetAPB1Prescaler>
    LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	f7ff ff0a 	bl	8002dc0 <LL_RCC_SetAPB2Prescaler>
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8002fac:	2002      	movs	r0, #2
 8002fae:	f7ff febd 	bl	8002d2c <LL_RCC_SetSysClkSource>
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 8002fb2:	bf00      	nop
 8002fb4:	f7ff fece 	bl	8002d54 <LL_RCC_GetSysClkSource>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b08      	cmp	r3, #8
 8002fbc:	d1fa      	bne.n	8002fb4 <SystemClock_Config+0x80>
    }
    LL_SetSystemCoreClock(100000000);
 8002fbe:	4808      	ldr	r0, [pc, #32]	; (8002fe0 <SystemClock_Config+0xac>)
 8002fc0:	f003 fb44 	bl	800664c <LL_SetSystemCoreClock>
    if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK) {
 8002fc4:	200f      	movs	r0, #15
 8002fc6:	f001 fc11 	bl	80047ec <HAL_InitTick>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d002      	beq.n	8002fd6 <SystemClock_Config+0xa2>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fd0:	b672      	cpsid	i
}
 8002fd2:	bf00      	nop
        __disable_irq();
        while (1) {
 8002fd4:	e7fe      	b.n	8002fd4 <SystemClock_Config+0xa0>
        }
    }
    LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8002fd6:	2000      	movs	r0, #0
 8002fd8:	f7ff ff06 	bl	8002de8 <LL_RCC_SetTIMPrescaler>
}
 8002fdc:	bf00      	nop
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	05f5e100 	.word	0x05f5e100

08002fe4 <main>:

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/

int main (void) {
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
    HAL_Init();
 8002fe8:	f001 fd7c 	bl	8004ae4 <HAL_Init>
    SystemClock_Config();
 8002fec:	f7ff ffa2 	bl	8002f34 <SystemClock_Config>
    osKernelInitialize();
 8002ff0:	f003 fb80 	bl	80066f4 <osKernelInitialize>

    TIM_Timer13_init(); /* Timer for RTos task handling */
 8002ff4:	f001 f834 	bl	8004060 <TIM_Timer13_init>

    RTC_Driver_Init();
 8002ff8:	f000 fe8a 	bl	8003d10 <RTC_Driver_Init>

    /* API AND APIS */
    Heap_API_Init();
 8002ffc:	f7fd fe92 	bl	8000d24 <Heap_API_Init>
    Debug_API_Init();
 8003000:	f7fd fdf4 	bl	8000bec <Debug_API_Init>

    Modem_API_Init();
 8003004:	f7fe f940 	bl	8001288 <Modem_API_Init>
    SMS_APP_Init();
 8003008:	f000 fc70 	bl	80038ec <SMS_APP_Init>
    Network_APP_Init();
 800300c:	f000 f86c 	bl	80030e8 <Network_APP_Init>

    LED_APP_Init();
 8003010:	f7ff fda2 	bl	8002b58 <LED_APP_Init>
    CLI_APP_Init();
 8003014:	f7ff fc48 	bl	80028a8 <CLI_APP_Init>

    osKernelStart();
 8003018:	f003 fb90 	bl	800673c <osKernelStart>
    while (true) {
 800301c:	e7fe      	b.n	800301c <main+0x38>

0800301e <HAL_TIM_PeriodElapsedCallback>:
    }
}

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim) {
 800301e:	b580      	push	{r7, lr}
 8003020:	b082      	sub	sp, #8
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800302e:	d101      	bne.n	8003034 <HAL_TIM_PeriodElapsedCallback+0x16>
        HAL_IncTick();
 8003030:	f001 fd7a 	bl	8004b28 <HAL_IncTick>
    }
}
 8003034:	bf00      	nop
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <Network_APP_Thread>:

/**********************************************************************************************************************
 * Definitions of private functions
 *********************************************************************************************************************/

static void Network_APP_Thread (void *argument) {
 800303c:	b590      	push	{r4, r7, lr}
 800303e:	b085      	sub	sp, #20
 8003040:	af02      	add	r7, sp, #8
 8003042:	6078      	str	r0, [r7, #4]
    Modem_API_WaitFlag(eModemFlag_Setup, osWaitForever);
 8003044:	f04f 31ff 	mov.w	r1, #4294967295
 8003048:	2003      	movs	r0, #3
 800304a:	f7fe fbc3 	bl	80017d4 <Modem_API_WaitFlag>

    while (true) {
        /* TCP-IP */
        if (send_tcp_message == true) {
 800304e:	4b1c      	ldr	r3, [pc, #112]	; (80030c0 <Network_APP_Thread+0x84>)
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d018      	beq.n	8003088 <Network_APP_Thread+0x4c>
            Network_APP_SendTcp(tcp_message);
 8003056:	481b      	ldr	r0, [pc, #108]	; (80030c4 <Network_APP_Thread+0x88>)
 8003058:	f000 f9c8 	bl	80033ec <Network_APP_SendTcp>
            Modem_API_GetResponse(eModemApiCmd_OK, command_buffer);
 800305c:	491a      	ldr	r1, [pc, #104]	; (80030c8 <Network_APP_Thread+0x8c>)
 800305e:	2000      	movs	r0, #0
 8003060:	f7fe fa0e 	bl	8001480 <Modem_API_GetResponse>

            if (strcmp(command_buffer, "ERROR") == 0) {
 8003064:	4919      	ldr	r1, [pc, #100]	; (80030cc <Network_APP_Thread+0x90>)
 8003066:	4818      	ldr	r0, [pc, #96]	; (80030c8 <Network_APP_Thread+0x8c>)
 8003068:	f7fd f8da 	bl	8000220 <strcmp>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d105      	bne.n	800307e <Network_APP_Thread+0x42>
                Network_APP_CloseSocket(&tcp_socket);
 8003072:	4817      	ldr	r0, [pc, #92]	; (80030d0 <Network_APP_Thread+0x94>)
 8003074:	f000 f8fa 	bl	800326c <Network_APP_CloseSocket>
                send_tcp_message = false;
 8003078:	4b11      	ldr	r3, [pc, #68]	; (80030c0 <Network_APP_Thread+0x84>)
 800307a:	2200      	movs	r2, #0
 800307c:	701a      	strb	r2, [r3, #0]
            }
            osDelay(10 * SECOND_IN_MS);
 800307e:	f242 7010 	movw	r0, #10000	; 0x2710
 8003082:	f003 fc13 	bl	80068ac <osDelay>
 8003086:	e7e2      	b.n	800304e <Network_APP_Thread+0x12>
        } else {
            RTC_Driver_GetTime();
 8003088:	f000 fea6 	bl	8003dd8 <RTC_Driver_GetTime>

            /* NTP */
            NTP_API_GetNtp(&current_utc, &ntp_socket);
 800308c:	4911      	ldr	r1, [pc, #68]	; (80030d4 <Network_APP_Thread+0x98>)
 800308e:	4812      	ldr	r0, [pc, #72]	; (80030d8 <Network_APP_Thread+0x9c>)
 8003090:	f7ff f8e0 	bl	8002254 <NTP_API_GetNtp>
            debug("%s", ctime((const time_t* ) &current_utc));
 8003094:	4b11      	ldr	r3, [pc, #68]	; (80030dc <Network_APP_Thread+0xa0>)
 8003096:	681c      	ldr	r4, [r3, #0]
 8003098:	480f      	ldr	r0, [pc, #60]	; (80030d8 <Network_APP_Thread+0x9c>)
 800309a:	f008 f9c7 	bl	800b42c <ctime>
 800309e:	4603      	mov	r3, r0
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	4b0f      	ldr	r3, [pc, #60]	; (80030e0 <Network_APP_Thread+0xa4>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	2100      	movs	r1, #0
 80030a8:	4620      	mov	r0, r4
 80030aa:	f7fd fdbd 	bl	8000c28 <Debug_API_Print>

            /* UDP */
            Network_APP_SendUdp("Hello world!\n");
 80030ae:	480d      	ldr	r0, [pc, #52]	; (80030e4 <Network_APP_Thread+0xa8>)
 80030b0:	f000 f9e0 	bl	8003474 <Network_APP_SendUdp>
            osDelay(30 * SECOND_IN_MS);
 80030b4:	f247 5030 	movw	r0, #30000	; 0x7530
 80030b8:	f003 fbf8 	bl	80068ac <osDelay>
        if (send_tcp_message == true) {
 80030bc:	e7c7      	b.n	800304e <Network_APP_Thread+0x12>
 80030be:	bf00      	nop
 80030c0:	200009ac 	.word	0x200009ac
 80030c4:	200009f0 	.word	0x200009f0
 80030c8:	200009b0 	.word	0x200009b0
 80030cc:	0800e708 	.word	0x0800e708
 80030d0:	20000160 	.word	0x20000160
 80030d4:	200001b0 	.word	0x200001b0
 80030d8:	20000a90 	.word	0x20000a90
 80030dc:	2000015c 	.word	0x2000015c
 80030e0:	0800e710 	.word	0x0800e710
 80030e4:	0800e714 	.word	0x0800e714

080030e8 <Network_APP_Init>:
    }
}
/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/
bool Network_APP_Init (void) {
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
    /* THREAD */
    tcp_app_task_handle = osThreadNew(Network_APP_Thread, NULL, &network_task_attributes);
 80030ec:	4a08      	ldr	r2, [pc, #32]	; (8003110 <Network_APP_Init+0x28>)
 80030ee:	2100      	movs	r1, #0
 80030f0:	4808      	ldr	r0, [pc, #32]	; (8003114 <Network_APP_Init+0x2c>)
 80030f2:	f003 fb49 	bl	8006788 <osThreadNew>
 80030f6:	4603      	mov	r3, r0
 80030f8:	4a07      	ldr	r2, [pc, #28]	; (8003118 <Network_APP_Init+0x30>)
 80030fa:	6013      	str	r3, [r2, #0]
    if (tcp_app_task_handle == NULL) {
 80030fc:	4b06      	ldr	r3, [pc, #24]	; (8003118 <Network_APP_Init+0x30>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <Network_APP_Init+0x20>
        return false;
 8003104:	2300      	movs	r3, #0
 8003106:	e000      	b.n	800310a <Network_APP_Init+0x22>
    }
    return true;
 8003108:	2301      	movs	r3, #1
}
 800310a:	4618      	mov	r0, r3
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	0800eb00 	.word	0x0800eb00
 8003114:	0800303d 	.word	0x0800303d
 8003118:	200009a8 	.word	0x200009a8

0800311c <Network_APP_SetState>:

bool Network_APP_SetState (bool state, char *ip, uint16_t port, char *message) {
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	60b9      	str	r1, [r7, #8]
 8003124:	607b      	str	r3, [r7, #4]
 8003126:	4603      	mov	r3, r0
 8003128:	73fb      	strb	r3, [r7, #15]
 800312a:	4613      	mov	r3, r2
 800312c:	81bb      	strh	r3, [r7, #12]
    /* ASSERT */
    if (state == true && (ip == NULL || port == 0)) {
 800312e:	7bfb      	ldrb	r3, [r7, #15]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d007      	beq.n	8003144 <Network_APP_SetState+0x28>
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d002      	beq.n	8003140 <Network_APP_SetState+0x24>
 800313a:	89bb      	ldrh	r3, [r7, #12]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d101      	bne.n	8003144 <Network_APP_SetState+0x28>
        return false;
 8003140:	2300      	movs	r3, #0
 8003142:	e032      	b.n	80031aa <Network_APP_SetState+0x8e>
    }
    bool previous_state = send_tcp_message;
 8003144:	4b1b      	ldr	r3, [pc, #108]	; (80031b4 <Network_APP_SetState+0x98>)
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	75fb      	strb	r3, [r7, #23]
    send_tcp_message = false; // Don't send while changing state!
 800314a:	4b1a      	ldr	r3, [pc, #104]	; (80031b4 <Network_APP_SetState+0x98>)
 800314c:	2200      	movs	r2, #0
 800314e:	701a      	strb	r2, [r3, #0]

    /* COPY MESSAGE */
    if (state == true) {
 8003150:	7bfb      	ldrb	r3, [r7, #15]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00d      	beq.n	8003172 <Network_APP_SetState+0x56>
        tcp_socket.port = port;
 8003156:	4a18      	ldr	r2, [pc, #96]	; (80031b8 <Network_APP_SetState+0x9c>)
 8003158:	89bb      	ldrh	r3, [r7, #12]
 800315a:	8493      	strh	r3, [r2, #36]	; 0x24
        strncpy(tcp_socket.ip, ip, IP_LENGTH);
 800315c:	2220      	movs	r2, #32
 800315e:	68b9      	ldr	r1, [r7, #8]
 8003160:	4816      	ldr	r0, [pc, #88]	; (80031bc <Network_APP_SetState+0xa0>)
 8003162:	f008 fe10 	bl	800bd86 <strncpy>
        snprintf(tcp_message, SMS_LENGTH, "%s\n", message);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a15      	ldr	r2, [pc, #84]	; (80031c0 <Network_APP_SetState+0xa4>)
 800316a:	21a0      	movs	r1, #160	; 0xa0
 800316c:	4815      	ldr	r0, [pc, #84]	; (80031c4 <Network_APP_SetState+0xa8>)
 800316e:	f008 fd4d 	bl	800bc0c <sniprintf>
    }

    /* OPEN/CLOSE SOCKET */
    if (state == true && previous_state == false) {
 8003172:	7bfb      	ldrb	r3, [r7, #15]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d008      	beq.n	800318a <Network_APP_SetState+0x6e>
 8003178:	7dfb      	ldrb	r3, [r7, #23]
 800317a:	f083 0301 	eor.w	r3, r3, #1
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b00      	cmp	r3, #0
 8003182:	d002      	beq.n	800318a <Network_APP_SetState+0x6e>
        Network_APP_OpenSocket(&tcp_socket);
 8003184:	480c      	ldr	r0, [pc, #48]	; (80031b8 <Network_APP_SetState+0x9c>)
 8003186:	f000 f81f 	bl	80031c8 <Network_APP_OpenSocket>
    }
    if (state == false && previous_state == true) {
 800318a:	7bfb      	ldrb	r3, [r7, #15]
 800318c:	f083 0301 	eor.w	r3, r3, #1
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d005      	beq.n	80031a2 <Network_APP_SetState+0x86>
 8003196:	7dfb      	ldrb	r3, [r7, #23]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d002      	beq.n	80031a2 <Network_APP_SetState+0x86>
        Network_APP_CloseSocket(&tcp_socket);
 800319c:	4806      	ldr	r0, [pc, #24]	; (80031b8 <Network_APP_SetState+0x9c>)
 800319e:	f000 f865 	bl	800326c <Network_APP_CloseSocket>
    }
    send_tcp_message = state;
 80031a2:	4a04      	ldr	r2, [pc, #16]	; (80031b4 <Network_APP_SetState+0x98>)
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
 80031a6:	7013      	strb	r3, [r2, #0]
    return true;
 80031a8:	2301      	movs	r3, #1
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3718      	adds	r7, #24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	200009ac 	.word	0x200009ac
 80031b8:	20000160 	.word	0x20000160
 80031bc:	20000164 	.word	0x20000164
 80031c0:	0800e724 	.word	0x0800e724
 80031c4:	200009f0 	.word	0x200009f0

080031c8 <Network_APP_OpenSocket>:

/* SOCKET COMMANDS */
bool Network_APP_OpenSocket (sNetworkApp_Socket_t *socket) {
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af02      	add	r7, sp, #8
 80031ce:	6078      	str	r0, [r7, #4]
    Network_APP_AttachMT();
 80031d0:	f000 f8aa 	bl	8003328 <Network_APP_AttachMT>
    /* CREATE SOCKET */
    if (socket->open == false) {
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	785b      	ldrb	r3, [r3, #1]
 80031d8:	f083 0301 	eor.w	r3, r3, #1
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d038      	beq.n	8003254 <Network_APP_OpenSocket+0x8c>
        // REMOVE HARDCODE
        // SERVER LUT
        if (socket->type == eSocket_Tcp) {
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10b      	bne.n	8003202 <Network_APP_OpenSocket+0x3a>
            sprintf(command_buffer, "AT+ETL=1,%d,0,\"%s\",%d\n", DATA_ACC_ID, socket->ip, socket->port);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	1d1a      	adds	r2, r3, #4
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80031f2:	9300      	str	r3, [sp, #0]
 80031f4:	4613      	mov	r3, r2
 80031f6:	2200      	movs	r2, #0
 80031f8:	4919      	ldr	r1, [pc, #100]	; (8003260 <Network_APP_OpenSocket+0x98>)
 80031fa:	481a      	ldr	r0, [pc, #104]	; (8003264 <Network_APP_OpenSocket+0x9c>)
 80031fc:	f008 fd3a 	bl	800bc74 <siprintf>
 8003200:	e00a      	b.n	8003218 <Network_APP_OpenSocket+0x50>
        } else {
            sprintf(command_buffer, "AT+ETL=1,%d,1,\"%s\",%d\n", DATA_ACC_ID, socket->ip, socket->port);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	1d1a      	adds	r2, r3, #4
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800320a:	9300      	str	r3, [sp, #0]
 800320c:	4613      	mov	r3, r2
 800320e:	2200      	movs	r2, #0
 8003210:	4915      	ldr	r1, [pc, #84]	; (8003268 <Network_APP_OpenSocket+0xa0>)
 8003212:	4814      	ldr	r0, [pc, #80]	; (8003264 <Network_APP_OpenSocket+0x9c>)
 8003214:	f008 fd2e 	bl	800bc74 <siprintf>
        }

        socket->open = Modem_API_SendAndWait(command_buffer, 60 * SECOND_IN_MS, 5);
 8003218:	2205      	movs	r2, #5
 800321a:	f64e 2160 	movw	r1, #60000	; 0xea60
 800321e:	4811      	ldr	r0, [pc, #68]	; (8003264 <Network_APP_OpenSocket+0x9c>)
 8003220:	f7fe f96a 	bl	80014f8 <Modem_API_SendAndWait>
 8003224:	4603      	mov	r3, r0
 8003226:	461a      	mov	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	705a      	strb	r2, [r3, #1]
        if (socket->open == false) {
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	785b      	ldrb	r3, [r3, #1]
 8003230:	f083 0301 	eor.w	r3, r3, #1
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <Network_APP_OpenSocket+0x76>
            Network_APP_DetachMT();
 800323a:	f000 f897 	bl	800336c <Network_APP_DetachMT>
        }
        /* GET SOCKET ID */
        Modem_API_GetResponse(eModemApiCmd_ETL, command_buffer);
 800323e:	4909      	ldr	r1, [pc, #36]	; (8003264 <Network_APP_OpenSocket+0x9c>)
 8003240:	2012      	movs	r0, #18
 8003242:	f7fe f91d 	bl	8001480 <Modem_API_GetResponse>
        socket->id = atol(command_buffer);
 8003246:	4807      	ldr	r0, [pc, #28]	; (8003264 <Network_APP_OpenSocket+0x9c>)
 8003248:	f008 f8e3 	bl	800b412 <atol>
 800324c:	4603      	mov	r3, r0
 800324e:	b29a      	uxth	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	805a      	strh	r2, [r3, #2]
    }
    return socket->open;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	785b      	ldrb	r3, [r3, #1]
}
 8003258:	4618      	mov	r0, r3
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	0800e728 	.word	0x0800e728
 8003264:	200009b0 	.word	0x200009b0
 8003268:	0800e740 	.word	0x0800e740

0800326c <Network_APP_CloseSocket>:
bool Network_APP_CloseSocket (sNetworkApp_Socket_t *socket) {
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
    /* CLOSE SOCKET */
    if (socket->open == true) {
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	785b      	ldrb	r3, [r3, #1]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d01a      	beq.n	80032b2 <Network_APP_CloseSocket+0x46>
        sprintf(command_buffer, "AT+ETL=0,%d\n", socket->id);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	885b      	ldrh	r3, [r3, #2]
 8003280:	461a      	mov	r2, r3
 8003282:	4915      	ldr	r1, [pc, #84]	; (80032d8 <Network_APP_CloseSocket+0x6c>)
 8003284:	4815      	ldr	r0, [pc, #84]	; (80032dc <Network_APP_CloseSocket+0x70>)
 8003286:	f008 fcf5 	bl	800bc74 <siprintf>
        socket->open = !Modem_API_SendAndWait(command_buffer, 20 * SECOND_IN_MS, 5);
 800328a:	2205      	movs	r2, #5
 800328c:	f644 6120 	movw	r1, #20000	; 0x4e20
 8003290:	4812      	ldr	r0, [pc, #72]	; (80032dc <Network_APP_CloseSocket+0x70>)
 8003292:	f7fe f931 	bl	80014f8 <Modem_API_SendAndWait>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	bf14      	ite	ne
 800329c:	2301      	movne	r3, #1
 800329e:	2300      	moveq	r3, #0
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	f083 0301 	eor.w	r3, r3, #1
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	705a      	strb	r2, [r3, #1]
    }
    Network_APP_DetachMT();
 80032b2:	f000 f85b 	bl	800336c <Network_APP_DetachMT>
    return !socket->open;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	785b      	ldrb	r3, [r3, #1]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	bf14      	ite	ne
 80032be:	2301      	movne	r3, #1
 80032c0:	2300      	moveq	r3, #0
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	f083 0301 	eor.w	r3, r3, #1
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	b2db      	uxtb	r3, r3
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	0800e758 	.word	0x0800e758
 80032dc:	200009b0 	.word	0x200009b0

080032e0 <Network_APP_ReadSocket>:
bool Network_APP_ReadSocket (void) {
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
    char id[3] = {0};
 80032e6:	4b0d      	ldr	r3, [pc, #52]	; (800331c <Network_APP_ReadSocket+0x3c>)
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	80bb      	strh	r3, [r7, #4]
 80032ec:	2300      	movs	r3, #0
 80032ee:	71bb      	strb	r3, [r7, #6]
    Modem_API_GetResponse(eModemApiCmd_ESOCK, id);
 80032f0:	1d3b      	adds	r3, r7, #4
 80032f2:	4619      	mov	r1, r3
 80032f4:	2014      	movs	r0, #20
 80032f6:	f7fe f8c3 	bl	8001480 <Modem_API_GetResponse>
    sprintf(command_buffer, "AT+EIPRECV=%s\n", id);
 80032fa:	1d3b      	adds	r3, r7, #4
 80032fc:	461a      	mov	r2, r3
 80032fe:	4908      	ldr	r1, [pc, #32]	; (8003320 <Network_APP_ReadSocket+0x40>)
 8003300:	4808      	ldr	r0, [pc, #32]	; (8003324 <Network_APP_ReadSocket+0x44>)
 8003302:	f008 fcb7 	bl	800bc74 <siprintf>
    Modem_API_SendAndWait(command_buffer, SECOND_IN_MS, 1);
 8003306:	2201      	movs	r2, #1
 8003308:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800330c:	4805      	ldr	r0, [pc, #20]	; (8003324 <Network_APP_ReadSocket+0x44>)
 800330e:	f7fe f8f3 	bl	80014f8 <Modem_API_SendAndWait>
    return true;
 8003312:	2301      	movs	r3, #1
}
 8003314:	4618      	mov	r0, r3
 8003316:	3708      	adds	r7, #8
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	0800e778 	.word	0x0800e778
 8003320:	0800e768 	.word	0x0800e768
 8003324:	200009b0 	.word	0x200009b0

08003328 <Network_APP_AttachMT>:
bool Network_APP_AttachMT (void) {
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
    if (Modem_API_GetState(eModemFlag_PdpAttach) != eModemApiState_Ready) {
 800332c:	200b      	movs	r0, #11
 800332e:	f7fe faaf 	bl	8001890 <Modem_API_GetState>
 8003332:	4603      	mov	r3, r0
 8003334:	2b01      	cmp	r3, #1
 8003336:	d012      	beq.n	800335e <Network_APP_AttachMT+0x36>
        sprintf(command_buffer, "AT+CGATT=1\n");
 8003338:	490a      	ldr	r1, [pc, #40]	; (8003364 <Network_APP_AttachMT+0x3c>)
 800333a:	480b      	ldr	r0, [pc, #44]	; (8003368 <Network_APP_AttachMT+0x40>)
 800333c:	f008 fc9a 	bl	800bc74 <siprintf>
        if (SMS_APP_SendAndSetFlag(command_buffer, eModemFlag_PdpAttach, eModemApiState_Ready, DEFAULT_WAIT_TIME) == false) {
 8003340:	f241 3388 	movw	r3, #5000	; 0x1388
 8003344:	2201      	movs	r2, #1
 8003346:	210b      	movs	r1, #11
 8003348:	4807      	ldr	r0, [pc, #28]	; (8003368 <Network_APP_AttachMT+0x40>)
 800334a:	f7fe fa7f 	bl	800184c <SMS_APP_SendAndSetFlag>
 800334e:	4603      	mov	r3, r0
 8003350:	f083 0301 	eor.w	r3, r3, #1
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <Network_APP_AttachMT+0x36>
            return false;
 800335a:	2300      	movs	r3, #0
 800335c:	e000      	b.n	8003360 <Network_APP_AttachMT+0x38>
        }
    }
    return true;
 800335e:	2301      	movs	r3, #1
}
 8003360:	4618      	mov	r0, r3
 8003362:	bd80      	pop	{r7, pc}
 8003364:	0800e77c 	.word	0x0800e77c
 8003368:	200009b0 	.word	0x200009b0

0800336c <Network_APP_DetachMT>:
bool Network_APP_DetachMT (void) {
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
    if (tcp_socket.open == false || udp_socket.open == false || ntp_socket.open == false) {
 8003370:	4b19      	ldr	r3, [pc, #100]	; (80033d8 <Network_APP_DetachMT+0x6c>)
 8003372:	785b      	ldrb	r3, [r3, #1]
 8003374:	f083 0301 	eor.w	r3, r3, #1
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10d      	bne.n	800339a <Network_APP_DetachMT+0x2e>
 800337e:	4b17      	ldr	r3, [pc, #92]	; (80033dc <Network_APP_DetachMT+0x70>)
 8003380:	785b      	ldrb	r3, [r3, #1]
 8003382:	f083 0301 	eor.w	r3, r3, #1
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	d106      	bne.n	800339a <Network_APP_DetachMT+0x2e>
 800338c:	4b14      	ldr	r3, [pc, #80]	; (80033e0 <Network_APP_DetachMT+0x74>)
 800338e:	785b      	ldrb	r3, [r3, #1]
 8003390:	f083 0301 	eor.w	r3, r3, #1
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <Network_APP_DetachMT+0x32>
        return false;
 800339a:	2300      	movs	r3, #0
 800339c:	e019      	b.n	80033d2 <Network_APP_DetachMT+0x66>
    }

    if (Modem_API_GetState(eModemFlag_PdpAttach) == eModemApiState_Ready) {
 800339e:	200b      	movs	r0, #11
 80033a0:	f7fe fa76 	bl	8001890 <Modem_API_GetState>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d112      	bne.n	80033d0 <Network_APP_DetachMT+0x64>
        sprintf(command_buffer, "AT+CGATT=0\n");
 80033aa:	490e      	ldr	r1, [pc, #56]	; (80033e4 <Network_APP_DetachMT+0x78>)
 80033ac:	480e      	ldr	r0, [pc, #56]	; (80033e8 <Network_APP_DetachMT+0x7c>)
 80033ae:	f008 fc61 	bl	800bc74 <siprintf>
        if (SMS_APP_SendAndSetFlag(command_buffer, eModemFlag_PdpAttach, eModemApiState_NotReady, DEFAULT_WAIT_TIME) == false) {
 80033b2:	f241 3388 	movw	r3, #5000	; 0x1388
 80033b6:	2202      	movs	r2, #2
 80033b8:	210b      	movs	r1, #11
 80033ba:	480b      	ldr	r0, [pc, #44]	; (80033e8 <Network_APP_DetachMT+0x7c>)
 80033bc:	f7fe fa46 	bl	800184c <SMS_APP_SendAndSetFlag>
 80033c0:	4603      	mov	r3, r0
 80033c2:	f083 0301 	eor.w	r3, r3, #1
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <Network_APP_DetachMT+0x64>
            return false;
 80033cc:	2300      	movs	r3, #0
 80033ce:	e000      	b.n	80033d2 <Network_APP_DetachMT+0x66>
        }
    }
    return true;
 80033d0:	2301      	movs	r3, #1
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	20000160 	.word	0x20000160
 80033dc:	20000188 	.word	0x20000188
 80033e0:	200001b0 	.word	0x200001b0
 80033e4:	0800e788 	.word	0x0800e788
 80033e8:	200009b0 	.word	0x200009b0

080033ec <Network_APP_SendTcp>:

bool Network_APP_SendTcp (char *message) {
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
    /* ASSERT */
    if (message == NULL) {
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <Network_APP_SendTcp+0x12>
        return false;
 80033fa:	2300      	movs	r3, #0
 80033fc:	e031      	b.n	8003462 <Network_APP_SendTcp+0x76>
    }

    /* SEND */
    char *hex_buffer = NULL;
 80033fe:	2300      	movs	r3, #0
 8003400:	60bb      	str	r3, [r7, #8]
    if (StrToHex(message, 0, &hex_buffer) == false) {
 8003402:	f107 0308 	add.w	r3, r7, #8
 8003406:	461a      	mov	r2, r3
 8003408:	2100      	movs	r1, #0
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f007 fe7e 	bl	800b10c <StrToHex>
 8003410:	4603      	mov	r3, r0
 8003412:	f083 0301 	eor.w	r3, r3, #1
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <Network_APP_SendTcp+0x34>
        return false;
 800341c:	2300      	movs	r3, #0
 800341e:	e020      	b.n	8003462 <Network_APP_SendTcp+0x76>
    }
    char *hex_message = Heap_API_Allocate(strlen(hex_buffer) + CMD_STRING_LENGTH, sizeof(char));
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	4618      	mov	r0, r3
 8003424:	f7fc ff06 	bl	8000234 <strlen>
 8003428:	4603      	mov	r3, r0
 800342a:	3340      	adds	r3, #64	; 0x40
 800342c:	2101      	movs	r1, #1
 800342e:	4618      	mov	r0, r3
 8003430:	f7fd fc9a 	bl	8000d68 <Heap_API_Allocate>
 8003434:	60f8      	str	r0, [r7, #12]
    sprintf(hex_message, "AT+EIPSEND=%d,\"%s\"\n", tcp_socket.id, hex_buffer);
 8003436:	4b0d      	ldr	r3, [pc, #52]	; (800346c <Network_APP_SendTcp+0x80>)
 8003438:	885b      	ldrh	r3, [r3, #2]
 800343a:	461a      	mov	r2, r3
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	490c      	ldr	r1, [pc, #48]	; (8003470 <Network_APP_SendTcp+0x84>)
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f008 fc17 	bl	800bc74 <siprintf>
    Modem_API_SendAndWait(hex_message, DEFAULT_WAIT_TIME, 5);
 8003446:	2205      	movs	r2, #5
 8003448:	f241 3188 	movw	r1, #5000	; 0x1388
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f7fe f853 	bl	80014f8 <Modem_API_SendAndWait>

    /* FINISH */
    Heap_API_Free(hex_message);
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f7fd fcee 	bl	8000e34 <Heap_API_Free>
    Heap_API_Free(hex_buffer);
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	4618      	mov	r0, r3
 800345c:	f7fd fcea 	bl	8000e34 <Heap_API_Free>

    return true;
 8003460:	2301      	movs	r3, #1
}
 8003462:	4618      	mov	r0, r3
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	20000160 	.word	0x20000160
 8003470:	0800e794 	.word	0x0800e794

08003474 <Network_APP_SendUdp>:

bool Network_APP_SendUdp (char *message) {
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
    Network_APP_OpenSocket(&udp_socket);
 800347c:	481d      	ldr	r0, [pc, #116]	; (80034f4 <Network_APP_SendUdp+0x80>)
 800347e:	f7ff fea3 	bl	80031c8 <Network_APP_OpenSocket>
    /* SEND */
    char *hex_buffer = NULL;
 8003482:	2300      	movs	r3, #0
 8003484:	60bb      	str	r3, [r7, #8]
    if (StrToHex(message, 0, &hex_buffer) == false) {
 8003486:	f107 0308 	add.w	r3, r7, #8
 800348a:	461a      	mov	r2, r3
 800348c:	2100      	movs	r1, #0
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f007 fe3c 	bl	800b10c <StrToHex>
 8003494:	4603      	mov	r3, r0
 8003496:	f083 0301 	eor.w	r3, r3, #1
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <Network_APP_SendUdp+0x30>
        return false;
 80034a0:	2300      	movs	r3, #0
 80034a2:	e023      	b.n	80034ec <Network_APP_SendUdp+0x78>
    }
    char *hex_message = Heap_API_Allocate(strlen(hex_buffer) + CMD_STRING_LENGTH, sizeof(char));
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7fc fec4 	bl	8000234 <strlen>
 80034ac:	4603      	mov	r3, r0
 80034ae:	3340      	adds	r3, #64	; 0x40
 80034b0:	2101      	movs	r1, #1
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7fd fc58 	bl	8000d68 <Heap_API_Allocate>
 80034b8:	60f8      	str	r0, [r7, #12]
    sprintf(hex_message, "AT+EIPSEND=%d,\"%s\"\n", udp_socket.id, hex_buffer);
 80034ba:	4b0e      	ldr	r3, [pc, #56]	; (80034f4 <Network_APP_SendUdp+0x80>)
 80034bc:	885b      	ldrh	r3, [r3, #2]
 80034be:	461a      	mov	r2, r3
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	490d      	ldr	r1, [pc, #52]	; (80034f8 <Network_APP_SendUdp+0x84>)
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f008 fbd5 	bl	800bc74 <siprintf>
    Modem_API_SendAndWait(hex_message, DEFAULT_WAIT_TIME, 5);
 80034ca:	2205      	movs	r2, #5
 80034cc:	f241 3188 	movw	r1, #5000	; 0x1388
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f7fe f811 	bl	80014f8 <Modem_API_SendAndWait>
    /* FINISH */
    Heap_API_Free(hex_message);
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f7fd fcac 	bl	8000e34 <Heap_API_Free>
    Heap_API_Free(hex_buffer);
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fd fca8 	bl	8000e34 <Heap_API_Free>

    Network_APP_CloseSocket(&udp_socket);
 80034e4:	4803      	ldr	r0, [pc, #12]	; (80034f4 <Network_APP_SendUdp+0x80>)
 80034e6:	f7ff fec1 	bl	800326c <Network_APP_CloseSocket>
    return true;
 80034ea:	2301      	movs	r3, #1
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	20000188 	.word	0x20000188
 80034f8:	0800e794 	.word	0x0800e794

080034fc <SMS_APP_Setup>:

/**********************************************************************************************************************
 * Definitions of private functions
 *********************************************************************************************************************/

static bool SMS_APP_Setup (void) {
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af02      	add	r7, sp, #8
    /* ECHO OFF */
    if (Modem_API_GetState(eModemFlag_Echo) != eModemApiState_OFF &&
 8003502:	2002      	movs	r0, #2
 8003504:	f7fe f9c4 	bl	8001890 <Modem_API_GetState>
 8003508:	4603      	mov	r3, r0
 800350a:	2b06      	cmp	r3, #6
 800350c:	d00e      	beq.n	800352c <SMS_APP_Setup+0x30>
        SMS_APP_SendAndSetFlag("ATE0\n", eModemFlag_Echo, eModemApiState_OFF, DEFAULT_WAIT_TIME) == false) {
 800350e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003512:	2206      	movs	r2, #6
 8003514:	2102      	movs	r1, #2
 8003516:	4841      	ldr	r0, [pc, #260]	; (800361c <SMS_APP_Setup+0x120>)
 8003518:	f7fe f998 	bl	800184c <SMS_APP_SendAndSetFlag>
 800351c:	4603      	mov	r3, r0
 800351e:	f083 0301 	eor.w	r3, r3, #1
 8003522:	b2db      	uxtb	r3, r3
    if (Modem_API_GetState(eModemFlag_Echo) != eModemApiState_OFF &&
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <SMS_APP_Setup+0x30>
        return false;
 8003528:	2300      	movs	r3, #0
 800352a:	e073      	b.n	8003614 <SMS_APP_Setup+0x118>
    }
    /* TEXT MODE */
    if (Modem_API_GetState(eModemFlag_TextMode) != eModemApiState_Ready &&
 800352c:	2006      	movs	r0, #6
 800352e:	f7fe f9af 	bl	8001890 <Modem_API_GetState>
 8003532:	4603      	mov	r3, r0
 8003534:	2b01      	cmp	r3, #1
 8003536:	d00e      	beq.n	8003556 <SMS_APP_Setup+0x5a>
        SMS_APP_SendAndSetFlag("AT+CMGF=1\n", eModemFlag_TextMode, eModemApiState_Ready, DEFAULT_WAIT_TIME) == false) {
 8003538:	f241 3388 	movw	r3, #5000	; 0x1388
 800353c:	2201      	movs	r2, #1
 800353e:	2106      	movs	r1, #6
 8003540:	4837      	ldr	r0, [pc, #220]	; (8003620 <SMS_APP_Setup+0x124>)
 8003542:	f7fe f983 	bl	800184c <SMS_APP_SendAndSetFlag>
 8003546:	4603      	mov	r3, r0
 8003548:	f083 0301 	eor.w	r3, r3, #1
 800354c:	b2db      	uxtb	r3, r3
    if (Modem_API_GetState(eModemFlag_TextMode) != eModemApiState_Ready &&
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <SMS_APP_Setup+0x5a>
        return false;
 8003552:	2300      	movs	r3, #0
 8003554:	e05e      	b.n	8003614 <SMS_APP_Setup+0x118>
    }
    /* SMS STORAGE SETUP */
    if (Modem_API_GetState(eModemFlag_SmsStore) != eModemApiState_Ready) {
 8003556:	2007      	movs	r0, #7
 8003558:	f7fe f99a 	bl	8001890 <Modem_API_GetState>
 800355c:	4603      	mov	r3, r0
 800355e:	2b01      	cmp	r3, #1
 8003560:	d01d      	beq.n	800359e <SMS_APP_Setup+0xa2>
        /* SMS store location SIM */
        if (SMS_APP_SendAndSetFlag("AT+CPMS=\"SM\",\"SM\",\"SM\"\n", eModemFlag_SmsStore, eModemApiState_NotReady, DEFAULT_WAIT_TIME) == false) {
 8003562:	f241 3388 	movw	r3, #5000	; 0x1388
 8003566:	2202      	movs	r2, #2
 8003568:	2107      	movs	r1, #7
 800356a:	482e      	ldr	r0, [pc, #184]	; (8003624 <SMS_APP_Setup+0x128>)
 800356c:	f7fe f96e 	bl	800184c <SMS_APP_SendAndSetFlag>
 8003570:	4603      	mov	r3, r0
 8003572:	f083 0301 	eor.w	r3, r3, #1
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <SMS_APP_Setup+0x84>
            return false;
 800357c:	2300      	movs	r3, #0
 800357e:	e049      	b.n	8003614 <SMS_APP_Setup+0x118>
        }
        /* Notify about new SMS id */
        if (SMS_APP_SendAndSetFlag("AT+CNMI=2,1,0,1,0\n", eModemFlag_SmsStore, eModemApiState_Ready, DEFAULT_WAIT_TIME) == false) {
 8003580:	f241 3388 	movw	r3, #5000	; 0x1388
 8003584:	2201      	movs	r2, #1
 8003586:	2107      	movs	r1, #7
 8003588:	4827      	ldr	r0, [pc, #156]	; (8003628 <SMS_APP_Setup+0x12c>)
 800358a:	f7fe f95f 	bl	800184c <SMS_APP_SendAndSetFlag>
 800358e:	4603      	mov	r3, r0
 8003590:	f083 0301 	eor.w	r3, r3, #1
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <SMS_APP_Setup+0xa2>
            return false;
 800359a:	2300      	movs	r3, #0
 800359c:	e03a      	b.n	8003614 <SMS_APP_Setup+0x118>
        }
    }

    /* SET PDP CONTEXT */
    if (Modem_API_GetState(eModemFlag_PdpContext) != eModemApiState_Ready) {
 800359e:	200a      	movs	r0, #10
 80035a0:	f7fe f976 	bl	8001890 <Modem_API_GetState>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d016      	beq.n	80035d8 <SMS_APP_Setup+0xdc>
        sprintf(buffer, "AT+CGDCONT=%d,\"%s\",\"%s\"\n", CID, PDP_TYPE, APN);
 80035aa:	4b20      	ldr	r3, [pc, #128]	; (800362c <SMS_APP_Setup+0x130>)
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	4b20      	ldr	r3, [pc, #128]	; (8003630 <SMS_APP_Setup+0x134>)
 80035b0:	2201      	movs	r2, #1
 80035b2:	4920      	ldr	r1, [pc, #128]	; (8003634 <SMS_APP_Setup+0x138>)
 80035b4:	4820      	ldr	r0, [pc, #128]	; (8003638 <SMS_APP_Setup+0x13c>)
 80035b6:	f008 fb5d 	bl	800bc74 <siprintf>
        if (SMS_APP_SendAndSetFlag(buffer, eModemFlag_PdpContext, eModemApiState_Ready, DEFAULT_WAIT_TIME) == false) {
 80035ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80035be:	2201      	movs	r2, #1
 80035c0:	210a      	movs	r1, #10
 80035c2:	481d      	ldr	r0, [pc, #116]	; (8003638 <SMS_APP_Setup+0x13c>)
 80035c4:	f7fe f942 	bl	800184c <SMS_APP_SendAndSetFlag>
 80035c8:	4603      	mov	r3, r0
 80035ca:	f083 0301 	eor.w	r3, r3, #1
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <SMS_APP_Setup+0xdc>
            return false;
 80035d4:	2300      	movs	r3, #0
 80035d6:	e01d      	b.n	8003614 <SMS_APP_Setup+0x118>
        }
    }
    /* SET TCP CONTEXT */
    if (Modem_API_GetState(eModemFlag_TcpContext) != eModemApiState_Ready) {
 80035d8:	200d      	movs	r0, #13
 80035da:	f7fe f959 	bl	8001890 <Modem_API_GetState>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d016      	beq.n	8003612 <SMS_APP_Setup+0x116>
        sprintf(buffer, "AT+EGDCONT=%d,\"%s\",\"%s\"\n", DATA_ACC_ID, PDP_TYPE, APN);
 80035e4:	4b11      	ldr	r3, [pc, #68]	; (800362c <SMS_APP_Setup+0x130>)
 80035e6:	9300      	str	r3, [sp, #0]
 80035e8:	4b11      	ldr	r3, [pc, #68]	; (8003630 <SMS_APP_Setup+0x134>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	4913      	ldr	r1, [pc, #76]	; (800363c <SMS_APP_Setup+0x140>)
 80035ee:	4812      	ldr	r0, [pc, #72]	; (8003638 <SMS_APP_Setup+0x13c>)
 80035f0:	f008 fb40 	bl	800bc74 <siprintf>
        if (SMS_APP_SendAndSetFlag(buffer, eModemFlag_TcpContext, eModemApiState_Ready, DEFAULT_WAIT_TIME) == false) {
 80035f4:	f241 3388 	movw	r3, #5000	; 0x1388
 80035f8:	2201      	movs	r2, #1
 80035fa:	210d      	movs	r1, #13
 80035fc:	480e      	ldr	r0, [pc, #56]	; (8003638 <SMS_APP_Setup+0x13c>)
 80035fe:	f7fe f925 	bl	800184c <SMS_APP_SendAndSetFlag>
 8003602:	4603      	mov	r3, r0
 8003604:	f083 0301 	eor.w	r3, r3, #1
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <SMS_APP_Setup+0x116>
            return false;
 800360e:	2300      	movs	r3, #0
 8003610:	e000      	b.n	8003614 <SMS_APP_Setup+0x118>
        }
    }
//    Modem_API_SetFlag(eModemFlag_Setup, eModemApiState_Ready);
    return true;
 8003612:	2301      	movs	r3, #1
}
 8003614:	4618      	mov	r0, r3
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	0800e7bc 	.word	0x0800e7bc
 8003620:	0800e7c4 	.word	0x0800e7c4
 8003624:	0800e7d0 	.word	0x0800e7d0
 8003628:	0800e7e8 	.word	0x0800e7e8
 800362c:	0800e81c 	.word	0x0800e81c
 8003630:	0800e7fc 	.word	0x0800e7fc
 8003634:	0800e800 	.word	0x0800e800
 8003638:	20000ab0 	.word	0x20000ab0
 800363c:	0800e824 	.word	0x0800e824

08003640 <SMS_APP_ReadSms>:
    sprintf(buffer, "AT+CMGS=\"%s\"\r", number);
    Modem_API_Send(buffer);
    sprintf(buffer, "%s%c\n", message, 26);
    return Modem_API_SendAndWait(buffer, 60 * SECOND_IN_MS, 1);
}
static bool SMS_APP_ReadSms (void) {
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
    char id[3] = {0};
 8003646:	4b13      	ldr	r3, [pc, #76]	; (8003694 <SMS_APP_ReadSms+0x54>)
 8003648:	881b      	ldrh	r3, [r3, #0]
 800364a:	80bb      	strh	r3, [r7, #4]
 800364c:	2300      	movs	r3, #0
 800364e:	71bb      	strb	r3, [r7, #6]
    Modem_API_GetResponse(eModemApiCmd_CMTI, (char*) id);
 8003650:	1d3b      	adds	r3, r7, #4
 8003652:	4619      	mov	r1, r3
 8003654:	2008      	movs	r0, #8
 8003656:	f7fd ff13 	bl	8001480 <Modem_API_GetResponse>
    sprintf(buffer, "AT+CMGR=%s\n", id);
 800365a:	1d3b      	adds	r3, r7, #4
 800365c:	461a      	mov	r2, r3
 800365e:	490e      	ldr	r1, [pc, #56]	; (8003698 <SMS_APP_ReadSms+0x58>)
 8003660:	480e      	ldr	r0, [pc, #56]	; (800369c <SMS_APP_ReadSms+0x5c>)
 8003662:	f008 fb07 	bl	800bc74 <siprintf>
    Modem_API_SendAndWait(buffer, SECOND_IN_MS, 1);
 8003666:	2201      	movs	r2, #1
 8003668:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800366c:	480b      	ldr	r0, [pc, #44]	; (800369c <SMS_APP_ReadSms+0x5c>)
 800366e:	f7fd ff43 	bl	80014f8 <Modem_API_SendAndWait>
    sprintf(buffer, "AT+CMGD=%s\n", id);
 8003672:	1d3b      	adds	r3, r7, #4
 8003674:	461a      	mov	r2, r3
 8003676:	490a      	ldr	r1, [pc, #40]	; (80036a0 <SMS_APP_ReadSms+0x60>)
 8003678:	4808      	ldr	r0, [pc, #32]	; (800369c <SMS_APP_ReadSms+0x5c>)
 800367a:	f008 fafb 	bl	800bc74 <siprintf>
    Modem_API_SendAndWait(buffer, SECOND_IN_MS, 1);
 800367e:	2201      	movs	r2, #1
 8003680:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003684:	4805      	ldr	r0, [pc, #20]	; (800369c <SMS_APP_ReadSms+0x5c>)
 8003686:	f7fd ff37 	bl	80014f8 <Modem_API_SendAndWait>
    return true;
 800368a:	2301      	movs	r3, #1
}
 800368c:	4618      	mov	r0, r3
 800368e:	3708      	adds	r7, #8
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	0800e870 	.word	0x0800e870
 8003698:	0800e858 	.word	0x0800e858
 800369c:	20000ab0 	.word	0x20000ab0
 80036a0:	0800e864 	.word	0x0800e864

080036a4 <SMS_APP_ParseSms>:
static bool SMS_APP_ParseSms (void) {
 80036a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80036a8:	b089      	sub	sp, #36	; 0x24
 80036aa:	af02      	add	r7, sp, #8
 80036ac:	466b      	mov	r3, sp
 80036ae:	461e      	mov	r6, r3
    strncpy(buffer, "", SMS_LENGTH);
 80036b0:	22a0      	movs	r2, #160	; 0xa0
 80036b2:	4954      	ldr	r1, [pc, #336]	; (8003804 <SMS_APP_ParseSms+0x160>)
 80036b4:	4854      	ldr	r0, [pc, #336]	; (8003808 <SMS_APP_ParseSms+0x164>)
 80036b6:	f008 fb66 	bl	800bd86 <strncpy>
    Modem_API_GetResponse(eModemApiCmd_CMTI, buffer);
 80036ba:	4953      	ldr	r1, [pc, #332]	; (8003808 <SMS_APP_ParseSms+0x164>)
 80036bc:	2008      	movs	r0, #8
 80036be:	f7fd fedf 	bl	8001480 <Modem_API_GetResponse>

    uint16_t sms_array_size = StrCountChars(buffer, SMS_LENGTH, "\n");
 80036c2:	4a52      	ldr	r2, [pc, #328]	; (800380c <SMS_APP_ParseSms+0x168>)
 80036c4:	21a0      	movs	r1, #160	; 0xa0
 80036c6:	4850      	ldr	r0, [pc, #320]	; (8003808 <SMS_APP_ParseSms+0x164>)
 80036c8:	f007 fc10 	bl	800aeec <StrCountChars>
 80036cc:	4603      	mov	r3, r0
 80036ce:	81fb      	strh	r3, [r7, #14]
    char *sms_array[sms_array_size];
 80036d0:	89f9      	ldrh	r1, [r7, #14]
 80036d2:	460b      	mov	r3, r1
 80036d4:	3b01      	subs	r3, #1
 80036d6:	60bb      	str	r3, [r7, #8]
 80036d8:	b28b      	uxth	r3, r1
 80036da:	2200      	movs	r2, #0
 80036dc:	4698      	mov	r8, r3
 80036de:	4691      	mov	r9, r2
 80036e0:	f04f 0200 	mov.w	r2, #0
 80036e4:	f04f 0300 	mov.w	r3, #0
 80036e8:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80036ec:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80036f0:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80036f4:	b28b      	uxth	r3, r1
 80036f6:	2200      	movs	r2, #0
 80036f8:	461c      	mov	r4, r3
 80036fa:	4615      	mov	r5, r2
 80036fc:	f04f 0200 	mov.w	r2, #0
 8003700:	f04f 0300 	mov.w	r3, #0
 8003704:	016b      	lsls	r3, r5, #5
 8003706:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800370a:	0162      	lsls	r2, r4, #5
 800370c:	460b      	mov	r3, r1
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	3307      	adds	r3, #7
 8003712:	08db      	lsrs	r3, r3, #3
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	ebad 0d03 	sub.w	sp, sp, r3
 800371a:	ab02      	add	r3, sp, #8
 800371c:	3303      	adds	r3, #3
 800371e:	089b      	lsrs	r3, r3, #2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	607b      	str	r3, [r7, #4]
    char *token = strtok(buffer, "\n");
 8003724:	4939      	ldr	r1, [pc, #228]	; (800380c <SMS_APP_ParseSms+0x168>)
 8003726:	4838      	ldr	r0, [pc, #224]	; (8003808 <SMS_APP_ParseSms+0x164>)
 8003728:	f008 fb56 	bl	800bdd8 <strtok>
 800372c:	6138      	str	r0, [r7, #16]
    uint16_t token_length = 0;
 800372e:	2300      	movs	r3, #0
 8003730:	807b      	strh	r3, [r7, #2]
    for (uint16_t i = 0; i < sms_array_size; i++) {
 8003732:	2300      	movs	r3, #0
 8003734:	82bb      	strh	r3, [r7, #20]
 8003736:	e020      	b.n	800377a <SMS_APP_ParseSms+0xd6>
        token_length = strlen(token);
 8003738:	6938      	ldr	r0, [r7, #16]
 800373a:	f7fc fd7b 	bl	8000234 <strlen>
 800373e:	4603      	mov	r3, r0
 8003740:	807b      	strh	r3, [r7, #2]
        sms_array[i] = Heap_API_Allocate(token_length + 1, sizeof(char));
 8003742:	887b      	ldrh	r3, [r7, #2]
 8003744:	3301      	adds	r3, #1
 8003746:	8abc      	ldrh	r4, [r7, #20]
 8003748:	2101      	movs	r1, #1
 800374a:	4618      	mov	r0, r3
 800374c:	f7fd fb0c 	bl	8000d68 <Heap_API_Allocate>
 8003750:	4602      	mov	r2, r0
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strncpy(sms_array[i], token, token_length);
 8003758:	8aba      	ldrh	r2, [r7, #20]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003760:	887a      	ldrh	r2, [r7, #2]
 8003762:	6939      	ldr	r1, [r7, #16]
 8003764:	4618      	mov	r0, r3
 8003766:	f008 fb0e 	bl	800bd86 <strncpy>
        token = strtok(NULL, "\n");
 800376a:	4928      	ldr	r1, [pc, #160]	; (800380c <SMS_APP_ParseSms+0x168>)
 800376c:	2000      	movs	r0, #0
 800376e:	f008 fb33 	bl	800bdd8 <strtok>
 8003772:	6138      	str	r0, [r7, #16]
    for (uint16_t i = 0; i < sms_array_size; i++) {
 8003774:	8abb      	ldrh	r3, [r7, #20]
 8003776:	3301      	adds	r3, #1
 8003778:	82bb      	strh	r3, [r7, #20]
 800377a:	8aba      	ldrh	r2, [r7, #20]
 800377c:	89fb      	ldrh	r3, [r7, #14]
 800377e:	429a      	cmp	r2, r3
 8003780:	d3da      	bcc.n	8003738 <SMS_APP_ParseSms+0x94>
    }

    for (uint16_t i = 0; i < sms_array_size; i++) {
 8003782:	2300      	movs	r3, #0
 8003784:	82fb      	strh	r3, [r7, #22]
 8003786:	e031      	b.n	80037ec <SMS_APP_ParseSms+0x148>
        cmd_api_args.message = sms_array[i];
 8003788:	8afa      	ldrh	r2, [r7, #22]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003790:	4a1f      	ldr	r2, [pc, #124]	; (8003810 <SMS_APP_ParseSms+0x16c>)
 8003792:	6013      	str	r3, [r2, #0]
        cmd_api_args.message_length = SMS_LENGTH;
 8003794:	4b1e      	ldr	r3, [pc, #120]	; (8003810 <SMS_APP_ParseSms+0x16c>)
 8003796:	22a0      	movs	r2, #160	; 0xa0
 8003798:	809a      	strh	r2, [r3, #4]
        cmd_api_args.response_buffer = response_buffer;
 800379a:	4b1d      	ldr	r3, [pc, #116]	; (8003810 <SMS_APP_ParseSms+0x16c>)
 800379c:	4a1d      	ldr	r2, [pc, #116]	; (8003814 <SMS_APP_ParseSms+0x170>)
 800379e:	609a      	str	r2, [r3, #8]
        cmd_api_args.response_buffer_length = SMS_LENGTH;
 80037a0:	4b1b      	ldr	r3, [pc, #108]	; (8003810 <SMS_APP_ParseSms+0x16c>)
 80037a2:	22a0      	movs	r2, #160	; 0xa0
 80037a4:	819a      	strh	r2, [r3, #12]
        cmd_api_args.static_lut_length = (uint16_t) eCliAppCmd_Last;
 80037a6:	4b1a      	ldr	r3, [pc, #104]	; (8003810 <SMS_APP_ParseSms+0x16c>)
 80037a8:	2207      	movs	r2, #7
 80037aa:	81da      	strh	r2, [r3, #14]
        cmd_api_args.static_lut = (sCmdApiStaticLut_t*) &static_cli_app_lut;
 80037ac:	4b18      	ldr	r3, [pc, #96]	; (8003810 <SMS_APP_ParseSms+0x16c>)
 80037ae:	4a1a      	ldr	r2, [pc, #104]	; (8003818 <SMS_APP_ParseSms+0x174>)
 80037b0:	611a      	str	r2, [r3, #16]
        CMD_API_ParseCommand(&cmd_api_args, SEPARATOR);
 80037b2:	491a      	ldr	r1, [pc, #104]	; (800381c <SMS_APP_ParseSms+0x178>)
 80037b4:	4816      	ldr	r0, [pc, #88]	; (8003810 <SMS_APP_ParseSms+0x16c>)
 80037b6:	f7fc ff6d 	bl	8000694 <CMD_API_ParseCommand>

        if (strcmp(cmd_api_args.response_buffer, "") != 0) {
 80037ba:	4b15      	ldr	r3, [pc, #84]	; (8003810 <SMS_APP_ParseSms+0x16c>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d009      	beq.n	80037d8 <SMS_APP_ParseSms+0x134>
            debug("%s\n", cmd_api_args.response_buffer);
 80037c4:	4b16      	ldr	r3, [pc, #88]	; (8003820 <SMS_APP_ParseSms+0x17c>)
 80037c6:	6818      	ldr	r0, [r3, #0]
 80037c8:	4b11      	ldr	r3, [pc, #68]	; (8003810 <SMS_APP_ParseSms+0x16c>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	4b15      	ldr	r3, [pc, #84]	; (8003824 <SMS_APP_ParseSms+0x180>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	2100      	movs	r1, #0
 80037d4:	f7fd fa28 	bl	8000c28 <Debug_API_Print>
        }
        Heap_API_Free(sms_array[i]);
 80037d8:	8afa      	ldrh	r2, [r7, #22]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7fd fb27 	bl	8000e34 <Heap_API_Free>
    for (uint16_t i = 0; i < sms_array_size; i++) {
 80037e6:	8afb      	ldrh	r3, [r7, #22]
 80037e8:	3301      	adds	r3, #1
 80037ea:	82fb      	strh	r3, [r7, #22]
 80037ec:	8afa      	ldrh	r2, [r7, #22]
 80037ee:	89fb      	ldrh	r3, [r7, #14]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d3c9      	bcc.n	8003788 <SMS_APP_ParseSms+0xe4>
    };

    return true;
 80037f4:	2301      	movs	r3, #1
 80037f6:	46b5      	mov	sp, r6
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	371c      	adds	r7, #28
 80037fc:	46bd      	mov	sp, r7
 80037fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003802:	bf00      	nop
 8003804:	0800e874 	.word	0x0800e874
 8003808:	20000ab0 	.word	0x20000ab0
 800380c:	0800e878 	.word	0x0800e878
 8003810:	20000a9c 	.word	0x20000a9c
 8003814:	20000b50 	.word	0x20000b50
 8003818:	0800ea88 	.word	0x0800ea88
 800381c:	0800e87c 	.word	0x0800e87c
 8003820:	200001d8 	.word	0x200001d8
 8003824:	0800e880 	.word	0x0800e880

08003828 <SMS_APP_Thread>:
static bool SMS_APP_ReadAllSms (void) {
    return Modem_API_SendAndWait("AT+CMGL=\"REC UNREAD\"\n", SECOND_IN_MS, 1);
}

/* THREAD */
static void SMS_APP_Thread (void *argument) {
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
    while (true) {
        if (sms_app_setup == true) {
 8003830:	4b2b      	ldr	r3, [pc, #172]	; (80038e0 <SMS_APP_Thread+0xb8>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d018      	beq.n	800386a <SMS_APP_Thread+0x42>
            /* READY */
            if (Modem_API_WaitFlag(eModemFlag_Ready, DEFAULT_WAIT_TIME) == true) {
 8003838:	f241 3188 	movw	r1, #5000	; 0x1388
 800383c:	2000      	movs	r0, #0
 800383e:	f7fd ffc9 	bl	80017d4 <Modem_API_WaitFlag>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d0f3      	beq.n	8003830 <SMS_APP_Thread+0x8>
                sms_app_setup = !SMS_APP_Setup();
 8003848:	f7ff fe58 	bl	80034fc <SMS_APP_Setup>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	bf14      	ite	ne
 8003852:	2301      	movne	r3, #1
 8003854:	2300      	moveq	r3, #0
 8003856:	b2db      	uxtb	r3, r3
 8003858:	f083 0301 	eor.w	r3, r3, #1
 800385c:	b2db      	uxtb	r3, r3
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	b2da      	uxtb	r2, r3
 8003864:	4b1e      	ldr	r3, [pc, #120]	; (80038e0 <SMS_APP_Thread+0xb8>)
 8003866:	701a      	strb	r2, [r3, #0]
 8003868:	e7e2      	b.n	8003830 <SMS_APP_Thread+0x8>
            }
        } else {
            switch (Modem_API_GetState(eModemFlag_SmsRecieved)) {
 800386a:	2009      	movs	r0, #9
 800386c:	f7fe f810 	bl	8001890 <Modem_API_GetState>
 8003870:	4603      	mov	r3, r0
 8003872:	2b03      	cmp	r3, #3
 8003874:	d82d      	bhi.n	80038d2 <SMS_APP_Thread+0xaa>
 8003876:	a201      	add	r2, pc, #4	; (adr r2, 800387c <SMS_APP_Thread+0x54>)
 8003878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387c:	0800388d 	.word	0x0800388d
 8003880:	080038b7 	.word	0x080038b7
 8003884:	080038ab 	.word	0x080038ab
 8003888:	080038c5 	.word	0x080038c5
                /* SMS APP READY */
                case eModemApiState_Unknown: {
                    modem("SMS APP SETUP DONE.\n");
 800388c:	4b15      	ldr	r3, [pc, #84]	; (80038e4 <SMS_APP_Thread+0xbc>)
 800388e:	2200      	movs	r2, #0
 8003890:	2100      	movs	r1, #0
 8003892:	4815      	ldr	r0, [pc, #84]	; (80038e8 <SMS_APP_Thread+0xc0>)
 8003894:	f7fd f9c8 	bl	8000c28 <Debug_API_Print>
//                    SMS_APP_SendSms("+37065828368", "Beep Boop. Hurr durr I am a tracker.");

                    Modem_API_ClearFlag(eModemFlag_SmsRecieved, eModemApiState_NotReady);
 8003898:	2102      	movs	r1, #2
 800389a:	2009      	movs	r0, #9
 800389c:	f7fd ff62 	bl	8001764 <Modem_API_ClearFlag>
                    Modem_API_SetFlag(eModemFlag_Setup, eModemApiState_Ready);
 80038a0:	2101      	movs	r1, #1
 80038a2:	2003      	movs	r0, #3
 80038a4:	f7fd ff26 	bl	80016f4 <Modem_API_SetFlag>
                    break;
 80038a8:	e018      	b.n	80038dc <SMS_APP_Thread+0xb4>
                }

                    /* DEFAULT */
                case eModemApiState_NotReady: {
                    Modem_API_WaitFlag(eModemFlag_SmsRecieved, osWaitForever);
 80038aa:	f04f 31ff 	mov.w	r1, #4294967295
 80038ae:	2009      	movs	r0, #9
 80038b0:	f7fd ff90 	bl	80017d4 <Modem_API_WaitFlag>
                    break;
 80038b4:	e012      	b.n	80038dc <SMS_APP_Thread+0xb4>
                }

                    /* READ SMS CONTENTS */
                case eModemApiState_Ready: {
                    Modem_API_ClearFlag(eModemFlag_SmsRecieved, eModemApiState_NotReady);
 80038b6:	2102      	movs	r1, #2
 80038b8:	2009      	movs	r0, #9
 80038ba:	f7fd ff53 	bl	8001764 <Modem_API_ClearFlag>
                    SMS_APP_ReadSms();
 80038be:	f7ff febf 	bl	8003640 <SMS_APP_ReadSms>
                    break;
 80038c2:	e00b      	b.n	80038dc <SMS_APP_Thread+0xb4>
                }

                    /* PARSE SMS CONTENTS */
                case eModemApiState_OK: {
                    SMS_APP_ParseSms();
 80038c4:	f7ff feee 	bl	80036a4 <SMS_APP_ParseSms>
                    Modem_API_ClearFlag(eModemFlag_SmsRecieved, eModemApiState_NotReady);
 80038c8:	2102      	movs	r1, #2
 80038ca:	2009      	movs	r0, #9
 80038cc:	f7fd ff4a 	bl	8001764 <Modem_API_ClearFlag>
                    break;
 80038d0:	e004      	b.n	80038dc <SMS_APP_Thread+0xb4>
                }

                default: {
                    Modem_API_ClearFlag(eModemFlag_SmsRead, eModemApiState_NotReady);
 80038d2:	2102      	movs	r1, #2
 80038d4:	2008      	movs	r0, #8
 80038d6:	f7fd ff45 	bl	8001764 <Modem_API_ClearFlag>
                    break;
 80038da:	bf00      	nop
        if (sms_app_setup == true) {
 80038dc:	e7a8      	b.n	8003830 <SMS_APP_Thread+0x8>
 80038de:	bf00      	nop
 80038e0:	200001dc 	.word	0x200001dc
 80038e4:	0800e89c 	.word	0x0800e89c
 80038e8:	0800e8b4 	.word	0x0800e8b4

080038ec <SMS_APP_Init>:
    osThreadTerminate(NULL);
}
/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/
bool SMS_APP_Init (void) {
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
    /* THREAD */
    sms_app_task_handle = osThreadNew(SMS_APP_Thread, NULL, &sms_app_task_attributes);
 80038f0:	4a08      	ldr	r2, [pc, #32]	; (8003914 <SMS_APP_Init+0x28>)
 80038f2:	2100      	movs	r1, #0
 80038f4:	4808      	ldr	r0, [pc, #32]	; (8003918 <SMS_APP_Init+0x2c>)
 80038f6:	f002 ff47 	bl	8006788 <osThreadNew>
 80038fa:	4603      	mov	r3, r0
 80038fc:	4a07      	ldr	r2, [pc, #28]	; (800391c <SMS_APP_Init+0x30>)
 80038fe:	6013      	str	r3, [r2, #0]
    if (sms_app_task_handle == NULL) {
 8003900:	4b06      	ldr	r3, [pc, #24]	; (800391c <SMS_APP_Init+0x30>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d101      	bne.n	800390c <SMS_APP_Init+0x20>
        return false;
 8003908:	2300      	movs	r3, #0
 800390a:	e000      	b.n	800390e <SMS_APP_Init+0x22>
    }
    return true;
 800390c:	2301      	movs	r3, #1
}
 800390e:	4618      	mov	r0, r3
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	0800eb24 	.word	0x0800eb24
 8003918:	08003829 	.word	0x08003829
 800391c:	20000a98 	.word	0x20000a98

08003920 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003928:	4b08      	ldr	r3, [pc, #32]	; (800394c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800392a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800392c:	4907      	ldr	r1, [pc, #28]	; (800394c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4313      	orrs	r3, r2
 8003932:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003934:	4b05      	ldr	r3, [pc, #20]	; (800394c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003936:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4013      	ands	r3, r2
 800393c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800393e:	68fb      	ldr	r3, [r7, #12]
}
 8003940:	bf00      	nop
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	40023800 	.word	0x40023800

08003950 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	619a      	str	r2, [r3, #24]
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	041a      	lsls	r2, r3, #16
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	619a      	str	r2, [r3, #24]
}
 800397e:	bf00      	nop
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr

0800398a <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800398a:	b480      	push	{r7}
 800398c:	b085      	sub	sp, #20
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
 8003992:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	4013      	ands	r3, r2
 80039a0:	041a      	lsls	r2, r3, #16
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	43d9      	mvns	r1, r3
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	400b      	ands	r3, r1
 80039aa:	431a      	orrs	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	619a      	str	r2, [r3, #24]
}
 80039b0:	bf00      	nop
 80039b2:	3714      	adds	r7, #20
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <GPIO_Driver_Init>:
 *********************************************************************************************************************/

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/
bool GPIO_Driver_Init (eGpio_Enum_t gpio) {
 80039bc:	b580      	push	{r7, lr}
 80039be:	b08a      	sub	sp, #40	; 0x28
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	4603      	mov	r3, r0
 80039c4:	71fb      	strb	r3, [r7, #7]

    if (gpio >= eGpioDriver_Last) {
 80039c6:	79fb      	ldrb	r3, [r7, #7]
 80039c8:	2b0b      	cmp	r3, #11
 80039ca:	d901      	bls.n	80039d0 <GPIO_Driver_Init+0x14>
        return false;
 80039cc:	2300      	movs	r3, #0
 80039ce:	e062      	b.n	8003a96 <GPIO_Driver_Init+0xda>
    }

    /* GPIO Ports Clock Enable */
    LL_AHB1_GRP1_EnableClock(static_gpio_lut[gpio].clock);
 80039d0:	79fb      	ldrb	r3, [r7, #7]
 80039d2:	4a33      	ldr	r2, [pc, #204]	; (8003aa0 <GPIO_Driver_Init+0xe4>)
 80039d4:	015b      	lsls	r3, r3, #5
 80039d6:	4413      	add	r3, r2
 80039d8:	3304      	adds	r3, #4
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4618      	mov	r0, r3
 80039de:	f7ff ff9f 	bl	8003920 <LL_AHB1_GRP1_EnableClock>
    LL_GPIO_ResetOutputPin(static_gpio_lut[gpio].port, static_gpio_lut[gpio].pin);
 80039e2:	79fb      	ldrb	r3, [r7, #7]
 80039e4:	4a2e      	ldr	r2, [pc, #184]	; (8003aa0 <GPIO_Driver_Init+0xe4>)
 80039e6:	015b      	lsls	r3, r3, #5
 80039e8:	4413      	add	r3, r2
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	79fb      	ldrb	r3, [r7, #7]
 80039ee:	492c      	ldr	r1, [pc, #176]	; (8003aa0 <GPIO_Driver_Init+0xe4>)
 80039f0:	015b      	lsls	r3, r3, #5
 80039f2:	440b      	add	r3, r1
 80039f4:	3308      	adds	r3, #8
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4619      	mov	r1, r3
 80039fa:	4610      	mov	r0, r2
 80039fc:	f7ff ffb6 	bl	800396c <LL_GPIO_ResetOutputPin>

    /* Init GPIO struct */
    LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a00:	f107 030c 	add.w	r3, r7, #12
 8003a04:	2200      	movs	r2, #0
 8003a06:	601a      	str	r2, [r3, #0]
 8003a08:	605a      	str	r2, [r3, #4]
 8003a0a:	609a      	str	r2, [r3, #8]
 8003a0c:	60da      	str	r2, [r3, #12]
 8003a0e:	611a      	str	r2, [r3, #16]
 8003a10:	615a      	str	r2, [r3, #20]
    GPIO_InitStruct.Pin = static_gpio_lut[gpio].pin;
 8003a12:	79fb      	ldrb	r3, [r7, #7]
 8003a14:	4a22      	ldr	r2, [pc, #136]	; (8003aa0 <GPIO_Driver_Init+0xe4>)
 8003a16:	015b      	lsls	r3, r3, #5
 8003a18:	4413      	add	r3, r2
 8003a1a:	3308      	adds	r3, #8
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = static_gpio_lut[gpio].mode;
 8003a20:	79fb      	ldrb	r3, [r7, #7]
 8003a22:	4a1f      	ldr	r2, [pc, #124]	; (8003aa0 <GPIO_Driver_Init+0xe4>)
 8003a24:	015b      	lsls	r3, r3, #5
 8003a26:	4413      	add	r3, r2
 8003a28:	330c      	adds	r3, #12
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = static_gpio_lut[gpio].speed;
 8003a2e:	79fb      	ldrb	r3, [r7, #7]
 8003a30:	4a1b      	ldr	r2, [pc, #108]	; (8003aa0 <GPIO_Driver_Init+0xe4>)
 8003a32:	015b      	lsls	r3, r3, #5
 8003a34:	4413      	add	r3, r2
 8003a36:	3310      	adds	r3, #16
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.OutputType = static_gpio_lut[gpio].outputType;
 8003a3c:	79fb      	ldrb	r3, [r7, #7]
 8003a3e:	4a18      	ldr	r2, [pc, #96]	; (8003aa0 <GPIO_Driver_Init+0xe4>)
 8003a40:	015b      	lsls	r3, r3, #5
 8003a42:	4413      	add	r3, r2
 8003a44:	3314      	adds	r3, #20
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = static_gpio_lut[gpio].pull;
 8003a4a:	79fb      	ldrb	r3, [r7, #7]
 8003a4c:	4a14      	ldr	r2, [pc, #80]	; (8003aa0 <GPIO_Driver_Init+0xe4>)
 8003a4e:	015b      	lsls	r3, r3, #5
 8003a50:	4413      	add	r3, r2
 8003a52:	3318      	adds	r3, #24
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = static_gpio_lut[gpio].alternate;
 8003a58:	79fb      	ldrb	r3, [r7, #7]
 8003a5a:	4a11      	ldr	r2, [pc, #68]	; (8003aa0 <GPIO_Driver_Init+0xe4>)
 8003a5c:	015b      	lsls	r3, r3, #5
 8003a5e:	4413      	add	r3, r2
 8003a60:	331c      	adds	r3, #28
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	623b      	str	r3, [r7, #32]

    ErrorStatus status = ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    status = LL_GPIO_Init(static_gpio_lut[gpio].port, &GPIO_InitStruct);
 8003a6c:	79fb      	ldrb	r3, [r7, #7]
 8003a6e:	4a0c      	ldr	r2, [pc, #48]	; (8003aa0 <GPIO_Driver_Init+0xe4>)
 8003a70:	015b      	lsls	r3, r3, #5
 8003a72:	4413      	add	r3, r2
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f107 020c 	add.w	r2, r7, #12
 8003a7a:	4611      	mov	r1, r2
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f001 fd4e 	bl	800551e <LL_GPIO_Init>
 8003a82:	4603      	mov	r3, r0
 8003a84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (status != SUCCESS) {
 8003a88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <GPIO_Driver_Init+0xd8>
        return false;
 8003a90:	2300      	movs	r3, #0
 8003a92:	e000      	b.n	8003a96 <GPIO_Driver_Init+0xda>
    }
    return true;
 8003a94:	2301      	movs	r3, #1
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3728      	adds	r7, #40	; 0x28
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	0800eb48 	.word	0x0800eb48

08003aa4 <GPIO_Driver_SetPin>:

bool GPIO_Driver_SetPin (eGpio_Enum_t gpio) {
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	4603      	mov	r3, r0
 8003aac:	71fb      	strb	r3, [r7, #7]
    if (gpio >= eGpioDriver_Last) {
 8003aae:	79fb      	ldrb	r3, [r7, #7]
 8003ab0:	2b0b      	cmp	r3, #11
 8003ab2:	d901      	bls.n	8003ab8 <GPIO_Driver_SetPin+0x14>
        return false;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	e00f      	b.n	8003ad8 <GPIO_Driver_SetPin+0x34>
    }

    LL_GPIO_SetOutputPin(static_gpio_lut[gpio].port, static_gpio_lut[gpio].pin);
 8003ab8:	79fb      	ldrb	r3, [r7, #7]
 8003aba:	4a09      	ldr	r2, [pc, #36]	; (8003ae0 <GPIO_Driver_SetPin+0x3c>)
 8003abc:	015b      	lsls	r3, r3, #5
 8003abe:	4413      	add	r3, r2
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	79fb      	ldrb	r3, [r7, #7]
 8003ac4:	4906      	ldr	r1, [pc, #24]	; (8003ae0 <GPIO_Driver_SetPin+0x3c>)
 8003ac6:	015b      	lsls	r3, r3, #5
 8003ac8:	440b      	add	r3, r1
 8003aca:	3308      	adds	r3, #8
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4619      	mov	r1, r3
 8003ad0:	4610      	mov	r0, r2
 8003ad2:	f7ff ff3d 	bl	8003950 <LL_GPIO_SetOutputPin>
    return true;
 8003ad6:	2301      	movs	r3, #1
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3708      	adds	r7, #8
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	0800eb48 	.word	0x0800eb48

08003ae4 <GPIO_Driver_ResetPin>:

bool GPIO_Driver_ResetPin (eGpio_Enum_t gpio) {
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	4603      	mov	r3, r0
 8003aec:	71fb      	strb	r3, [r7, #7]
    if (gpio >= eGpioDriver_Last) {
 8003aee:	79fb      	ldrb	r3, [r7, #7]
 8003af0:	2b0b      	cmp	r3, #11
 8003af2:	d901      	bls.n	8003af8 <GPIO_Driver_ResetPin+0x14>
        return false;
 8003af4:	2300      	movs	r3, #0
 8003af6:	e00f      	b.n	8003b18 <GPIO_Driver_ResetPin+0x34>
    }

    LL_GPIO_ResetOutputPin(static_gpio_lut[gpio].port, static_gpio_lut[gpio].pin);
 8003af8:	79fb      	ldrb	r3, [r7, #7]
 8003afa:	4a09      	ldr	r2, [pc, #36]	; (8003b20 <GPIO_Driver_ResetPin+0x3c>)
 8003afc:	015b      	lsls	r3, r3, #5
 8003afe:	4413      	add	r3, r2
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	79fb      	ldrb	r3, [r7, #7]
 8003b04:	4906      	ldr	r1, [pc, #24]	; (8003b20 <GPIO_Driver_ResetPin+0x3c>)
 8003b06:	015b      	lsls	r3, r3, #5
 8003b08:	440b      	add	r3, r1
 8003b0a:	3308      	adds	r3, #8
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4619      	mov	r1, r3
 8003b10:	4610      	mov	r0, r2
 8003b12:	f7ff ff2b 	bl	800396c <LL_GPIO_ResetOutputPin>
    return true;
 8003b16:	2301      	movs	r3, #1
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3708      	adds	r7, #8
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	0800eb48 	.word	0x0800eb48

08003b24 <GPIO_Driver_TogglePin>:

bool GPIO_Driver_TogglePin (eGpio_Enum_t gpio) {
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	71fb      	strb	r3, [r7, #7]
    if (gpio >= eGpioDriver_Last) {
 8003b2e:	79fb      	ldrb	r3, [r7, #7]
 8003b30:	2b0b      	cmp	r3, #11
 8003b32:	d901      	bls.n	8003b38 <GPIO_Driver_TogglePin+0x14>
        return false;
 8003b34:	2300      	movs	r3, #0
 8003b36:	e00f      	b.n	8003b58 <GPIO_Driver_TogglePin+0x34>
    }

    LL_GPIO_TogglePin(static_gpio_lut[gpio].port, static_gpio_lut[gpio].pin);
 8003b38:	79fb      	ldrb	r3, [r7, #7]
 8003b3a:	4a09      	ldr	r2, [pc, #36]	; (8003b60 <GPIO_Driver_TogglePin+0x3c>)
 8003b3c:	015b      	lsls	r3, r3, #5
 8003b3e:	4413      	add	r3, r2
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	79fb      	ldrb	r3, [r7, #7]
 8003b44:	4906      	ldr	r1, [pc, #24]	; (8003b60 <GPIO_Driver_TogglePin+0x3c>)
 8003b46:	015b      	lsls	r3, r3, #5
 8003b48:	440b      	add	r3, r1
 8003b4a:	3308      	adds	r3, #8
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4619      	mov	r1, r3
 8003b50:	4610      	mov	r0, r2
 8003b52:	f7ff ff1a 	bl	800398a <LL_GPIO_TogglePin>
    return true;
 8003b56:	2301      	movs	r3, #1
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3708      	adds	r7, #8
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	0800eb48 	.word	0x0800eb48

08003b64 <LL_RCC_SetRTCClockSource>:
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003b6c:	4b06      	ldr	r3, [pc, #24]	; (8003b88 <LL_RCC_SetRTCClockSource+0x24>)
 8003b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b74:	4904      	ldr	r1, [pc, #16]	; (8003b88 <LL_RCC_SetRTCClockSource+0x24>)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	670b      	str	r3, [r1, #112]	; 0x70
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr
 8003b88:	40023800 	.word	0x40023800

08003b8c <LL_RCC_GetRTCClockSource>:
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003b90:	4b04      	ldr	r3, [pc, #16]	; (8003ba4 <LL_RCC_GetRTCClockSource+0x18>)
 8003b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b94:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	40023800 	.word	0x40023800

08003ba8 <LL_RCC_EnableRTC>:
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8003bac:	4b05      	ldr	r3, [pc, #20]	; (8003bc4 <LL_RCC_EnableRTC+0x1c>)
 8003bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb0:	4a04      	ldr	r2, [pc, #16]	; (8003bc4 <LL_RCC_EnableRTC+0x1c>)
 8003bb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bb6:	6713      	str	r3, [r2, #112]	; 0x70
}
 8003bb8:	bf00      	nop
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	40023800 	.word	0x40023800

08003bc8 <LL_RCC_ForceBackupDomainReset>:
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003bcc:	4b05      	ldr	r3, [pc, #20]	; (8003be4 <LL_RCC_ForceBackupDomainReset+0x1c>)
 8003bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd0:	4a04      	ldr	r2, [pc, #16]	; (8003be4 <LL_RCC_ForceBackupDomainReset+0x1c>)
 8003bd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd6:	6713      	str	r3, [r2, #112]	; 0x70
}
 8003bd8:	bf00      	nop
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	40023800 	.word	0x40023800

08003be8 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003bec:	4b05      	ldr	r3, [pc, #20]	; (8003c04 <LL_RCC_ReleaseBackupDomainReset+0x1c>)
 8003bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf0:	4a04      	ldr	r2, [pc, #16]	; (8003c04 <LL_RCC_ReleaseBackupDomainReset+0x1c>)
 8003bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bf6:	6713      	str	r3, [r2, #112]	; 0x70
}
 8003bf8:	bf00      	nop
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	40023800 	.word	0x40023800

08003c08 <LL_RTC_SetAsynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  AsynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7F
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetAsynchPrescaler(RTC_TypeDef *RTCx, uint32_t AsynchPrescaler)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	041b      	lsls	r3, r3, #16
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	611a      	str	r2, [r3, #16]
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <LL_RTC_SetSynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  SynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7FFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetSynchPrescaler(RTC_TypeDef *RTCx, uint32_t SynchPrescaler)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003c42:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	611a      	str	r2, [r3, #16]
}
 8003c4e:	bf00      	nop
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	22ff      	movs	r2, #255	; 0xff
 8003c66:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <LL_RTC_TIME_GetHour>:
  *         TR           HU            LL_RTC_TIME_GetHour
  * @param  RTCx RTC Instance
  * @retval Value between Min_Data=0x01 and Max_Data=0x12 or between Min_Data=0x00 and Max_Data=0x23
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetHour(RTC_TypeDef *RTCx)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU))) >> RTC_TR_HU_Pos);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	0c1b      	lsrs	r3, r3, #16
 8003c82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <LL_RTC_TIME_GetMinute>:
  *         TR           MNU           LL_RTC_TIME_GetMinute
  * @param  RTCx RTC Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x59
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetMinute(RTC_TypeDef *RTCx)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->TR, (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	0a1b      	lsrs	r3, r3, #8
 8003ca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <LL_RTC_TIME_GetSecond>:
  *         TR           SU            LL_RTC_TIME_GetSecond
  * @param  RTCx RTC Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x59
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSecond(RTC_TypeDef *RTCx)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->TR, (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <LL_RTC_TIME_GetSubSecond>:
  * @rmtoll SSR          SS            LL_RTC_TIME_GetSubSecond
  * @param  RTCx RTC Instance
  * @retval Subseconds value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd8:	b29b      	uxth	r3, r3
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <LL_RTC_BAK_GetRegister>:
  *         @arg @ref LL_RTC_BKP_DR18
  *         @arg @ref LL_RTC_BKP_DR19
  * @retval Value between Min_Data=0x00 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_BAK_GetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b085      	sub	sp, #20
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
 8003cee:	6039      	str	r1, [r7, #0]
  uint32_t temp;

  temp = (uint32_t)(&(RTCx->BKP0R));
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	3350      	adds	r3, #80	; 0x50
 8003cf4:	60fb      	str	r3, [r7, #12]
  temp += (BackupRegister * 4U);
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)temp);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <RTC_Driver_Init>:
/*_____________________________________________________________________________________________________________________________________________________________________________________________________
 * Definitions of private functions */

/*_____________________________________________________________________________________________________________________________________________________________________________________________________
 * Definitions of exported functions */
bool RTC_Driver_Init (void) {
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
    /* ENABLE REG WRITE */
    LL_RTC_InitTypeDef RTC_InitStruct = {0};
 8003d16:	1d3b      	adds	r3, r7, #4
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	605a      	str	r2, [r3, #4]
 8003d1e:	609a      	str	r2, [r3, #8]

    if (LL_RCC_GetRTCClockSource() != LL_RCC_RTC_CLKSOURCE_LSI)
 8003d20:	f7ff ff34 	bl	8003b8c <LL_RCC_GetRTCClockSource>
 8003d24:	4603      	mov	r3, r0
 8003d26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d2a:	d007      	beq.n	8003d3c <RTC_Driver_Init+0x2c>
    {
        LL_RCC_ForceBackupDomainReset();
 8003d2c:	f7ff ff4c 	bl	8003bc8 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003d30:	f7ff ff5a 	bl	8003be8 <LL_RCC_ReleaseBackupDomainReset>
        LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSI);
 8003d34:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003d38:	f7ff ff14 	bl	8003b64 <LL_RCC_SetRTCClockSource>
    }

    /* Peripheral clock enable */
    LL_RCC_EnableRTC();
 8003d3c:	f7ff ff34 	bl	8003ba8 <LL_RCC_EnableRTC>
    /* Initialize RTC and set the Time and Date */
    RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
 8003d40:	2300      	movs	r3, #0
 8003d42:	607b      	str	r3, [r7, #4]
    RTC_InitStruct.AsynchPrescaler = RTC_PRESCALE_ASYNC_VALUE;
 8003d44:	231f      	movs	r3, #31
 8003d46:	60bb      	str	r3, [r7, #8]
    RTC_InitStruct.SynchPrescaler = RTC_PRESCALE_SYNC_VALUE;
 8003d48:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003d4c:	60fb      	str	r3, [r7, #12]
    LL_RTC_Init(RTC, &RTC_InitStruct);
 8003d4e:	1d3b      	adds	r3, r7, #4
 8003d50:	4619      	mov	r1, r3
 8003d52:	481e      	ldr	r0, [pc, #120]	; (8003dcc <RTC_Driver_Init+0xbc>)
 8003d54:	f001 febe 	bl	8005ad4 <LL_RTC_Init>
    LL_RTC_SetAsynchPrescaler(RTC, RTC_PRESCALE_ASYNC_VALUE);
 8003d58:	211f      	movs	r1, #31
 8003d5a:	481c      	ldr	r0, [pc, #112]	; (8003dcc <RTC_Driver_Init+0xbc>)
 8003d5c:	f7ff ff54 	bl	8003c08 <LL_RTC_SetAsynchPrescaler>
    LL_RTC_SetSynchPrescaler(RTC, RTC_PRESCALE_SYNC_VALUE);
 8003d60:	f240 31e7 	movw	r1, #999	; 0x3e7
 8003d64:	4819      	ldr	r0, [pc, #100]	; (8003dcc <RTC_Driver_Init+0xbc>)
 8003d66:	f7ff ff63 	bl	8003c30 <LL_RTC_SetSynchPrescaler>

    /* Initialize RTC and set the Time and Date */
    if (LL_RTC_BAK_GetRegister(RTC, LL_RTC_BKP_DR0) != 0x32F2) {
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	4817      	ldr	r0, [pc, #92]	; (8003dcc <RTC_Driver_Init+0xbc>)
 8003d6e:	f7ff ffba 	bl	8003ce6 <LL_RTC_BAK_GetRegister>
 8003d72:	4603      	mov	r3, r0
 8003d74:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d01e      	beq.n	8003dba <RTC_Driver_Init+0xaa>
        time.Hours = 0;
 8003d7c:	4b14      	ldr	r3, [pc, #80]	; (8003dd0 <RTC_Driver_Init+0xc0>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	711a      	strb	r2, [r3, #4]
        time.Minutes = 0;
 8003d82:	4b13      	ldr	r3, [pc, #76]	; (8003dd0 <RTC_Driver_Init+0xc0>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	715a      	strb	r2, [r3, #5]
        time.Seconds = 0;
 8003d88:	4b11      	ldr	r3, [pc, #68]	; (8003dd0 <RTC_Driver_Init+0xc0>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	719a      	strb	r2, [r3, #6]
        LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BIN, &time);
 8003d8e:	4a10      	ldr	r2, [pc, #64]	; (8003dd0 <RTC_Driver_Init+0xc0>)
 8003d90:	2100      	movs	r1, #0
 8003d92:	480e      	ldr	r0, [pc, #56]	; (8003dcc <RTC_Driver_Init+0xbc>)
 8003d94:	f001 fece 	bl	8005b34 <LL_RTC_TIME_Init>
        date.WeekDay = LL_RTC_WEEKDAY_MONDAY;
 8003d98:	4b0e      	ldr	r3, [pc, #56]	; (8003dd4 <RTC_Driver_Init+0xc4>)
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	701a      	strb	r2, [r3, #0]
        date.Month = LL_RTC_MONTH_JANUARY;
 8003d9e:	4b0d      	ldr	r3, [pc, #52]	; (8003dd4 <RTC_Driver_Init+0xc4>)
 8003da0:	2201      	movs	r2, #1
 8003da2:	705a      	strb	r2, [r3, #1]
        date.Day = 0x1;
 8003da4:	4b0b      	ldr	r3, [pc, #44]	; (8003dd4 <RTC_Driver_Init+0xc4>)
 8003da6:	2201      	movs	r2, #1
 8003da8:	709a      	strb	r2, [r3, #2]
        date.Year = 0;
 8003daa:	4b0a      	ldr	r3, [pc, #40]	; (8003dd4 <RTC_Driver_Init+0xc4>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	70da      	strb	r2, [r3, #3]
        LL_RTC_DATE_Init(RTC, LL_RTC_FORMAT_BIN, &date);
 8003db0:	4a08      	ldr	r2, [pc, #32]	; (8003dd4 <RTC_Driver_Init+0xc4>)
 8003db2:	2100      	movs	r1, #0
 8003db4:	4805      	ldr	r0, [pc, #20]	; (8003dcc <RTC_Driver_Init+0xbc>)
 8003db6:	f001 ff63 	bl	8005c80 <LL_RTC_DATE_Init>
//        LL_RTC_BAK_SetRegister(RTC, LL_RTC_BKP_DR0, 0x32F2); // Locks register
    }
    /* DISABLE REG WRITE */
//    LL_RTC_BAK_SetRegister(RTC, LL_RTC_BKP_DR0, 0xFF);
    LL_RTC_EnableWriteProtection(RTC);
 8003dba:	4804      	ldr	r0, [pc, #16]	; (8003dcc <RTC_Driver_Init+0xbc>)
 8003dbc:	f7ff ff4d 	bl	8003c5a <LL_RTC_EnableWriteProtection>
    return true;
 8003dc0:	2301      	movs	r3, #1
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	40002800 	.word	0x40002800
 8003dd0:	20000bf0 	.word	0x20000bf0
 8003dd4:	20000bf8 	.word	0x20000bf8

08003dd8 <RTC_Driver_GetTime>:

bool RTC_Driver_GetTime (void) {
 8003dd8:	b590      	push	{r4, r7, lr}
 8003dda:	b089      	sub	sp, #36	; 0x24
 8003ddc:	af04      	add	r7, sp, #16
    uint32_t temp1 = LL_RTC_TIME_GetHour(RTC);
 8003dde:	4821      	ldr	r0, [pc, #132]	; (8003e64 <RTC_Driver_GetTime+0x8c>)
 8003de0:	f7ff ff48 	bl	8003c74 <LL_RTC_TIME_GetHour>
 8003de4:	60f8      	str	r0, [r7, #12]
    uint32_t temp2 = LL_RTC_TIME_GetMinute(RTC);
 8003de6:	481f      	ldr	r0, [pc, #124]	; (8003e64 <RTC_Driver_GetTime+0x8c>)
 8003de8:	f7ff ff53 	bl	8003c92 <LL_RTC_TIME_GetMinute>
 8003dec:	60b8      	str	r0, [r7, #8]
    uint32_t temp3 = LL_RTC_TIME_GetSecond(RTC);
 8003dee:	481d      	ldr	r0, [pc, #116]	; (8003e64 <RTC_Driver_GetTime+0x8c>)
 8003df0:	f7ff ff5e 	bl	8003cb0 <LL_RTC_TIME_GetSecond>
 8003df4:	6078      	str	r0, [r7, #4]

    time.Hours = (uint8_t) LL_RTC_TIME_GetHour(RTC);
 8003df6:	481b      	ldr	r0, [pc, #108]	; (8003e64 <RTC_Driver_GetTime+0x8c>)
 8003df8:	f7ff ff3c 	bl	8003c74 <LL_RTC_TIME_GetHour>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	4b19      	ldr	r3, [pc, #100]	; (8003e68 <RTC_Driver_GetTime+0x90>)
 8003e02:	711a      	strb	r2, [r3, #4]
    time.Minutes = (uint8_t) LL_RTC_TIME_GetMinute(RTC);
 8003e04:	4817      	ldr	r0, [pc, #92]	; (8003e64 <RTC_Driver_GetTime+0x8c>)
 8003e06:	f7ff ff44 	bl	8003c92 <LL_RTC_TIME_GetMinute>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	4b16      	ldr	r3, [pc, #88]	; (8003e68 <RTC_Driver_GetTime+0x90>)
 8003e10:	715a      	strb	r2, [r3, #5]
    time.Seconds = (uint8_t) LL_RTC_TIME_GetSecond(RTC);
 8003e12:	4814      	ldr	r0, [pc, #80]	; (8003e64 <RTC_Driver_GetTime+0x8c>)
 8003e14:	f7ff ff4c 	bl	8003cb0 <LL_RTC_TIME_GetSecond>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	4b12      	ldr	r3, [pc, #72]	; (8003e68 <RTC_Driver_GetTime+0x90>)
 8003e1e:	719a      	strb	r2, [r3, #6]
    time_ms = LL_RTC_TIME_GetSubSecond(RTC);
 8003e20:	4810      	ldr	r0, [pc, #64]	; (8003e64 <RTC_Driver_GetTime+0x8c>)
 8003e22:	f7ff ff53 	bl	8003ccc <LL_RTC_TIME_GetSubSecond>
 8003e26:	4603      	mov	r3, r0
 8003e28:	4a10      	ldr	r2, [pc, #64]	; (8003e6c <RTC_Driver_GetTime+0x94>)
 8003e2a:	6013      	str	r3, [r2, #0]
    debug("RTC time: %02d:%02d  %02d.%03ds\n", time.Hours, time.Minutes, time.Seconds, time_ms);
 8003e2c:	4b10      	ldr	r3, [pc, #64]	; (8003e70 <RTC_Driver_GetTime+0x98>)
 8003e2e:	6818      	ldr	r0, [r3, #0]
 8003e30:	4b0d      	ldr	r3, [pc, #52]	; (8003e68 <RTC_Driver_GetTime+0x90>)
 8003e32:	791b      	ldrb	r3, [r3, #4]
 8003e34:	461a      	mov	r2, r3
 8003e36:	4b0c      	ldr	r3, [pc, #48]	; (8003e68 <RTC_Driver_GetTime+0x90>)
 8003e38:	795b      	ldrb	r3, [r3, #5]
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	4b0a      	ldr	r3, [pc, #40]	; (8003e68 <RTC_Driver_GetTime+0x90>)
 8003e3e:	799b      	ldrb	r3, [r3, #6]
 8003e40:	461c      	mov	r4, r3
 8003e42:	4b0a      	ldr	r3, [pc, #40]	; (8003e6c <RTC_Driver_GetTime+0x94>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	9303      	str	r3, [sp, #12]
 8003e48:	9402      	str	r4, [sp, #8]
 8003e4a:	9101      	str	r1, [sp, #4]
 8003e4c:	9200      	str	r2, [sp, #0]
 8003e4e:	4b09      	ldr	r3, [pc, #36]	; (8003e74 <RTC_Driver_GetTime+0x9c>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	2100      	movs	r1, #0
 8003e54:	f7fc fee8 	bl	8000c28 <Debug_API_Print>
    return true;
 8003e58:	2301      	movs	r3, #1
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3714      	adds	r7, #20
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd90      	pop	{r4, r7, pc}
 8003e62:	bf00      	nop
 8003e64:	40002800 	.word	0x40002800
 8003e68:	20000bf0 	.word	0x20000bf0
 8003e6c:	20000bfc 	.word	0x20000bfc
 8003e70:	200001e0 	.word	0x200001e0
 8003e74:	0800e8cc 	.word	0x0800e8cc

08003e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e7c:	4b04      	ldr	r3, [pc, #16]	; (8003e90 <__NVIC_GetPriorityGrouping+0x18>)
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	0a1b      	lsrs	r3, r3, #8
 8003e82:	f003 0307 	and.w	r3, r3, #7
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr
 8003e90:	e000ed00 	.word	0xe000ed00

08003e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	db0b      	blt.n	8003ebe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ea6:	79fb      	ldrb	r3, [r7, #7]
 8003ea8:	f003 021f 	and.w	r2, r3, #31
 8003eac:	4907      	ldr	r1, [pc, #28]	; (8003ecc <__NVIC_EnableIRQ+0x38>)
 8003eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb2:	095b      	lsrs	r3, r3, #5
 8003eb4:	2001      	movs	r0, #1
 8003eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8003eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ebe:	bf00      	nop
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	e000e100 	.word	0xe000e100

08003ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	6039      	str	r1, [r7, #0]
 8003eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	db0a      	blt.n	8003efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	b2da      	uxtb	r2, r3
 8003ee8:	490c      	ldr	r1, [pc, #48]	; (8003f1c <__NVIC_SetPriority+0x4c>)
 8003eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eee:	0112      	lsls	r2, r2, #4
 8003ef0:	b2d2      	uxtb	r2, r2
 8003ef2:	440b      	add	r3, r1
 8003ef4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ef8:	e00a      	b.n	8003f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	b2da      	uxtb	r2, r3
 8003efe:	4908      	ldr	r1, [pc, #32]	; (8003f20 <__NVIC_SetPriority+0x50>)
 8003f00:	79fb      	ldrb	r3, [r7, #7]
 8003f02:	f003 030f 	and.w	r3, r3, #15
 8003f06:	3b04      	subs	r3, #4
 8003f08:	0112      	lsls	r2, r2, #4
 8003f0a:	b2d2      	uxtb	r2, r2
 8003f0c:	440b      	add	r3, r1
 8003f0e:	761a      	strb	r2, [r3, #24]
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	e000e100 	.word	0xe000e100
 8003f20:	e000ed00 	.word	0xe000ed00

08003f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b089      	sub	sp, #36	; 0x24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f003 0307 	and.w	r3, r3, #7
 8003f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	f1c3 0307 	rsb	r3, r3, #7
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	bf28      	it	cs
 8003f42:	2304      	movcs	r3, #4
 8003f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	3304      	adds	r3, #4
 8003f4a:	2b06      	cmp	r3, #6
 8003f4c:	d902      	bls.n	8003f54 <NVIC_EncodePriority+0x30>
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	3b03      	subs	r3, #3
 8003f52:	e000      	b.n	8003f56 <NVIC_EncodePriority+0x32>
 8003f54:	2300      	movs	r3, #0
 8003f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f58:	f04f 32ff 	mov.w	r2, #4294967295
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f62:	43da      	mvns	r2, r3
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	401a      	ands	r2, r3
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	fa01 f303 	lsl.w	r3, r1, r3
 8003f76:	43d9      	mvns	r1, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f7c:	4313      	orrs	r3, r2
         );
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3724      	adds	r7, #36	; 0x24
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
	...

08003f8c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8003f94:	4b08      	ldr	r3, [pc, #32]	; (8003fb8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003f96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f98:	4907      	ldr	r1, [pc, #28]	; (8003fb8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003fa0:	4b05      	ldr	r3, [pc, #20]	; (8003fb8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003fa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003faa:	68fb      	ldr	r3, [r7, #12]
}
 8003fac:	bf00      	nop
 8003fae:	3714      	adds	r7, #20
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr
 8003fb8:	40023800 	.word	0x40023800

08003fbc <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f043 0201 	orr.w	r2, r3, #1
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	601a      	str	r2, [r3, #0]
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	601a      	str	r2, [r3, #0]
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f06f 0201 	mvn.w	r2, #1
 800400a:	611a      	str	r2, [r3, #16]
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b01      	cmp	r3, #1
 800402a:	d101      	bne.n	8004030 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800402c:	2301      	movs	r3, #1
 800402e:	e000      	b.n	8004032 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 800403e:	b480      	push	{r7}
 8004040:	b083      	sub	sp, #12
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	f043 0201 	orr.w	r2, r3, #1
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	60da      	str	r2, [r3, #12]
}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
	...

08004060 <TIM_Timer13_init>:
 *********************************************************************************************************************/

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/
void TIM_Timer13_init (void) {
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
    LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004066:	1d3b      	adds	r3, r7, #4
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	605a      	str	r2, [r3, #4]
 800406e:	609a      	str	r2, [r3, #8]
 8004070:	60da      	str	r2, [r3, #12]
 8004072:	611a      	str	r2, [r3, #16]

    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM13);
 8004074:	2080      	movs	r0, #128	; 0x80
 8004076:	f7ff ff89 	bl	8003f8c <LL_APB1_GRP1_EnableClock>

    NVIC_SetPriority(TIM8_UP_TIM13_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 5, 0));
 800407a:	f7ff fefd 	bl	8003e78 <__NVIC_GetPriorityGrouping>
 800407e:	4603      	mov	r3, r0
 8004080:	2200      	movs	r2, #0
 8004082:	2105      	movs	r1, #5
 8004084:	4618      	mov	r0, r3
 8004086:	f7ff ff4d 	bl	8003f24 <NVIC_EncodePriority>
 800408a:	4603      	mov	r3, r0
 800408c:	4619      	mov	r1, r3
 800408e:	202c      	movs	r0, #44	; 0x2c
 8004090:	f7ff ff1e 	bl	8003ed0 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004094:	202c      	movs	r0, #44	; 0x2c
 8004096:	f7ff fefd 	bl	8003e94 <__NVIC_EnableIRQ>

    TIM_InitStruct.Prescaler = (uint16_t)(960 - LL_TIM_IC_FILTER_FDIV1_N2);
 800409a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800409e:	80bb      	strh	r3, [r7, #4]
    TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80040a0:	2300      	movs	r3, #0
 80040a2:	60bb      	str	r3, [r7, #8]
    TIM_InitStruct.Autoreload = 65535;
 80040a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040a8:	60fb      	str	r3, [r7, #12]
    TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80040aa:	2300      	movs	r3, #0
 80040ac:	613b      	str	r3, [r7, #16]
    LL_TIM_Init(TIM13, &TIM_InitStruct);
 80040ae:	1d3b      	adds	r3, r7, #4
 80040b0:	4619      	mov	r1, r3
 80040b2:	4805      	ldr	r0, [pc, #20]	; (80040c8 <TIM_Timer13_init+0x68>)
 80040b4:	f001 ff26 	bl	8005f04 <LL_TIM_Init>
    LL_TIM_DisableARRPreload(TIM13);
 80040b8:	4803      	ldr	r0, [pc, #12]	; (80040c8 <TIM_Timer13_init+0x68>)
 80040ba:	f7ff ff8f 	bl	8003fdc <LL_TIM_DisableARRPreload>
}
 80040be:	bf00      	nop
 80040c0:	3718      	adds	r7, #24
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	40001c00 	.word	0x40001c00

080040cc <configureTimerForRunTimeStats>:

volatile unsigned long ulHighFrequencyTimerTicks;

void configureTimerForRunTimeStats (void) {
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
    ulHighFrequencyTimerTicks = 0;
 80040d0:	4b05      	ldr	r3, [pc, #20]	; (80040e8 <configureTimerForRunTimeStats+0x1c>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	601a      	str	r2, [r3, #0]
    LL_TIM_EnableIT_UPDATE(TIM13);
 80040d6:	4805      	ldr	r0, [pc, #20]	; (80040ec <configureTimerForRunTimeStats+0x20>)
 80040d8:	f7ff ffb1 	bl	800403e <LL_TIM_EnableIT_UPDATE>
    LL_TIM_EnableCounter(TIM13);
 80040dc:	4803      	ldr	r0, [pc, #12]	; (80040ec <configureTimerForRunTimeStats+0x20>)
 80040de:	f7ff ff6d 	bl	8003fbc <LL_TIM_EnableCounter>
}
 80040e2:	bf00      	nop
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	20000c00 	.word	0x20000c00
 80040ec:	40001c00 	.word	0x40001c00

080040f0 <getRunTimeCounterValue>:

unsigned long getRunTimeCounterValue (void) {
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
    return ulHighFrequencyTimerTicks;
 80040f4:	4b03      	ldr	r3, [pc, #12]	; (8004104 <getRunTimeCounterValue+0x14>)
 80040f6:	681b      	ldr	r3, [r3, #0]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	20000c00 	.word	0x20000c00

08004108 <TIM8_UP_TIM13_IRQHandler>:

void TIM8_UP_TIM13_IRQHandler (void) {
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
    if (LL_TIM_IsActiveFlag_UPDATE(TIM13)) {
 800410c:	4807      	ldr	r0, [pc, #28]	; (800412c <TIM8_UP_TIM13_IRQHandler+0x24>)
 800410e:	f7ff ff83 	bl	8004018 <LL_TIM_IsActiveFlag_UPDATE>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d004      	beq.n	8004122 <TIM8_UP_TIM13_IRQHandler+0x1a>
        ulHighFrequencyTimerTicks++;
 8004118:	4b05      	ldr	r3, [pc, #20]	; (8004130 <TIM8_UP_TIM13_IRQHandler+0x28>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	3301      	adds	r3, #1
 800411e:	4a04      	ldr	r2, [pc, #16]	; (8004130 <TIM8_UP_TIM13_IRQHandler+0x28>)
 8004120:	6013      	str	r3, [r2, #0]
    }
    LL_TIM_ClearFlag_UPDATE(TIM13);
 8004122:	4802      	ldr	r0, [pc, #8]	; (800412c <TIM8_UP_TIM13_IRQHandler+0x24>)
 8004124:	f7ff ff6a 	bl	8003ffc <LL_TIM_ClearFlag_UPDATE>
}
 8004128:	bf00      	nop
 800412a:	bd80      	pop	{r7, pc}
 800412c:	40001c00 	.word	0x40001c00
 8004130:	20000c00 	.word	0x20000c00

08004134 <__NVIC_EnableIRQ>:
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	4603      	mov	r3, r0
 800413c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800413e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004142:	2b00      	cmp	r3, #0
 8004144:	db0b      	blt.n	800415e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004146:	79fb      	ldrb	r3, [r7, #7]
 8004148:	f003 021f 	and.w	r2, r3, #31
 800414c:	4907      	ldr	r1, [pc, #28]	; (800416c <__NVIC_EnableIRQ+0x38>)
 800414e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004152:	095b      	lsrs	r3, r3, #5
 8004154:	2001      	movs	r0, #1
 8004156:	fa00 f202 	lsl.w	r2, r0, r2
 800415a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800415e:	bf00      	nop
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	e000e100 	.word	0xe000e100

08004170 <__NVIC_SetPriority>:
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	4603      	mov	r3, r0
 8004178:	6039      	str	r1, [r7, #0]
 800417a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800417c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004180:	2b00      	cmp	r3, #0
 8004182:	db0a      	blt.n	800419a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	b2da      	uxtb	r2, r3
 8004188:	490c      	ldr	r1, [pc, #48]	; (80041bc <__NVIC_SetPriority+0x4c>)
 800418a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800418e:	0112      	lsls	r2, r2, #4
 8004190:	b2d2      	uxtb	r2, r2
 8004192:	440b      	add	r3, r1
 8004194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004198:	e00a      	b.n	80041b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	b2da      	uxtb	r2, r3
 800419e:	4908      	ldr	r1, [pc, #32]	; (80041c0 <__NVIC_SetPriority+0x50>)
 80041a0:	79fb      	ldrb	r3, [r7, #7]
 80041a2:	f003 030f 	and.w	r3, r3, #15
 80041a6:	3b04      	subs	r3, #4
 80041a8:	0112      	lsls	r2, r2, #4
 80041aa:	b2d2      	uxtb	r2, r2
 80041ac:	440b      	add	r3, r1
 80041ae:	761a      	strb	r2, [r3, #24]
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	e000e100 	.word	0xe000e100
 80041c0:	e000ed00 	.word	0xe000ed00

080041c4 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	60da      	str	r2, [r3, #12]
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	615a      	str	r2, [r3, #20]
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0320 	and.w	r3, r3, #32
 8004220:	2b20      	cmp	r3, #32
 8004222:	bf0c      	ite	eq
 8004224:	2301      	moveq	r3, #1
 8004226:	2300      	movne	r3, #0
 8004228:	b2db      	uxtb	r3, r3
}
 800422a:	4618      	mov	r0, r3
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8004236:	b480      	push	{r7}
 8004238:	b083      	sub	sp, #12
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004246:	2b80      	cmp	r3, #128	; 0x80
 8004248:	bf0c      	ite	eq
 800424a:	2301      	moveq	r3, #1
 800424c:	2300      	movne	r3, #0
 800424e:	b2db      	uxtb	r3, r3
}
 8004250:	4618      	mov	r0, r3
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800425c:	b480      	push	{r7}
 800425e:	b089      	sub	sp, #36	; 0x24
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	330c      	adds	r3, #12
 8004268:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	e853 3f00 	ldrex	r3, [r3]
 8004270:	60bb      	str	r3, [r7, #8]
   return(result);
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	f043 0320 	orr.w	r3, r3, #32
 8004278:	61fb      	str	r3, [r7, #28]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	330c      	adds	r3, #12
 800427e:	69fa      	ldr	r2, [r7, #28]
 8004280:	61ba      	str	r2, [r7, #24]
 8004282:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004284:	6979      	ldr	r1, [r7, #20]
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	e841 2300 	strex	r3, r2, [r1]
 800428c:	613b      	str	r3, [r7, #16]
   return(result);
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1e7      	bne.n	8004264 <LL_USART_EnableIT_RXNE+0x8>
}
 8004294:	bf00      	nop
 8004296:	bf00      	nop
 8004298:	3724      	adds	r7, #36	; 0x24
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(USART_TypeDef *USARTx)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b083      	sub	sp, #12
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	f003 0320 	and.w	r3, r3, #32
 80042b2:	2b20      	cmp	r3, #32
 80042b4:	bf0c      	ite	eq
 80042b6:	2301      	moveq	r3, #1
 80042b8:	2300      	movne	r3, #0
 80042ba:	b2db      	uxtb	r3, r3
}
 80042bc:	4618      	mov	r0, r3
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	b2db      	uxtb	r3, r3
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b083      	sub	sp, #12
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
 80042ea:	460b      	mov	r3, r1
 80042ec:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80042ee:	78fa      	ldrb	r2, [r7, #3]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	605a      	str	r2, [r3, #4]
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <LL_APB1_GRP1_EnableClock>:
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8004308:	4b08      	ldr	r3, [pc, #32]	; (800432c <LL_APB1_GRP1_EnableClock+0x2c>)
 800430a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800430c:	4907      	ldr	r1, [pc, #28]	; (800432c <LL_APB1_GRP1_EnableClock+0x2c>)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4313      	orrs	r3, r2
 8004312:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8004314:	4b05      	ldr	r3, [pc, #20]	; (800432c <LL_APB1_GRP1_EnableClock+0x2c>)
 8004316:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4013      	ands	r3, r2
 800431c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800431e:	68fb      	ldr	r3, [r7, #12]
}
 8004320:	bf00      	nop
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	40023800 	.word	0x40023800

08004330 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8004338:	4b08      	ldr	r3, [pc, #32]	; (800435c <LL_APB2_GRP1_EnableClock+0x2c>)
 800433a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800433c:	4907      	ldr	r1, [pc, #28]	; (800435c <LL_APB2_GRP1_EnableClock+0x2c>)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4313      	orrs	r3, r2
 8004342:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004344:	4b05      	ldr	r3, [pc, #20]	; (800435c <LL_APB2_GRP1_EnableClock+0x2c>)
 8004346:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4013      	ands	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800434e:	68fb      	ldr	r3, [r7, #12]
}
 8004350:	bf00      	nop
 8004352:	3714      	adds	r7, #20
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	40023800 	.word	0x40023800

08004360 <UART_Driver_RecieveCallback>:
 *********************************************************************************************************************/
static void UART_Driver_RecieveCallback (eUart_Driver_Enum_t uart);
/**********************************************************************************************************************
 * Definitions of private functions
 *********************************************************************************************************************/
static void UART_Driver_RecieveCallback (eUart_Driver_Enum_t uart) {
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	4603      	mov	r3, r0
 8004368:	71fb      	strb	r3, [r7, #7]
    if (LL_USART_IsEnabledIT_RXNE(static_uart_lut[uart].usart) && LL_USART_IsActiveFlag_RXNE(static_uart_lut[uart].usart)) {
 800436a:	79fa      	ldrb	r2, [r7, #7]
 800436c:	491b      	ldr	r1, [pc, #108]	; (80043dc <UART_Driver_RecieveCallback+0x7c>)
 800436e:	4613      	mov	r3, r2
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	4413      	add	r3, r2
 8004374:	011b      	lsls	r3, r3, #4
 8004376:	440b      	add	r3, r1
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4618      	mov	r0, r3
 800437c:	f7ff ff91 	bl	80042a2 <LL_USART_IsEnabledIT_RXNE>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d025      	beq.n	80043d2 <UART_Driver_RecieveCallback+0x72>
 8004386:	79fa      	ldrb	r2, [r7, #7]
 8004388:	4914      	ldr	r1, [pc, #80]	; (80043dc <UART_Driver_RecieveCallback+0x7c>)
 800438a:	4613      	mov	r3, r2
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	4413      	add	r3, r2
 8004390:	011b      	lsls	r3, r3, #4
 8004392:	440b      	add	r3, r1
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4618      	mov	r0, r3
 8004398:	f7ff ff3a 	bl	8004210 <LL_USART_IsActiveFlag_RXNE>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d017      	beq.n	80043d2 <UART_Driver_RecieveCallback+0x72>
        uint8_t byte = 0;
 80043a2:	2300      	movs	r3, #0
 80043a4:	73fb      	strb	r3, [r7, #15]
        byte = LL_USART_ReceiveData8(static_uart_lut[uart].usart);
 80043a6:	79fa      	ldrb	r2, [r7, #7]
 80043a8:	490c      	ldr	r1, [pc, #48]	; (80043dc <UART_Driver_RecieveCallback+0x7c>)
 80043aa:	4613      	mov	r3, r2
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	4413      	add	r3, r2
 80043b0:	011b      	lsls	r3, r3, #4
 80043b2:	440b      	add	r3, r1
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7ff ff86 	bl	80042c8 <LL_USART_ReceiveData8>
 80043bc:	4603      	mov	r3, r0
 80043be:	73fb      	strb	r3, [r7, #15]
        CIRC_Buffer_put(dynamic_uart_lut[uart].circ_buffer_ptr, byte);
 80043c0:	79fb      	ldrb	r3, [r7, #7]
 80043c2:	4a07      	ldr	r2, [pc, #28]	; (80043e0 <UART_Driver_RecieveCallback+0x80>)
 80043c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043c8:	7bfa      	ldrb	r2, [r7, #15]
 80043ca:	4611      	mov	r1, r2
 80043cc:	4618      	mov	r0, r3
 80043ce:	f006 fd27 	bl	800ae20 <CIRC_Buffer_put>
    }
}
 80043d2:	bf00      	nop
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	0800ecc8 	.word	0x0800ecc8
 80043e0:	20000c04 	.word	0x20000c04

080043e4 <USART1_IRQHandler>:

void USART1_IRQHandler (void) {
 80043e4:	b580      	push	{r7, lr}
 80043e6:	af00      	add	r7, sp, #0
    UART_Driver_RecieveCallback(eUartDriver_USART1);
 80043e8:	2000      	movs	r0, #0
 80043ea:	f7ff ffb9 	bl	8004360 <UART_Driver_RecieveCallback>
}
 80043ee:	bf00      	nop
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <USART2_IRQHandler>:

void USART2_IRQHandler (void) {
 80043f2:	b580      	push	{r7, lr}
 80043f4:	af00      	add	r7, sp, #0
    UART_Driver_RecieveCallback(eUartDriver_USART2);
 80043f6:	2001      	movs	r0, #1
 80043f8:	f7ff ffb2 	bl	8004360 <UART_Driver_RecieveCallback>
}
 80043fc:	bf00      	nop
 80043fe:	bd80      	pop	{r7, pc}

08004400 <UART_Driver_InitGpio>:

static bool UART_Driver_InitGpio (eUart_Driver_Enum_t uart) {
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	4603      	mov	r3, r0
 8004408:	71fb      	strb	r3, [r7, #7]
    /* Enable USART GPIO RX TX pins */
    if (uart >= eUartDriver_Last) {
 800440a:	79fb      	ldrb	r3, [r7, #7]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d901      	bls.n	8004414 <UART_Driver_InitGpio+0x14>
        return false;
 8004410:	2300      	movs	r3, #0
 8004412:	e06f      	b.n	80044f4 <UART_Driver_InitGpio+0xf4>
    }

    if (GPIO_Driver_Init(static_uart_lut[uart].rx) == false) {
 8004414:	79fa      	ldrb	r2, [r7, #7]
 8004416:	4939      	ldr	r1, [pc, #228]	; (80044fc <UART_Driver_InitGpio+0xfc>)
 8004418:	4613      	mov	r3, r2
 800441a:	005b      	lsls	r3, r3, #1
 800441c:	4413      	add	r3, r2
 800441e:	011b      	lsls	r3, r3, #4
 8004420:	440b      	add	r3, r1
 8004422:	3304      	adds	r3, #4
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff fac8 	bl	80039bc <GPIO_Driver_Init>
 800442c:	4603      	mov	r3, r0
 800442e:	f083 0301 	eor.w	r3, r3, #1
 8004432:	b2db      	uxtb	r3, r3
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <UART_Driver_InitGpio+0x3c>
        return false;
 8004438:	2300      	movs	r3, #0
 800443a:	e05b      	b.n	80044f4 <UART_Driver_InitGpio+0xf4>
    }
    if (GPIO_Driver_Init(static_uart_lut[uart].tx) == false) {
 800443c:	79fa      	ldrb	r2, [r7, #7]
 800443e:	492f      	ldr	r1, [pc, #188]	; (80044fc <UART_Driver_InitGpio+0xfc>)
 8004440:	4613      	mov	r3, r2
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	4413      	add	r3, r2
 8004446:	011b      	lsls	r3, r3, #4
 8004448:	440b      	add	r3, r1
 800444a:	3305      	adds	r3, #5
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	4618      	mov	r0, r3
 8004450:	f7ff fab4 	bl	80039bc <GPIO_Driver_Init>
 8004454:	4603      	mov	r3, r0
 8004456:	f083 0301 	eor.w	r3, r3, #1
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	d001      	beq.n	8004464 <UART_Driver_InitGpio+0x64>
        return false;
 8004460:	2300      	movs	r3, #0
 8004462:	e047      	b.n	80044f4 <UART_Driver_InitGpio+0xf4>
    }

    if (static_uart_lut[uart].hw_control_enabled == true) {
 8004464:	79fa      	ldrb	r2, [r7, #7]
 8004466:	4925      	ldr	r1, [pc, #148]	; (80044fc <UART_Driver_InitGpio+0xfc>)
 8004468:	4613      	mov	r3, r2
 800446a:	005b      	lsls	r3, r3, #1
 800446c:	4413      	add	r3, r2
 800446e:	011b      	lsls	r3, r3, #4
 8004470:	440b      	add	r3, r1
 8004472:	3306      	adds	r3, #6
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d03b      	beq.n	80044f2 <UART_Driver_InitGpio+0xf2>
        if (GPIO_Driver_Init(static_uart_lut[uart].cts) == false) {
 800447a:	79fa      	ldrb	r2, [r7, #7]
 800447c:	491f      	ldr	r1, [pc, #124]	; (80044fc <UART_Driver_InitGpio+0xfc>)
 800447e:	4613      	mov	r3, r2
 8004480:	005b      	lsls	r3, r3, #1
 8004482:	4413      	add	r3, r2
 8004484:	011b      	lsls	r3, r3, #4
 8004486:	440b      	add	r3, r1
 8004488:	3308      	adds	r3, #8
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	4618      	mov	r0, r3
 800448e:	f7ff fa95 	bl	80039bc <GPIO_Driver_Init>
 8004492:	4603      	mov	r3, r0
 8004494:	f083 0301 	eor.w	r3, r3, #1
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <UART_Driver_InitGpio+0xa2>
            return false;
 800449e:	2300      	movs	r3, #0
 80044a0:	e028      	b.n	80044f4 <UART_Driver_InitGpio+0xf4>
        }
        if (GPIO_Driver_Init(static_uart_lut[uart].rts) == false) {
 80044a2:	79fa      	ldrb	r2, [r7, #7]
 80044a4:	4915      	ldr	r1, [pc, #84]	; (80044fc <UART_Driver_InitGpio+0xfc>)
 80044a6:	4613      	mov	r3, r2
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	4413      	add	r3, r2
 80044ac:	011b      	lsls	r3, r3, #4
 80044ae:	440b      	add	r3, r1
 80044b0:	3309      	adds	r3, #9
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7ff fa81 	bl	80039bc <GPIO_Driver_Init>
 80044ba:	4603      	mov	r3, r0
 80044bc:	f083 0301 	eor.w	r3, r3, #1
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <UART_Driver_InitGpio+0xca>
            return false;
 80044c6:	2300      	movs	r3, #0
 80044c8:	e014      	b.n	80044f4 <UART_Driver_InitGpio+0xf4>
        }
        if (GPIO_Driver_Init(static_uart_lut[uart].dtr) == false) {
 80044ca:	79fa      	ldrb	r2, [r7, #7]
 80044cc:	490b      	ldr	r1, [pc, #44]	; (80044fc <UART_Driver_InitGpio+0xfc>)
 80044ce:	4613      	mov	r3, r2
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	4413      	add	r3, r2
 80044d4:	011b      	lsls	r3, r3, #4
 80044d6:	440b      	add	r3, r1
 80044d8:	3307      	adds	r3, #7
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	4618      	mov	r0, r3
 80044de:	f7ff fa6d 	bl	80039bc <GPIO_Driver_Init>
 80044e2:	4603      	mov	r3, r0
 80044e4:	f083 0301 	eor.w	r3, r3, #1
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <UART_Driver_InitGpio+0xf2>
            return false;
 80044ee:	2300      	movs	r3, #0
 80044f0:	e000      	b.n	80044f4 <UART_Driver_InitGpio+0xf4>
        }
    }

    return true;
 80044f2:	2301      	movs	r3, #1
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3708      	adds	r7, #8
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	0800ecc8 	.word	0x0800ecc8

08004500 <UART_Driver_Init>:

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/

bool UART_Driver_Init (eUart_Driver_Enum_t uart, uint32_t baudRate, uint16_t message_size) {
 8004500:	b590      	push	{r4, r7, lr}
 8004502:	b08b      	sub	sp, #44	; 0x2c
 8004504:	af00      	add	r7, sp, #0
 8004506:	4603      	mov	r3, r0
 8004508:	6039      	str	r1, [r7, #0]
 800450a:	71fb      	strb	r3, [r7, #7]
 800450c:	4613      	mov	r3, r2
 800450e:	80bb      	strh	r3, [r7, #4]
    /* Initialize GPIO */
    if (UART_Driver_InitGpio(uart) == false) {
 8004510:	79fb      	ldrb	r3, [r7, #7]
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff ff74 	bl	8004400 <UART_Driver_InitGpio>
 8004518:	4603      	mov	r3, r0
 800451a:	f083 0301 	eor.w	r3, r3, #1
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <UART_Driver_Init+0x28>
        return false;
 8004524:	2300      	movs	r3, #0
 8004526:	e0c6      	b.n	80046b6 <UART_Driver_Init+0x1b6>
    }

    /* Peripheral clock enable */
    static_uart_lut[uart].clock_function(static_uart_lut[uart].clock_function_args);
 8004528:	79fa      	ldrb	r2, [r7, #7]
 800452a:	4965      	ldr	r1, [pc, #404]	; (80046c0 <UART_Driver_Init+0x1c0>)
 800452c:	4613      	mov	r3, r2
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	4413      	add	r3, r2
 8004532:	011b      	lsls	r3, r3, #4
 8004534:	440b      	add	r3, r1
 8004536:	3324      	adds	r3, #36	; 0x24
 8004538:	6819      	ldr	r1, [r3, #0]
 800453a:	79fa      	ldrb	r2, [r7, #7]
 800453c:	4860      	ldr	r0, [pc, #384]	; (80046c0 <UART_Driver_Init+0x1c0>)
 800453e:	4613      	mov	r3, r2
 8004540:	005b      	lsls	r3, r3, #1
 8004542:	4413      	add	r3, r2
 8004544:	011b      	lsls	r3, r3, #4
 8004546:	4403      	add	r3, r0
 8004548:	3328      	adds	r3, #40	; 0x28
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4618      	mov	r0, r3
 800454e:	4788      	blx	r1

    /* USART interrupt Init */
    NVIC_SetPriority(static_uart_lut[uart].interupt, 32);
 8004550:	79fa      	ldrb	r2, [r7, #7]
 8004552:	495b      	ldr	r1, [pc, #364]	; (80046c0 <UART_Driver_Init+0x1c0>)
 8004554:	4613      	mov	r3, r2
 8004556:	005b      	lsls	r3, r3, #1
 8004558:	4413      	add	r3, r2
 800455a:	011b      	lsls	r3, r3, #4
 800455c:	440b      	add	r3, r1
 800455e:	332c      	adds	r3, #44	; 0x2c
 8004560:	881b      	ldrh	r3, [r3, #0]
 8004562:	b25b      	sxtb	r3, r3
 8004564:	2120      	movs	r1, #32
 8004566:	4618      	mov	r0, r3
 8004568:	f7ff fe02 	bl	8004170 <__NVIC_SetPriority>
    NVIC_EnableIRQ(static_uart_lut[uart].interupt);
 800456c:	79fa      	ldrb	r2, [r7, #7]
 800456e:	4954      	ldr	r1, [pc, #336]	; (80046c0 <UART_Driver_Init+0x1c0>)
 8004570:	4613      	mov	r3, r2
 8004572:	005b      	lsls	r3, r3, #1
 8004574:	4413      	add	r3, r2
 8004576:	011b      	lsls	r3, r3, #4
 8004578:	440b      	add	r3, r1
 800457a:	332c      	adds	r3, #44	; 0x2c
 800457c:	881b      	ldrh	r3, [r3, #0]
 800457e:	b25b      	sxtb	r3, r3
 8004580:	4618      	mov	r0, r3
 8004582:	f7ff fdd7 	bl	8004134 <__NVIC_EnableIRQ>

    /* Initialize USART configuration */
    LL_USART_InitTypeDef USART_InitStruct = {0};
 8004586:	f107 0308 	add.w	r3, r7, #8
 800458a:	2200      	movs	r2, #0
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	605a      	str	r2, [r3, #4]
 8004590:	609a      	str	r2, [r3, #8]
 8004592:	60da      	str	r2, [r3, #12]
 8004594:	611a      	str	r2, [r3, #16]
 8004596:	615a      	str	r2, [r3, #20]
 8004598:	619a      	str	r2, [r3, #24]
    USART_InitStruct.BaudRate = baudRate;
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	60bb      	str	r3, [r7, #8]
    USART_InitStruct.DataWidth = static_uart_lut[uart].data_width;
 800459e:	79fa      	ldrb	r2, [r7, #7]
 80045a0:	4947      	ldr	r1, [pc, #284]	; (80046c0 <UART_Driver_Init+0x1c0>)
 80045a2:	4613      	mov	r3, r2
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	4413      	add	r3, r2
 80045a8:	011b      	lsls	r3, r3, #4
 80045aa:	440b      	add	r3, r1
 80045ac:	330c      	adds	r3, #12
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	60fb      	str	r3, [r7, #12]
    USART_InitStruct.StopBits = static_uart_lut[uart].stop_bits;
 80045b2:	79fa      	ldrb	r2, [r7, #7]
 80045b4:	4942      	ldr	r1, [pc, #264]	; (80046c0 <UART_Driver_Init+0x1c0>)
 80045b6:	4613      	mov	r3, r2
 80045b8:	005b      	lsls	r3, r3, #1
 80045ba:	4413      	add	r3, r2
 80045bc:	011b      	lsls	r3, r3, #4
 80045be:	440b      	add	r3, r1
 80045c0:	3310      	adds	r3, #16
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	613b      	str	r3, [r7, #16]
    USART_InitStruct.Parity = static_uart_lut[uart].parity;
 80045c6:	79fa      	ldrb	r2, [r7, #7]
 80045c8:	493d      	ldr	r1, [pc, #244]	; (80046c0 <UART_Driver_Init+0x1c0>)
 80045ca:	4613      	mov	r3, r2
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	4413      	add	r3, r2
 80045d0:	011b      	lsls	r3, r3, #4
 80045d2:	440b      	add	r3, r1
 80045d4:	3314      	adds	r3, #20
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	617b      	str	r3, [r7, #20]
    USART_InitStruct.TransferDirection = static_uart_lut[uart].transfer_direction;
 80045da:	79fa      	ldrb	r2, [r7, #7]
 80045dc:	4938      	ldr	r1, [pc, #224]	; (80046c0 <UART_Driver_Init+0x1c0>)
 80045de:	4613      	mov	r3, r2
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	4413      	add	r3, r2
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	440b      	add	r3, r1
 80045e8:	3318      	adds	r3, #24
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	61bb      	str	r3, [r7, #24]
    USART_InitStruct.HardwareFlowControl = static_uart_lut[uart].hardware_flow_control;
 80045ee:	79fa      	ldrb	r2, [r7, #7]
 80045f0:	4933      	ldr	r1, [pc, #204]	; (80046c0 <UART_Driver_Init+0x1c0>)
 80045f2:	4613      	mov	r3, r2
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	4413      	add	r3, r2
 80045f8:	011b      	lsls	r3, r3, #4
 80045fa:	440b      	add	r3, r1
 80045fc:	331c      	adds	r3, #28
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	61fb      	str	r3, [r7, #28]
    USART_InitStruct.OverSampling = static_uart_lut[uart].over_sampling;
 8004602:	79fa      	ldrb	r2, [r7, #7]
 8004604:	492e      	ldr	r1, [pc, #184]	; (80046c0 <UART_Driver_Init+0x1c0>)
 8004606:	4613      	mov	r3, r2
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	4413      	add	r3, r2
 800460c:	011b      	lsls	r3, r3, #4
 800460e:	440b      	add	r3, r1
 8004610:	3320      	adds	r3, #32
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	623b      	str	r3, [r7, #32]

    ErrorStatus status = ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    status = LL_USART_Init(static_uart_lut[uart].usart, &USART_InitStruct);
 800461c:	79fa      	ldrb	r2, [r7, #7]
 800461e:	4928      	ldr	r1, [pc, #160]	; (80046c0 <UART_Driver_Init+0x1c0>)
 8004620:	4613      	mov	r3, r2
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	4413      	add	r3, r2
 8004626:	011b      	lsls	r3, r3, #4
 8004628:	440b      	add	r3, r1
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f107 0208 	add.w	r2, r7, #8
 8004630:	4611      	mov	r1, r2
 8004632:	4618      	mov	r0, r3
 8004634:	f001 ff66 	bl	8006504 <LL_USART_Init>
 8004638:	4603      	mov	r3, r0
 800463a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (status != SUCCESS) {
 800463e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <UART_Driver_Init+0x14a>
        return false;
 8004646:	2300      	movs	r3, #0
 8004648:	e035      	b.n	80046b6 <UART_Driver_Init+0x1b6>
    }
    LL_USART_ConfigAsyncMode(static_uart_lut[uart].usart);
 800464a:	79fa      	ldrb	r2, [r7, #7]
 800464c:	491c      	ldr	r1, [pc, #112]	; (80046c0 <UART_Driver_Init+0x1c0>)
 800464e:	4613      	mov	r3, r2
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	4413      	add	r3, r2
 8004654:	011b      	lsls	r3, r3, #4
 8004656:	440b      	add	r3, r1
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4618      	mov	r0, r3
 800465c:	f7ff fdc2 	bl	80041e4 <LL_USART_ConfigAsyncMode>
    LL_USART_Enable(static_uart_lut[uart].usart);
 8004660:	79fa      	ldrb	r2, [r7, #7]
 8004662:	4917      	ldr	r1, [pc, #92]	; (80046c0 <UART_Driver_Init+0x1c0>)
 8004664:	4613      	mov	r3, r2
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	4413      	add	r3, r2
 800466a:	011b      	lsls	r3, r3, #4
 800466c:	440b      	add	r3, r1
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4618      	mov	r0, r3
 8004672:	f7ff fda7 	bl	80041c4 <LL_USART_Enable>

    /* Enable RXNE interrupt */
    LL_USART_EnableIT_RXNE(static_uart_lut[uart].usart);
 8004676:	79fa      	ldrb	r2, [r7, #7]
 8004678:	4911      	ldr	r1, [pc, #68]	; (80046c0 <UART_Driver_Init+0x1c0>)
 800467a:	4613      	mov	r3, r2
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	4413      	add	r3, r2
 8004680:	011b      	lsls	r3, r3, #4
 8004682:	440b      	add	r3, r1
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4618      	mov	r0, r3
 8004688:	f7ff fde8 	bl	800425c <LL_USART_EnableIT_RXNE>

    /* Allocate a circular buffer */
    dynamic_uart_lut[uart].circ_buffer_ptr = CIRC_Buffer_init(message_size * BUFFER_OVERHEAD);
 800468c:	88ba      	ldrh	r2, [r7, #4]
 800468e:	4613      	mov	r3, r2
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	4413      	add	r3, r2
 8004694:	79fc      	ldrb	r4, [r7, #7]
 8004696:	4618      	mov	r0, r3
 8004698:	f006 fb5c 	bl	800ad54 <CIRC_Buffer_init>
 800469c:	4603      	mov	r3, r0
 800469e:	4a09      	ldr	r2, [pc, #36]	; (80046c4 <UART_Driver_Init+0x1c4>)
 80046a0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    if (dynamic_uart_lut[uart].circ_buffer_ptr == NULL) {
 80046a4:	79fb      	ldrb	r3, [r7, #7]
 80046a6:	4a07      	ldr	r2, [pc, #28]	; (80046c4 <UART_Driver_Init+0x1c4>)
 80046a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <UART_Driver_Init+0x1b4>
        return false;
 80046b0:	2300      	movs	r3, #0
 80046b2:	e000      	b.n	80046b6 <UART_Driver_Init+0x1b6>
    }
    return true;
 80046b4:	2301      	movs	r3, #1
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	372c      	adds	r7, #44	; 0x2c
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd90      	pop	{r4, r7, pc}
 80046be:	bf00      	nop
 80046c0:	0800ecc8 	.word	0x0800ecc8
 80046c4:	20000c04 	.word	0x20000c04

080046c8 <UART_Driver_SendString>:

bool UART_Driver_SendString (eUart_Driver_Enum_t uart, char *data, uint16_t length) {
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	4603      	mov	r3, r0
 80046d0:	6039      	str	r1, [r7, #0]
 80046d2:	71fb      	strb	r3, [r7, #7]
 80046d4:	4613      	mov	r3, r2
 80046d6:	80bb      	strh	r3, [r7, #4]
    if (uart >= eUartDriver_Last) {
 80046d8:	79fb      	ldrb	r3, [r7, #7]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d901      	bls.n	80046e2 <UART_Driver_SendString+0x1a>
        return false;
 80046de:	2300      	movs	r3, #0
 80046e0:	e032      	b.n	8004748 <UART_Driver_SendString+0x80>
    }
    if (data == NULL) {
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d101      	bne.n	80046ec <UART_Driver_SendString+0x24>
        return false;
 80046e8:	2300      	movs	r3, #0
 80046ea:	e02d      	b.n	8004748 <UART_Driver_SendString+0x80>
    }
    if (length == 0) {
 80046ec:	88bb      	ldrh	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <UART_Driver_SendString+0x2e>
        return false;
 80046f2:	2300      	movs	r3, #0
 80046f4:	e028      	b.n	8004748 <UART_Driver_SendString+0x80>
    }

    for (uint16_t i = 0; i < length; i++) {
 80046f6:	2300      	movs	r3, #0
 80046f8:	81fb      	strh	r3, [r7, #14]
 80046fa:	e020      	b.n	800473e <UART_Driver_SendString+0x76>
        while (LL_USART_IsActiveFlag_TXE(static_uart_lut[uart].usart) == 0) {
 80046fc:	bf00      	nop
 80046fe:	79fa      	ldrb	r2, [r7, #7]
 8004700:	4913      	ldr	r1, [pc, #76]	; (8004750 <UART_Driver_SendString+0x88>)
 8004702:	4613      	mov	r3, r2
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	4413      	add	r3, r2
 8004708:	011b      	lsls	r3, r3, #4
 800470a:	440b      	add	r3, r1
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4618      	mov	r0, r3
 8004710:	f7ff fd91 	bl	8004236 <LL_USART_IsActiveFlag_TXE>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d0f1      	beq.n	80046fe <UART_Driver_SendString+0x36>
        }
        LL_USART_TransmitData8(static_uart_lut[uart].usart, (uint8_t) data[i]);
 800471a:	79fa      	ldrb	r2, [r7, #7]
 800471c:	490c      	ldr	r1, [pc, #48]	; (8004750 <UART_Driver_SendString+0x88>)
 800471e:	4613      	mov	r3, r2
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	4413      	add	r3, r2
 8004724:	011b      	lsls	r3, r3, #4
 8004726:	440b      	add	r3, r1
 8004728:	6818      	ldr	r0, [r3, #0]
 800472a:	89fb      	ldrh	r3, [r7, #14]
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	4413      	add	r3, r2
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	4619      	mov	r1, r3
 8004734:	f7ff fdd5 	bl	80042e2 <LL_USART_TransmitData8>
    for (uint16_t i = 0; i < length; i++) {
 8004738:	89fb      	ldrh	r3, [r7, #14]
 800473a:	3301      	adds	r3, #1
 800473c:	81fb      	strh	r3, [r7, #14]
 800473e:	89fa      	ldrh	r2, [r7, #14]
 8004740:	88bb      	ldrh	r3, [r7, #4]
 8004742:	429a      	cmp	r2, r3
 8004744:	d3da      	bcc.n	80046fc <UART_Driver_SendString+0x34>
    }
    return true;
 8004746:	2301      	movs	r3, #1
}
 8004748:	4618      	mov	r0, r3
 800474a:	3710      	adds	r7, #16
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	0800ecc8 	.word	0x0800ecc8

08004754 <UART_Driver_GetByte>:

bool UART_Driver_GetByte (eUart_Driver_Enum_t uart, uint8_t *dest) {
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	4603      	mov	r3, r0
 800475c:	6039      	str	r1, [r7, #0]
 800475e:	71fb      	strb	r3, [r7, #7]
    if (uart >= eUartDriver_Last) {
 8004760:	79fb      	ldrb	r3, [r7, #7]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d901      	bls.n	800476a <UART_Driver_GetByte+0x16>
        return false;
 8004766:	2300      	movs	r3, #0
 8004768:	e00d      	b.n	8004786 <UART_Driver_GetByte+0x32>
    }
    if (dest == NULL) {
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d101      	bne.n	8004774 <UART_Driver_GetByte+0x20>
        return false;
 8004770:	2300      	movs	r3, #0
 8004772:	e008      	b.n	8004786 <UART_Driver_GetByte+0x32>
    }

    return CIRC_Buffer_get(dynamic_uart_lut[uart].circ_buffer_ptr, dest);
 8004774:	79fb      	ldrb	r3, [r7, #7]
 8004776:	4a06      	ldr	r2, [pc, #24]	; (8004790 <UART_Driver_GetByte+0x3c>)
 8004778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800477c:	6839      	ldr	r1, [r7, #0]
 800477e:	4618      	mov	r0, r3
 8004780:	f006 fb68 	bl	800ae54 <CIRC_Buffer_get>
 8004784:	4603      	mov	r3, r0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	20000c04 	.word	0x20000c04

08004794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800479a:	2300      	movs	r3, #0
 800479c:	607b      	str	r3, [r7, #4]
 800479e:	4b12      	ldr	r3, [pc, #72]	; (80047e8 <HAL_MspInit+0x54>)
 80047a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a2:	4a11      	ldr	r2, [pc, #68]	; (80047e8 <HAL_MspInit+0x54>)
 80047a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047a8:	6453      	str	r3, [r2, #68]	; 0x44
 80047aa:	4b0f      	ldr	r3, [pc, #60]	; (80047e8 <HAL_MspInit+0x54>)
 80047ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047b2:	607b      	str	r3, [r7, #4]
 80047b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80047b6:	2300      	movs	r3, #0
 80047b8:	603b      	str	r3, [r7, #0]
 80047ba:	4b0b      	ldr	r3, [pc, #44]	; (80047e8 <HAL_MspInit+0x54>)
 80047bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047be:	4a0a      	ldr	r2, [pc, #40]	; (80047e8 <HAL_MspInit+0x54>)
 80047c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047c4:	6413      	str	r3, [r2, #64]	; 0x40
 80047c6:	4b08      	ldr	r3, [pc, #32]	; (80047e8 <HAL_MspInit+0x54>)
 80047c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ce:	603b      	str	r3, [r7, #0]
 80047d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80047d2:	2200      	movs	r2, #0
 80047d4:	210f      	movs	r1, #15
 80047d6:	f06f 0001 	mvn.w	r0, #1
 80047da:	f000 fa71 	bl	8004cc0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80047de:	bf00      	nop
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	40023800 	.word	0x40023800

080047ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b08c      	sub	sp, #48	; 0x30
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80047f4:	2300      	movs	r3, #0
 80047f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80047f8:	2300      	movs	r3, #0
 80047fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 80047fc:	2200      	movs	r2, #0
 80047fe:	6879      	ldr	r1, [r7, #4]
 8004800:	201c      	movs	r0, #28
 8004802:	f000 fa5d 	bl	8004cc0 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004806:	201c      	movs	r0, #28
 8004808:	f000 fa76 	bl	8004cf8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800480c:	2300      	movs	r3, #0
 800480e:	60fb      	str	r3, [r7, #12]
 8004810:	4b20      	ldr	r3, [pc, #128]	; (8004894 <HAL_InitTick+0xa8>)
 8004812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004814:	4a1f      	ldr	r2, [pc, #124]	; (8004894 <HAL_InitTick+0xa8>)
 8004816:	f043 0301 	orr.w	r3, r3, #1
 800481a:	6413      	str	r3, [r2, #64]	; 0x40
 800481c:	4b1d      	ldr	r3, [pc, #116]	; (8004894 <HAL_InitTick+0xa8>)
 800481e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004820:	f003 0301 	and.w	r3, r3, #1
 8004824:	60fb      	str	r3, [r7, #12]
 8004826:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004828:	f107 0210 	add.w	r2, r7, #16
 800482c:	f107 0314 	add.w	r3, r7, #20
 8004830:	4611      	mov	r1, r2
 8004832:	4618      	mov	r0, r3
 8004834:	f000 fa8e 	bl	8004d54 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004838:	f000 fa78 	bl	8004d2c <HAL_RCC_GetPCLK1Freq>
 800483c:	4603      	mov	r3, r0
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004844:	4a14      	ldr	r2, [pc, #80]	; (8004898 <HAL_InitTick+0xac>)
 8004846:	fba2 2303 	umull	r2, r3, r2, r3
 800484a:	0c9b      	lsrs	r3, r3, #18
 800484c:	3b01      	subs	r3, #1
 800484e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8004850:	4b12      	ldr	r3, [pc, #72]	; (800489c <HAL_InitTick+0xb0>)
 8004852:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004856:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8004858:	4b10      	ldr	r3, [pc, #64]	; (800489c <HAL_InitTick+0xb0>)
 800485a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800485e:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8004860:	4a0e      	ldr	r2, [pc, #56]	; (800489c <HAL_InitTick+0xb0>)
 8004862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004864:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8004866:	4b0d      	ldr	r3, [pc, #52]	; (800489c <HAL_InitTick+0xb0>)
 8004868:	2200      	movs	r2, #0
 800486a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800486c:	4b0b      	ldr	r3, [pc, #44]	; (800489c <HAL_InitTick+0xb0>)
 800486e:	2200      	movs	r2, #0
 8004870:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8004872:	480a      	ldr	r0, [pc, #40]	; (800489c <HAL_InitTick+0xb0>)
 8004874:	f000 faa0 	bl	8004db8 <HAL_TIM_Base_Init>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d104      	bne.n	8004888 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800487e:	4807      	ldr	r0, [pc, #28]	; (800489c <HAL_InitTick+0xb0>)
 8004880:	f000 faf4 	bl	8004e6c <HAL_TIM_Base_Start_IT>
 8004884:	4603      	mov	r3, r0
 8004886:	e000      	b.n	800488a <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
}
 800488a:	4618      	mov	r0, r3
 800488c:	3730      	adds	r7, #48	; 0x30
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	40023800 	.word	0x40023800
 8004898:	431bde83 	.word	0x431bde83
 800489c:	20000c0c 	.word	0x20000c0c

080048a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80048a0:	b480      	push	{r7}
 80048a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80048a4:	e7fe      	b.n	80048a4 <NMI_Handler+0x4>

080048a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80048a6:	b480      	push	{r7}
 80048a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80048aa:	e7fe      	b.n	80048aa <HardFault_Handler+0x4>

080048ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80048b0:	e7fe      	b.n	80048b0 <MemManage_Handler+0x4>

080048b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80048b2:	b480      	push	{r7}
 80048b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80048b6:	e7fe      	b.n	80048b6 <BusFault_Handler+0x4>

080048b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80048b8:	b480      	push	{r7}
 80048ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80048bc:	e7fe      	b.n	80048bc <UsageFault_Handler+0x4>

080048be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80048be:	b480      	push	{r7}
 80048c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80048c2:	bf00      	nop
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80048d0:	4802      	ldr	r0, [pc, #8]	; (80048dc <TIM2_IRQHandler+0x10>)
 80048d2:	f000 fb3b 	bl	8004f4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80048d6:	bf00      	nop
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	20000c0c 	.word	0x20000c0c

080048e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80048e0:	b480      	push	{r7}
 80048e2:	af00      	add	r7, sp, #0
	return 1;
 80048e4:	2301      	movs	r3, #1
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <_kill>:

int _kill(int pid, int sig)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80048fa:	f006 fd9f 	bl	800b43c <__errno>
 80048fe:	4603      	mov	r3, r0
 8004900:	2216      	movs	r2, #22
 8004902:	601a      	str	r2, [r3, #0]
	return -1;
 8004904:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004908:	4618      	mov	r0, r3
 800490a:	3708      	adds	r7, #8
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <_exit>:

void _exit (int status)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004918:	f04f 31ff 	mov.w	r1, #4294967295
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f7ff ffe7 	bl	80048f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004922:	e7fe      	b.n	8004922 <_exit+0x12>

08004924 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b086      	sub	sp, #24
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004930:	2300      	movs	r3, #0
 8004932:	617b      	str	r3, [r7, #20]
 8004934:	e00a      	b.n	800494c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004936:	f3af 8000 	nop.w
 800493a:	4601      	mov	r1, r0
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	1c5a      	adds	r2, r3, #1
 8004940:	60ba      	str	r2, [r7, #8]
 8004942:	b2ca      	uxtb	r2, r1
 8004944:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	3301      	adds	r3, #1
 800494a:	617b      	str	r3, [r7, #20]
 800494c:	697a      	ldr	r2, [r7, #20]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	429a      	cmp	r2, r3
 8004952:	dbf0      	blt.n	8004936 <_read+0x12>
	}

return len;
 8004954:	687b      	ldr	r3, [r7, #4]
}
 8004956:	4618      	mov	r0, r3
 8004958:	3718      	adds	r7, #24
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b086      	sub	sp, #24
 8004962:	af00      	add	r7, sp, #0
 8004964:	60f8      	str	r0, [r7, #12]
 8004966:	60b9      	str	r1, [r7, #8]
 8004968:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800496a:	2300      	movs	r3, #0
 800496c:	617b      	str	r3, [r7, #20]
 800496e:	e009      	b.n	8004984 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	1c5a      	adds	r2, r3, #1
 8004974:	60ba      	str	r2, [r7, #8]
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	4618      	mov	r0, r3
 800497a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	3301      	adds	r3, #1
 8004982:	617b      	str	r3, [r7, #20]
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	429a      	cmp	r2, r3
 800498a:	dbf1      	blt.n	8004970 <_write+0x12>
	}
	return len;
 800498c:	687b      	ldr	r3, [r7, #4]
}
 800498e:	4618      	mov	r0, r3
 8004990:	3718      	adds	r7, #24
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <_close>:

int _close(int file)
{
 8004996:	b480      	push	{r7}
 8004998:	b083      	sub	sp, #12
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
	return -1;
 800499e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
 80049b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80049be:	605a      	str	r2, [r3, #4]
	return 0;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr

080049ce <_isatty>:

int _isatty(int file)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b083      	sub	sp, #12
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
	return 1;
 80049d6:	2301      	movs	r3, #1
}
 80049d8:	4618      	mov	r0, r3
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
	return 0;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3714      	adds	r7, #20
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
	...

08004a00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b086      	sub	sp, #24
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a08:	4a14      	ldr	r2, [pc, #80]	; (8004a5c <_sbrk+0x5c>)
 8004a0a:	4b15      	ldr	r3, [pc, #84]	; (8004a60 <_sbrk+0x60>)
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004a14:	4b13      	ldr	r3, [pc, #76]	; (8004a64 <_sbrk+0x64>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d102      	bne.n	8004a22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004a1c:	4b11      	ldr	r3, [pc, #68]	; (8004a64 <_sbrk+0x64>)
 8004a1e:	4a12      	ldr	r2, [pc, #72]	; (8004a68 <_sbrk+0x68>)
 8004a20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004a22:	4b10      	ldr	r3, [pc, #64]	; (8004a64 <_sbrk+0x64>)
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4413      	add	r3, r2
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d207      	bcs.n	8004a40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004a30:	f006 fd04 	bl	800b43c <__errno>
 8004a34:	4603      	mov	r3, r0
 8004a36:	220c      	movs	r2, #12
 8004a38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a3e:	e009      	b.n	8004a54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004a40:	4b08      	ldr	r3, [pc, #32]	; (8004a64 <_sbrk+0x64>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004a46:	4b07      	ldr	r3, [pc, #28]	; (8004a64 <_sbrk+0x64>)
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	4a05      	ldr	r2, [pc, #20]	; (8004a64 <_sbrk+0x64>)
 8004a50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004a52:	68fb      	ldr	r3, [r7, #12]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3718      	adds	r7, #24
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	20050000 	.word	0x20050000
 8004a60:	00000400 	.word	0x00000400
 8004a64:	20000c58 	.word	0x20000c58
 8004a68:	200056c0 	.word	0x200056c0

08004a6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a70:	4b06      	ldr	r3, [pc, #24]	; (8004a8c <SystemInit+0x20>)
 8004a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a76:	4a05      	ldr	r2, [pc, #20]	; (8004a8c <SystemInit+0x20>)
 8004a78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004a80:	bf00      	nop
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	e000ed00 	.word	0xe000ed00

08004a90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8004a90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ac8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004a94:	480d      	ldr	r0, [pc, #52]	; (8004acc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004a96:	490e      	ldr	r1, [pc, #56]	; (8004ad0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004a98:	4a0e      	ldr	r2, [pc, #56]	; (8004ad4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004a9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a9c:	e002      	b.n	8004aa4 <LoopCopyDataInit>

08004a9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004aa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004aa2:	3304      	adds	r3, #4

08004aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004aa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004aa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004aa8:	d3f9      	bcc.n	8004a9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004aaa:	4a0b      	ldr	r2, [pc, #44]	; (8004ad8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004aac:	4c0b      	ldr	r4, [pc, #44]	; (8004adc <LoopFillZerobss+0x26>)
  movs r3, #0
 8004aae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ab0:	e001      	b.n	8004ab6 <LoopFillZerobss>

08004ab2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ab2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ab4:	3204      	adds	r2, #4

08004ab6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ab6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ab8:	d3fb      	bcc.n	8004ab2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004aba:	f7ff ffd7 	bl	8004a6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004abe:	f006 fdb9 	bl	800b634 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004ac2:	f7fe fa8f 	bl	8002fe4 <main>
  bx  lr    
 8004ac6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004ac8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004acc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ad0:	200002b8 	.word	0x200002b8
  ldr r2, =_sidata
 8004ad4:	0800f164 	.word	0x0800f164
  ldr r2, =_sbss
 8004ad8:	200002b8 	.word	0x200002b8
  ldr r4, =_ebss
 8004adc:	200056c0 	.word	0x200056c0

08004ae0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004ae0:	e7fe      	b.n	8004ae0 <ADC_IRQHandler>
	...

08004ae4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004ae8:	4b0e      	ldr	r3, [pc, #56]	; (8004b24 <HAL_Init+0x40>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a0d      	ldr	r2, [pc, #52]	; (8004b24 <HAL_Init+0x40>)
 8004aee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004af2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004af4:	4b0b      	ldr	r3, [pc, #44]	; (8004b24 <HAL_Init+0x40>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a0a      	ldr	r2, [pc, #40]	; (8004b24 <HAL_Init+0x40>)
 8004afa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004afe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b00:	4b08      	ldr	r3, [pc, #32]	; (8004b24 <HAL_Init+0x40>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a07      	ldr	r2, [pc, #28]	; (8004b24 <HAL_Init+0x40>)
 8004b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b0c:	2003      	movs	r0, #3
 8004b0e:	f000 f8cc 	bl	8004caa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b12:	200f      	movs	r0, #15
 8004b14:	f7ff fe6a 	bl	80047ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b18:	f7ff fe3c 	bl	8004794 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	40023c00 	.word	0x40023c00

08004b28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b2c:	4b06      	ldr	r3, [pc, #24]	; (8004b48 <HAL_IncTick+0x20>)
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	461a      	mov	r2, r3
 8004b32:	4b06      	ldr	r3, [pc, #24]	; (8004b4c <HAL_IncTick+0x24>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4413      	add	r3, r2
 8004b38:	4a04      	ldr	r2, [pc, #16]	; (8004b4c <HAL_IncTick+0x24>)
 8004b3a:	6013      	str	r3, [r2, #0]
}
 8004b3c:	bf00      	nop
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	200001ec 	.word	0x200001ec
 8004b4c:	20000c5c 	.word	0x20000c5c

08004b50 <__NVIC_SetPriorityGrouping>:
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f003 0307 	and.w	r3, r3, #7
 8004b5e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b60:	4b0c      	ldr	r3, [pc, #48]	; (8004b94 <__NVIC_SetPriorityGrouping+0x44>)
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b82:	4a04      	ldr	r2, [pc, #16]	; (8004b94 <__NVIC_SetPriorityGrouping+0x44>)
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	60d3      	str	r3, [r2, #12]
}
 8004b88:	bf00      	nop
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	e000ed00 	.word	0xe000ed00

08004b98 <__NVIC_GetPriorityGrouping>:
{
 8004b98:	b480      	push	{r7}
 8004b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b9c:	4b04      	ldr	r3, [pc, #16]	; (8004bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	0a1b      	lsrs	r3, r3, #8
 8004ba2:	f003 0307 	and.w	r3, r3, #7
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	e000ed00 	.word	0xe000ed00

08004bb4 <__NVIC_EnableIRQ>:
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	4603      	mov	r3, r0
 8004bbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	db0b      	blt.n	8004bde <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bc6:	79fb      	ldrb	r3, [r7, #7]
 8004bc8:	f003 021f 	and.w	r2, r3, #31
 8004bcc:	4907      	ldr	r1, [pc, #28]	; (8004bec <__NVIC_EnableIRQ+0x38>)
 8004bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bd2:	095b      	lsrs	r3, r3, #5
 8004bd4:	2001      	movs	r0, #1
 8004bd6:	fa00 f202 	lsl.w	r2, r0, r2
 8004bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004bde:	bf00      	nop
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	e000e100 	.word	0xe000e100

08004bf0 <__NVIC_SetPriority>:
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	6039      	str	r1, [r7, #0]
 8004bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	db0a      	blt.n	8004c1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	b2da      	uxtb	r2, r3
 8004c08:	490c      	ldr	r1, [pc, #48]	; (8004c3c <__NVIC_SetPriority+0x4c>)
 8004c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c0e:	0112      	lsls	r2, r2, #4
 8004c10:	b2d2      	uxtb	r2, r2
 8004c12:	440b      	add	r3, r1
 8004c14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004c18:	e00a      	b.n	8004c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	b2da      	uxtb	r2, r3
 8004c1e:	4908      	ldr	r1, [pc, #32]	; (8004c40 <__NVIC_SetPriority+0x50>)
 8004c20:	79fb      	ldrb	r3, [r7, #7]
 8004c22:	f003 030f 	and.w	r3, r3, #15
 8004c26:	3b04      	subs	r3, #4
 8004c28:	0112      	lsls	r2, r2, #4
 8004c2a:	b2d2      	uxtb	r2, r2
 8004c2c:	440b      	add	r3, r1
 8004c2e:	761a      	strb	r2, [r3, #24]
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr
 8004c3c:	e000e100 	.word	0xe000e100
 8004c40:	e000ed00 	.word	0xe000ed00

08004c44 <NVIC_EncodePriority>:
{
 8004c44:	b480      	push	{r7}
 8004c46:	b089      	sub	sp, #36	; 0x24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f003 0307 	and.w	r3, r3, #7
 8004c56:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	f1c3 0307 	rsb	r3, r3, #7
 8004c5e:	2b04      	cmp	r3, #4
 8004c60:	bf28      	it	cs
 8004c62:	2304      	movcs	r3, #4
 8004c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	3304      	adds	r3, #4
 8004c6a:	2b06      	cmp	r3, #6
 8004c6c:	d902      	bls.n	8004c74 <NVIC_EncodePriority+0x30>
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	3b03      	subs	r3, #3
 8004c72:	e000      	b.n	8004c76 <NVIC_EncodePriority+0x32>
 8004c74:	2300      	movs	r3, #0
 8004c76:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c78:	f04f 32ff 	mov.w	r2, #4294967295
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c82:	43da      	mvns	r2, r3
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	401a      	ands	r2, r3
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	fa01 f303 	lsl.w	r3, r1, r3
 8004c96:	43d9      	mvns	r1, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c9c:	4313      	orrs	r3, r2
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3724      	adds	r7, #36	; 0x24
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b082      	sub	sp, #8
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f7ff ff4c 	bl	8004b50 <__NVIC_SetPriorityGrouping>
}
 8004cb8:	bf00      	nop
 8004cba:	3708      	adds	r7, #8
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b086      	sub	sp, #24
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
 8004ccc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004cd2:	f7ff ff61 	bl	8004b98 <__NVIC_GetPriorityGrouping>
 8004cd6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	68b9      	ldr	r1, [r7, #8]
 8004cdc:	6978      	ldr	r0, [r7, #20]
 8004cde:	f7ff ffb1 	bl	8004c44 <NVIC_EncodePriority>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ce8:	4611      	mov	r1, r2
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7ff ff80 	bl	8004bf0 <__NVIC_SetPriority>
}
 8004cf0:	bf00      	nop
 8004cf2:	3718      	adds	r7, #24
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	4603      	mov	r3, r0
 8004d00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7ff ff54 	bl	8004bb4 <__NVIC_EnableIRQ>
}
 8004d0c:	bf00      	nop
 8004d0e:	3708      	adds	r7, #8
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d14:	b480      	push	{r7}
 8004d16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d18:	4b03      	ldr	r3, [pc, #12]	; (8004d28 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	200001e8 	.word	0x200001e8

08004d2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d30:	f7ff fff0 	bl	8004d14 <HAL_RCC_GetHCLKFreq>
 8004d34:	4602      	mov	r2, r0
 8004d36:	4b05      	ldr	r3, [pc, #20]	; (8004d4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	0a9b      	lsrs	r3, r3, #10
 8004d3c:	f003 0307 	and.w	r3, r3, #7
 8004d40:	4903      	ldr	r1, [pc, #12]	; (8004d50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d42:	5ccb      	ldrb	r3, [r1, r3]
 8004d44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	40023800 	.word	0x40023800
 8004d50:	0800ed38 	.word	0x0800ed38

08004d54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	220f      	movs	r2, #15
 8004d62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d64:	4b12      	ldr	r3, [pc, #72]	; (8004db0 <HAL_RCC_GetClockConfig+0x5c>)
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f003 0203 	and.w	r2, r3, #3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004d70:	4b0f      	ldr	r3, [pc, #60]	; (8004db0 <HAL_RCC_GetClockConfig+0x5c>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004d7c:	4b0c      	ldr	r3, [pc, #48]	; (8004db0 <HAL_RCC_GetClockConfig+0x5c>)
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004d88:	4b09      	ldr	r3, [pc, #36]	; (8004db0 <HAL_RCC_GetClockConfig+0x5c>)
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	08db      	lsrs	r3, r3, #3
 8004d8e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004d96:	4b07      	ldr	r3, [pc, #28]	; (8004db4 <HAL_RCC_GetClockConfig+0x60>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0207 	and.w	r2, r3, #7
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	601a      	str	r2, [r3, #0]
}
 8004da2:	bf00      	nop
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	40023800 	.word	0x40023800
 8004db4:	40023c00 	.word	0x40023c00

08004db8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e041      	b.n	8004e4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d106      	bne.n	8004de4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f839 	bl	8004e56 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2202      	movs	r2, #2
 8004de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	3304      	adds	r3, #4
 8004df4:	4619      	mov	r1, r3
 8004df6:	4610      	mov	r0, r2
 8004df8:	f000 f9d8 	bl	80051ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b083      	sub	sp, #12
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004e5e:	bf00      	nop
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
	...

08004e6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d001      	beq.n	8004e84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e04e      	b.n	8004f22 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2202      	movs	r2, #2
 8004e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68da      	ldr	r2, [r3, #12]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f042 0201 	orr.w	r2, r2, #1
 8004e9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a23      	ldr	r2, [pc, #140]	; (8004f30 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d022      	beq.n	8004eec <HAL_TIM_Base_Start_IT+0x80>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eae:	d01d      	beq.n	8004eec <HAL_TIM_Base_Start_IT+0x80>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a1f      	ldr	r2, [pc, #124]	; (8004f34 <HAL_TIM_Base_Start_IT+0xc8>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d018      	beq.n	8004eec <HAL_TIM_Base_Start_IT+0x80>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a1e      	ldr	r2, [pc, #120]	; (8004f38 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d013      	beq.n	8004eec <HAL_TIM_Base_Start_IT+0x80>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a1c      	ldr	r2, [pc, #112]	; (8004f3c <HAL_TIM_Base_Start_IT+0xd0>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d00e      	beq.n	8004eec <HAL_TIM_Base_Start_IT+0x80>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a1b      	ldr	r2, [pc, #108]	; (8004f40 <HAL_TIM_Base_Start_IT+0xd4>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d009      	beq.n	8004eec <HAL_TIM_Base_Start_IT+0x80>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a19      	ldr	r2, [pc, #100]	; (8004f44 <HAL_TIM_Base_Start_IT+0xd8>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d004      	beq.n	8004eec <HAL_TIM_Base_Start_IT+0x80>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a18      	ldr	r2, [pc, #96]	; (8004f48 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d111      	bne.n	8004f10 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f003 0307 	and.w	r3, r3, #7
 8004ef6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2b06      	cmp	r3, #6
 8004efc:	d010      	beq.n	8004f20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f042 0201 	orr.w	r2, r2, #1
 8004f0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f0e:	e007      	b.n	8004f20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f042 0201 	orr.w	r2, r2, #1
 8004f1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3714      	adds	r7, #20
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	40010000 	.word	0x40010000
 8004f34:	40000400 	.word	0x40000400
 8004f38:	40000800 	.word	0x40000800
 8004f3c:	40000c00 	.word	0x40000c00
 8004f40:	40010400 	.word	0x40010400
 8004f44:	40014000 	.word	0x40014000
 8004f48:	40001800 	.word	0x40001800

08004f4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d122      	bne.n	8004fa8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	f003 0302 	and.w	r3, r3, #2
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d11b      	bne.n	8004fa8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f06f 0202 	mvn.w	r2, #2
 8004f78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	f003 0303 	and.w	r3, r3, #3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d003      	beq.n	8004f96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f8ee 	bl	8005170 <HAL_TIM_IC_CaptureCallback>
 8004f94:	e005      	b.n	8004fa2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 f8e0 	bl	800515c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 f8f1 	bl	8005184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	f003 0304 	and.w	r3, r3, #4
 8004fb2:	2b04      	cmp	r3, #4
 8004fb4:	d122      	bne.n	8004ffc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	f003 0304 	and.w	r3, r3, #4
 8004fc0:	2b04      	cmp	r3, #4
 8004fc2:	d11b      	bne.n	8004ffc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f06f 0204 	mvn.w	r2, #4
 8004fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2202      	movs	r2, #2
 8004fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d003      	beq.n	8004fea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f8c4 	bl	8005170 <HAL_TIM_IC_CaptureCallback>
 8004fe8:	e005      	b.n	8004ff6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f8b6 	bl	800515c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 f8c7 	bl	8005184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	f003 0308 	and.w	r3, r3, #8
 8005006:	2b08      	cmp	r3, #8
 8005008:	d122      	bne.n	8005050 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	f003 0308 	and.w	r3, r3, #8
 8005014:	2b08      	cmp	r3, #8
 8005016:	d11b      	bne.n	8005050 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f06f 0208 	mvn.w	r2, #8
 8005020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2204      	movs	r2, #4
 8005026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	69db      	ldr	r3, [r3, #28]
 800502e:	f003 0303 	and.w	r3, r3, #3
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f89a 	bl	8005170 <HAL_TIM_IC_CaptureCallback>
 800503c:	e005      	b.n	800504a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f88c 	bl	800515c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f89d 	bl	8005184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	f003 0310 	and.w	r3, r3, #16
 800505a:	2b10      	cmp	r3, #16
 800505c:	d122      	bne.n	80050a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	f003 0310 	and.w	r3, r3, #16
 8005068:	2b10      	cmp	r3, #16
 800506a:	d11b      	bne.n	80050a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f06f 0210 	mvn.w	r2, #16
 8005074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2208      	movs	r2, #8
 800507a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f870 	bl	8005170 <HAL_TIM_IC_CaptureCallback>
 8005090:	e005      	b.n	800509e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f862 	bl	800515c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 f873 	bl	8005184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d10e      	bne.n	80050d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	f003 0301 	and.w	r3, r3, #1
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d107      	bne.n	80050d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f06f 0201 	mvn.w	r2, #1
 80050c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f7fd ffa7 	bl	800301e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050da:	2b80      	cmp	r3, #128	; 0x80
 80050dc:	d10e      	bne.n	80050fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050e8:	2b80      	cmp	r3, #128	; 0x80
 80050ea:	d107      	bne.n	80050fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80050f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f902 	bl	8005300 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005106:	2b40      	cmp	r3, #64	; 0x40
 8005108:	d10e      	bne.n	8005128 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005114:	2b40      	cmp	r3, #64	; 0x40
 8005116:	d107      	bne.n	8005128 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f838 	bl	8005198 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	f003 0320 	and.w	r3, r3, #32
 8005132:	2b20      	cmp	r3, #32
 8005134:	d10e      	bne.n	8005154 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	f003 0320 	and.w	r3, r3, #32
 8005140:	2b20      	cmp	r3, #32
 8005142:	d107      	bne.n	8005154 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f06f 0220 	mvn.w	r2, #32
 800514c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f8cc 	bl	80052ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005154:	bf00      	nop
 8005156:	3708      	adds	r7, #8
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a40      	ldr	r2, [pc, #256]	; (80052c0 <TIM_Base_SetConfig+0x114>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d013      	beq.n	80051ec <TIM_Base_SetConfig+0x40>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ca:	d00f      	beq.n	80051ec <TIM_Base_SetConfig+0x40>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a3d      	ldr	r2, [pc, #244]	; (80052c4 <TIM_Base_SetConfig+0x118>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d00b      	beq.n	80051ec <TIM_Base_SetConfig+0x40>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a3c      	ldr	r2, [pc, #240]	; (80052c8 <TIM_Base_SetConfig+0x11c>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d007      	beq.n	80051ec <TIM_Base_SetConfig+0x40>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a3b      	ldr	r2, [pc, #236]	; (80052cc <TIM_Base_SetConfig+0x120>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d003      	beq.n	80051ec <TIM_Base_SetConfig+0x40>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a3a      	ldr	r2, [pc, #232]	; (80052d0 <TIM_Base_SetConfig+0x124>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d108      	bne.n	80051fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a2f      	ldr	r2, [pc, #188]	; (80052c0 <TIM_Base_SetConfig+0x114>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d02b      	beq.n	800525e <TIM_Base_SetConfig+0xb2>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800520c:	d027      	beq.n	800525e <TIM_Base_SetConfig+0xb2>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a2c      	ldr	r2, [pc, #176]	; (80052c4 <TIM_Base_SetConfig+0x118>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d023      	beq.n	800525e <TIM_Base_SetConfig+0xb2>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a2b      	ldr	r2, [pc, #172]	; (80052c8 <TIM_Base_SetConfig+0x11c>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d01f      	beq.n	800525e <TIM_Base_SetConfig+0xb2>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a2a      	ldr	r2, [pc, #168]	; (80052cc <TIM_Base_SetConfig+0x120>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d01b      	beq.n	800525e <TIM_Base_SetConfig+0xb2>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a29      	ldr	r2, [pc, #164]	; (80052d0 <TIM_Base_SetConfig+0x124>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d017      	beq.n	800525e <TIM_Base_SetConfig+0xb2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a28      	ldr	r2, [pc, #160]	; (80052d4 <TIM_Base_SetConfig+0x128>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d013      	beq.n	800525e <TIM_Base_SetConfig+0xb2>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a27      	ldr	r2, [pc, #156]	; (80052d8 <TIM_Base_SetConfig+0x12c>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d00f      	beq.n	800525e <TIM_Base_SetConfig+0xb2>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a26      	ldr	r2, [pc, #152]	; (80052dc <TIM_Base_SetConfig+0x130>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d00b      	beq.n	800525e <TIM_Base_SetConfig+0xb2>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a25      	ldr	r2, [pc, #148]	; (80052e0 <TIM_Base_SetConfig+0x134>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d007      	beq.n	800525e <TIM_Base_SetConfig+0xb2>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a24      	ldr	r2, [pc, #144]	; (80052e4 <TIM_Base_SetConfig+0x138>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d003      	beq.n	800525e <TIM_Base_SetConfig+0xb2>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a23      	ldr	r2, [pc, #140]	; (80052e8 <TIM_Base_SetConfig+0x13c>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d108      	bne.n	8005270 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005264:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	4313      	orrs	r3, r2
 800526e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	4313      	orrs	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	689a      	ldr	r2, [r3, #8]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a0a      	ldr	r2, [pc, #40]	; (80052c0 <TIM_Base_SetConfig+0x114>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d003      	beq.n	80052a4 <TIM_Base_SetConfig+0xf8>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a0c      	ldr	r2, [pc, #48]	; (80052d0 <TIM_Base_SetConfig+0x124>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d103      	bne.n	80052ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	691a      	ldr	r2, [r3, #16]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	615a      	str	r2, [r3, #20]
}
 80052b2:	bf00      	nop
 80052b4:	3714      	adds	r7, #20
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	40010000 	.word	0x40010000
 80052c4:	40000400 	.word	0x40000400
 80052c8:	40000800 	.word	0x40000800
 80052cc:	40000c00 	.word	0x40000c00
 80052d0:	40010400 	.word	0x40010400
 80052d4:	40014000 	.word	0x40014000
 80052d8:	40014400 	.word	0x40014400
 80052dc:	40014800 	.word	0x40014800
 80052e0:	40001800 	.word	0x40001800
 80052e4:	40001c00 	.word	0x40001c00
 80052e8:	40002000 	.word	0x40002000

080052ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <LL_GPIO_SetPinMode>:
{
 8005314:	b480      	push	{r7}
 8005316:	b089      	sub	sp, #36	; 0x24
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	fa93 f3a3 	rbit	r3, r3
 800532e:	613b      	str	r3, [r7, #16]
  return result;
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	fab3 f383 	clz	r3, r3
 8005336:	b2db      	uxtb	r3, r3
 8005338:	005b      	lsls	r3, r3, #1
 800533a:	2103      	movs	r1, #3
 800533c:	fa01 f303 	lsl.w	r3, r1, r3
 8005340:	43db      	mvns	r3, r3
 8005342:	401a      	ands	r2, r3
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	fa93 f3a3 	rbit	r3, r3
 800534e:	61bb      	str	r3, [r7, #24]
  return result;
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	fab3 f383 	clz	r3, r3
 8005356:	b2db      	uxtb	r3, r3
 8005358:	005b      	lsls	r3, r3, #1
 800535a:	6879      	ldr	r1, [r7, #4]
 800535c:	fa01 f303 	lsl.w	r3, r1, r3
 8005360:	431a      	orrs	r2, r3
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	601a      	str	r2, [r3, #0]
}
 8005366:	bf00      	nop
 8005368:	3724      	adds	r7, #36	; 0x24
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr

08005372 <LL_GPIO_SetPinOutputType>:
{
 8005372:	b480      	push	{r7}
 8005374:	b085      	sub	sp, #20
 8005376:	af00      	add	r7, sp, #0
 8005378:	60f8      	str	r0, [r7, #12]
 800537a:	60b9      	str	r1, [r7, #8]
 800537c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	685a      	ldr	r2, [r3, #4]
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	43db      	mvns	r3, r3
 8005386:	401a      	ands	r2, r3
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	6879      	ldr	r1, [r7, #4]
 800538c:	fb01 f303 	mul.w	r3, r1, r3
 8005390:	431a      	orrs	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	605a      	str	r2, [r3, #4]
}
 8005396:	bf00      	nop
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <LL_GPIO_SetPinSpeed>:
{
 80053a2:	b480      	push	{r7}
 80053a4:	b089      	sub	sp, #36	; 0x24
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	60f8      	str	r0, [r7, #12]
 80053aa:	60b9      	str	r1, [r7, #8]
 80053ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	689a      	ldr	r2, [r3, #8]
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	fa93 f3a3 	rbit	r3, r3
 80053bc:	613b      	str	r3, [r7, #16]
  return result;
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	fab3 f383 	clz	r3, r3
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	005b      	lsls	r3, r3, #1
 80053c8:	2103      	movs	r1, #3
 80053ca:	fa01 f303 	lsl.w	r3, r1, r3
 80053ce:	43db      	mvns	r3, r3
 80053d0:	401a      	ands	r2, r3
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	fa93 f3a3 	rbit	r3, r3
 80053dc:	61bb      	str	r3, [r7, #24]
  return result;
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	fab3 f383 	clz	r3, r3
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	005b      	lsls	r3, r3, #1
 80053e8:	6879      	ldr	r1, [r7, #4]
 80053ea:	fa01 f303 	lsl.w	r3, r1, r3
 80053ee:	431a      	orrs	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	609a      	str	r2, [r3, #8]
}
 80053f4:	bf00      	nop
 80053f6:	3724      	adds	r7, #36	; 0x24
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <LL_GPIO_SetPinPull>:
{
 8005400:	b480      	push	{r7}
 8005402:	b089      	sub	sp, #36	; 0x24
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	68da      	ldr	r2, [r3, #12]
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	fa93 f3a3 	rbit	r3, r3
 800541a:	613b      	str	r3, [r7, #16]
  return result;
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	fab3 f383 	clz	r3, r3
 8005422:	b2db      	uxtb	r3, r3
 8005424:	005b      	lsls	r3, r3, #1
 8005426:	2103      	movs	r1, #3
 8005428:	fa01 f303 	lsl.w	r3, r1, r3
 800542c:	43db      	mvns	r3, r3
 800542e:	401a      	ands	r2, r3
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	fa93 f3a3 	rbit	r3, r3
 800543a:	61bb      	str	r3, [r7, #24]
  return result;
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	fab3 f383 	clz	r3, r3
 8005442:	b2db      	uxtb	r3, r3
 8005444:	005b      	lsls	r3, r3, #1
 8005446:	6879      	ldr	r1, [r7, #4]
 8005448:	fa01 f303 	lsl.w	r3, r1, r3
 800544c:	431a      	orrs	r2, r3
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	60da      	str	r2, [r3, #12]
}
 8005452:	bf00      	nop
 8005454:	3724      	adds	r7, #36	; 0x24
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <LL_GPIO_SetAFPin_0_7>:
{
 800545e:	b480      	push	{r7}
 8005460:	b089      	sub	sp, #36	; 0x24
 8005462:	af00      	add	r7, sp, #0
 8005464:	60f8      	str	r0, [r7, #12]
 8005466:	60b9      	str	r1, [r7, #8]
 8005468:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6a1a      	ldr	r2, [r3, #32]
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	fa93 f3a3 	rbit	r3, r3
 8005478:	613b      	str	r3, [r7, #16]
  return result;
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	fab3 f383 	clz	r3, r3
 8005480:	b2db      	uxtb	r3, r3
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	210f      	movs	r1, #15
 8005486:	fa01 f303 	lsl.w	r3, r1, r3
 800548a:	43db      	mvns	r3, r3
 800548c:	401a      	ands	r2, r3
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	fa93 f3a3 	rbit	r3, r3
 8005498:	61bb      	str	r3, [r7, #24]
  return result;
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	fab3 f383 	clz	r3, r3
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	6879      	ldr	r1, [r7, #4]
 80054a6:	fa01 f303 	lsl.w	r3, r1, r3
 80054aa:	431a      	orrs	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	621a      	str	r2, [r3, #32]
}
 80054b0:	bf00      	nop
 80054b2:	3724      	adds	r7, #36	; 0x24
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <LL_GPIO_SetAFPin_8_15>:
{
 80054bc:	b480      	push	{r7}
 80054be:	b089      	sub	sp, #36	; 0x24
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	0a1b      	lsrs	r3, r3, #8
 80054d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	fa93 f3a3 	rbit	r3, r3
 80054d8:	613b      	str	r3, [r7, #16]
  return result;
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	fab3 f383 	clz	r3, r3
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	210f      	movs	r1, #15
 80054e6:	fa01 f303 	lsl.w	r3, r1, r3
 80054ea:	43db      	mvns	r3, r3
 80054ec:	401a      	ands	r2, r3
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	0a1b      	lsrs	r3, r3, #8
 80054f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	fa93 f3a3 	rbit	r3, r3
 80054fa:	61bb      	str	r3, [r7, #24]
  return result;
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	fab3 f383 	clz	r3, r3
 8005502:	b2db      	uxtb	r3, r3
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	6879      	ldr	r1, [r7, #4]
 8005508:	fa01 f303 	lsl.w	r3, r1, r3
 800550c:	431a      	orrs	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005512:	bf00      	nop
 8005514:	3724      	adds	r7, #36	; 0x24
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b088      	sub	sp, #32
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
 8005526:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8005528:	2300      	movs	r3, #0
 800552a:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 800552c:	2300      	movs	r3, #0
 800552e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	fa93 f3a3 	rbit	r3, r3
 800553c:	613b      	str	r3, [r7, #16]
  return result;
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	fab3 f383 	clz	r3, r3
 8005544:	b2db      	uxtb	r3, r3
 8005546:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005548:	e050      	b.n	80055ec <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	2101      	movs	r1, #1
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	fa01 f303 	lsl.w	r3, r1, r3
 8005556:	4013      	ands	r3, r2
 8005558:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d042      	beq.n	80055e6 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	2b01      	cmp	r3, #1
 8005566:	d003      	beq.n	8005570 <LL_GPIO_Init+0x52>
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	2b02      	cmp	r3, #2
 800556e:	d10d      	bne.n	800558c <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	461a      	mov	r2, r3
 8005576:	69b9      	ldr	r1, [r7, #24]
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f7ff ff12 	bl	80053a2 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	461a      	mov	r2, r3
 8005584:	69b9      	ldr	r1, [r7, #24]
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f7ff fef3 	bl	8005372 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	461a      	mov	r2, r3
 8005592:	69b9      	ldr	r1, [r7, #24]
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f7ff ff33 	bl	8005400 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d11a      	bne.n	80055d8 <LL_GPIO_Init+0xba>
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	fa93 f3a3 	rbit	r3, r3
 80055ac:	60bb      	str	r3, [r7, #8]
  return result;
 80055ae:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80055b0:	fab3 f383 	clz	r3, r3
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b07      	cmp	r3, #7
 80055b8:	d807      	bhi.n	80055ca <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	461a      	mov	r2, r3
 80055c0:	69b9      	ldr	r1, [r7, #24]
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7ff ff4b 	bl	800545e <LL_GPIO_SetAFPin_0_7>
 80055c8:	e006      	b.n	80055d8 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	461a      	mov	r2, r3
 80055d0:	69b9      	ldr	r1, [r7, #24]
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f7ff ff72 	bl	80054bc <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	461a      	mov	r2, r3
 80055de:	69b9      	ldr	r1, [r7, #24]
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f7ff fe97 	bl	8005314 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	3301      	adds	r3, #1
 80055ea:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	fa22 f303 	lsr.w	r3, r2, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1a7      	bne.n	800554a <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3720      	adds	r7, #32
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <LL_RCC_GetSysClkSource>:
{
 8005604:	b480      	push	{r7}
 8005606:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005608:	4b04      	ldr	r3, [pc, #16]	; (800561c <LL_RCC_GetSysClkSource+0x18>)
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f003 030c 	and.w	r3, r3, #12
}
 8005610:	4618      	mov	r0, r3
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	40023800 	.word	0x40023800

08005620 <LL_RCC_GetAHBPrescaler>:
{
 8005620:	b480      	push	{r7}
 8005622:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005624:	4b04      	ldr	r3, [pc, #16]	; (8005638 <LL_RCC_GetAHBPrescaler+0x18>)
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800562c:	4618      	mov	r0, r3
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	40023800 	.word	0x40023800

0800563c <LL_RCC_GetAPB1Prescaler>:
{
 800563c:	b480      	push	{r7}
 800563e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005640:	4b04      	ldr	r3, [pc, #16]	; (8005654 <LL_RCC_GetAPB1Prescaler+0x18>)
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8005648:	4618      	mov	r0, r3
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	40023800 	.word	0x40023800

08005658 <LL_RCC_GetAPB2Prescaler>:
{
 8005658:	b480      	push	{r7}
 800565a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800565c:	4b04      	ldr	r3, [pc, #16]	; (8005670 <LL_RCC_GetAPB2Prescaler+0x18>)
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8005664:	4618      	mov	r0, r3
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	40023800 	.word	0x40023800

08005674 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005674:	b480      	push	{r7}
 8005676:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005678:	4b04      	ldr	r3, [pc, #16]	; (800568c <LL_RCC_PLL_GetMainSource+0x18>)
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8005680:	4618      	mov	r0, r3
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	40023800 	.word	0x40023800

08005690 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005690:	b480      	push	{r7}
 8005692:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005694:	4b04      	ldr	r3, [pc, #16]	; (80056a8 <LL_RCC_PLL_GetN+0x18>)
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	099b      	lsrs	r3, r3, #6
 800569a:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800569e:	4618      	mov	r0, r3
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr
 80056a8:	40023800 	.word	0x40023800

080056ac <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80056ac:	b480      	push	{r7}
 80056ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80056b0:	4b04      	ldr	r3, [pc, #16]	; (80056c4 <LL_RCC_PLL_GetP+0x18>)
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	40023800 	.word	0x40023800

080056c8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80056c8:	b480      	push	{r7}
 80056ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80056cc:	4b04      	ldr	r3, [pc, #16]	; (80056e0 <LL_RCC_PLL_GetDivider+0x18>)
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	40023800 	.word	0x40023800

080056e4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80056ec:	f000 f820 	bl	8005730 <RCC_GetSystemClockFreq>
 80056f0:	4602      	mov	r2, r0
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4618      	mov	r0, r3
 80056fc:	f000 f840 	bl	8005780 <RCC_GetHCLKClockFreq>
 8005700:	4602      	mov	r2, r0
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	4618      	mov	r0, r3
 800570c:	f000 f84e 	bl	80057ac <RCC_GetPCLK1ClockFreq>
 8005710:	4602      	mov	r2, r0
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	4618      	mov	r0, r3
 800571c:	f000 f85a 	bl	80057d4 <RCC_GetPCLK2ClockFreq>
 8005720:	4602      	mov	r2, r0
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	60da      	str	r2, [r3, #12]
}
 8005726:	bf00      	nop
 8005728:	3708      	adds	r7, #8
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
	...

08005730 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8005736:	2300      	movs	r3, #0
 8005738:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800573a:	f7ff ff63 	bl	8005604 <LL_RCC_GetSysClkSource>
 800573e:	4603      	mov	r3, r0
 8005740:	2b08      	cmp	r3, #8
 8005742:	d00c      	beq.n	800575e <RCC_GetSystemClockFreq+0x2e>
 8005744:	2b08      	cmp	r3, #8
 8005746:	d80f      	bhi.n	8005768 <RCC_GetSystemClockFreq+0x38>
 8005748:	2b00      	cmp	r3, #0
 800574a:	d002      	beq.n	8005752 <RCC_GetSystemClockFreq+0x22>
 800574c:	2b04      	cmp	r3, #4
 800574e:	d003      	beq.n	8005758 <RCC_GetSystemClockFreq+0x28>
 8005750:	e00a      	b.n	8005768 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8005752:	4b09      	ldr	r3, [pc, #36]	; (8005778 <RCC_GetSystemClockFreq+0x48>)
 8005754:	607b      	str	r3, [r7, #4]
      break;
 8005756:	e00a      	b.n	800576e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8005758:	4b08      	ldr	r3, [pc, #32]	; (800577c <RCC_GetSystemClockFreq+0x4c>)
 800575a:	607b      	str	r3, [r7, #4]
      break;
 800575c:	e007      	b.n	800576e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800575e:	2008      	movs	r0, #8
 8005760:	f000 f84c 	bl	80057fc <RCC_PLL_GetFreqDomain_SYS>
 8005764:	6078      	str	r0, [r7, #4]
      break;
 8005766:	e002      	b.n	800576e <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8005768:	4b03      	ldr	r3, [pc, #12]	; (8005778 <RCC_GetSystemClockFreq+0x48>)
 800576a:	607b      	str	r3, [r7, #4]
      break;
 800576c:	bf00      	nop
  }

  return frequency;
 800576e:	687b      	ldr	r3, [r7, #4]
}
 8005770:	4618      	mov	r0, r3
 8005772:	3708      	adds	r7, #8
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	00f42400 	.word	0x00f42400
 800577c:	007a1200 	.word	0x007a1200

08005780 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005788:	f7ff ff4a 	bl	8005620 <LL_RCC_GetAHBPrescaler>
 800578c:	4603      	mov	r3, r0
 800578e:	091b      	lsrs	r3, r3, #4
 8005790:	f003 030f 	and.w	r3, r3, #15
 8005794:	4a04      	ldr	r2, [pc, #16]	; (80057a8 <RCC_GetHCLKClockFreq+0x28>)
 8005796:	5cd3      	ldrb	r3, [r2, r3]
 8005798:	461a      	mov	r2, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	40d3      	lsrs	r3, r2
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3708      	adds	r7, #8
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	0800ed28 	.word	0x0800ed28

080057ac <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80057b4:	f7ff ff42 	bl	800563c <LL_RCC_GetAPB1Prescaler>
 80057b8:	4603      	mov	r3, r0
 80057ba:	0a9b      	lsrs	r3, r3, #10
 80057bc:	4a04      	ldr	r2, [pc, #16]	; (80057d0 <RCC_GetPCLK1ClockFreq+0x24>)
 80057be:	5cd3      	ldrb	r3, [r2, r3]
 80057c0:	461a      	mov	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	40d3      	lsrs	r3, r2
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3708      	adds	r7, #8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	0800ed38 	.word	0x0800ed38

080057d4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80057dc:	f7ff ff3c 	bl	8005658 <LL_RCC_GetAPB2Prescaler>
 80057e0:	4603      	mov	r3, r0
 80057e2:	0b5b      	lsrs	r3, r3, #13
 80057e4:	4a04      	ldr	r2, [pc, #16]	; (80057f8 <RCC_GetPCLK2ClockFreq+0x24>)
 80057e6:	5cd3      	ldrb	r3, [r2, r3]
 80057e8:	461a      	mov	r2, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	40d3      	lsrs	r3, r2
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	0800ed38 	.word	0x0800ed38

080057fc <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80057fc:	b590      	push	{r4, r7, lr}
 80057fe:	b087      	sub	sp, #28
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8005804:	2300      	movs	r3, #0
 8005806:	617b      	str	r3, [r7, #20]
 8005808:	2300      	movs	r3, #0
 800580a:	60fb      	str	r3, [r7, #12]
 800580c:	2300      	movs	r3, #0
 800580e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005810:	f7ff ff30 	bl	8005674 <LL_RCC_PLL_GetMainSource>
 8005814:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d004      	beq.n	8005826 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005822:	d003      	beq.n	800582c <RCC_PLL_GetFreqDomain_SYS+0x30>
 8005824:	e005      	b.n	8005832 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8005826:	4b12      	ldr	r3, [pc, #72]	; (8005870 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8005828:	617b      	str	r3, [r7, #20]
      break;
 800582a:	e005      	b.n	8005838 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800582c:	4b11      	ldr	r3, [pc, #68]	; (8005874 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800582e:	617b      	str	r3, [r7, #20]
      break;
 8005830:	e002      	b.n	8005838 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8005832:	4b0f      	ldr	r3, [pc, #60]	; (8005870 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8005834:	617b      	str	r3, [r7, #20]
      break;
 8005836:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2b08      	cmp	r3, #8
 800583c:	d113      	bne.n	8005866 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800583e:	f7ff ff43 	bl	80056c8 <LL_RCC_PLL_GetDivider>
 8005842:	4602      	mov	r2, r0
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	fbb3 f4f2 	udiv	r4, r3, r2
 800584a:	f7ff ff21 	bl	8005690 <LL_RCC_PLL_GetN>
 800584e:	4603      	mov	r3, r0
 8005850:	fb03 f404 	mul.w	r4, r3, r4
 8005854:	f7ff ff2a 	bl	80056ac <LL_RCC_PLL_GetP>
 8005858:	4603      	mov	r3, r0
 800585a:	0c1b      	lsrs	r3, r3, #16
 800585c:	3301      	adds	r3, #1
 800585e:	005b      	lsls	r3, r3, #1
 8005860:	fbb4 f3f3 	udiv	r3, r4, r3
 8005864:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8005866:	693b      	ldr	r3, [r7, #16]
}
 8005868:	4618      	mov	r0, r3
 800586a:	371c      	adds	r7, #28
 800586c:	46bd      	mov	sp, r7
 800586e:	bd90      	pop	{r4, r7, pc}
 8005870:	00f42400 	.word	0x00f42400
 8005874:	007a1200 	.word	0x007a1200

08005878 <LL_RTC_SetHourFormat>:
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	431a      	orrs	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	609a      	str	r2, [r3, #8]
}
 8005892:	bf00      	nop
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr

0800589e <LL_RTC_GetHourFormat>:
{
 800589e:	b480      	push	{r7}
 80058a0:	b083      	sub	sp, #12
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_FMT));
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	370c      	adds	r7, #12
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr

080058ba <LL_RTC_EnableInitMode>:
{
 80058ba:	b480      	push	{r7}
 80058bc:	b083      	sub	sp, #12
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, RTC_INIT_MASK);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f04f 32ff 	mov.w	r2, #4294967295
 80058c8:	60da      	str	r2, [r3, #12]
}
 80058ca:	bf00      	nop
 80058cc:	370c      	adds	r7, #12
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr

080058d6 <LL_RTC_DisableInitMode>:
{
 80058d6:	b480      	push	{r7}
 80058d8:	b083      	sub	sp, #12
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058e4:	60da      	str	r2, [r3, #12]
}
 80058e6:	bf00      	nop
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr

080058f2 <LL_RTC_IsShadowRegBypassEnabled>:
{
 80058f2:	b480      	push	{r7}
 80058f4:	b083      	sub	sp, #12
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RTCx->CR, RTC_CR_BYPSHAD) == (RTC_CR_BYPSHAD)) ? 1UL : 0UL);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	f003 0320 	and.w	r3, r3, #32
 8005902:	2b20      	cmp	r3, #32
 8005904:	d101      	bne.n	800590a <LL_RTC_IsShadowRegBypassEnabled+0x18>
 8005906:	2301      	movs	r3, #1
 8005908:	e000      	b.n	800590c <LL_RTC_IsShadowRegBypassEnabled+0x1a>
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <LL_RTC_SetAsynchPrescaler>:
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	041b      	lsls	r3, r3, #16
 800592e:	431a      	orrs	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	611a      	str	r2, [r3, #16]
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <LL_RTC_SetSynchPrescaler>:
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005952:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005956:	683a      	ldr	r2, [r7, #0]
 8005958:	431a      	orrs	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	611a      	str	r2, [r3, #16]
}
 800595e:	bf00      	nop
 8005960:	370c      	adds	r7, #12
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <LL_RTC_EnableWriteProtection>:
{
 800596a:	b480      	push	{r7}
 800596c:	b083      	sub	sp, #12
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	22ff      	movs	r2, #255	; 0xff
 8005976:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <LL_RTC_DisableWriteProtection>:
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	22ca      	movs	r2, #202	; 0xca
 8005990:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2253      	movs	r2, #83	; 0x53
 8005996:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <LL_RTC_TIME_Config>:
{
 80059a4:	b480      	push	{r7}
 80059a6:	b087      	sub	sp, #28
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
 80059b0:	603b      	str	r3, [r7, #0]
         (((Hours   & 0xF0U) << (RTC_TR_HT_Pos  - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))    | \
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	041b      	lsls	r3, r3, #16
 80059b6:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
  temp = Format12_24                                                                            | \
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	431a      	orrs	r2, r3
         (((Minutes & 0xF0U) << (RTC_TR_MNT_Pos - 4U)) | ((Minutes & 0x0FU) << RTC_TR_MNU_Pos)) | \
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	021b      	lsls	r3, r3, #8
 80059c2:	b29b      	uxth	r3, r3
         (((Hours   & 0xF0U) << (RTC_TR_HT_Pos  - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))    | \
 80059c4:	431a      	orrs	r2, r3
         (((Seconds & 0xF0U) << (RTC_TR_ST_Pos  - 4U)) | ((Seconds & 0x0FU) << RTC_TR_SU_Pos));
 80059c6:	6a3b      	ldr	r3, [r7, #32]
 80059c8:	b2db      	uxtb	r3, r3
  temp = Format12_24                                                                            | \
 80059ca:	4313      	orrs	r3, r2
 80059cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
 80059d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	431a      	orrs	r2, r3
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	601a      	str	r2, [r3, #0]
}
 80059e2:	bf00      	nop
 80059e4:	371c      	adds	r7, #28
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
	...

080059f0 <LL_RTC_DATE_Config>:
{
 80059f0:	b480      	push	{r7}
 80059f2:	b087      	sub	sp, #28
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	607a      	str	r2, [r7, #4]
 80059fc:	603b      	str	r3, [r7, #0]
  temp = (  WeekDay                                                    << RTC_DR_WDU_Pos) | \
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	035a      	lsls	r2, r3, #13
         (((Year  & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year  & 0x0FU) << RTC_DR_YU_Pos)) | \
 8005a02:	6a3b      	ldr	r3, [r7, #32]
 8005a04:	041b      	lsls	r3, r3, #16
 8005a06:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  temp = (  WeekDay                                                    << RTC_DR_WDU_Pos) | \
 8005a0a:	431a      	orrs	r2, r3
         (((Month & 0xF0U) << (RTC_DR_MT_Pos - 4U)) | ((Month & 0x0FU) << RTC_DR_MU_Pos)) | \
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	021b      	lsls	r3, r3, #8
 8005a10:	b29b      	uxth	r3, r3
         (((Year  & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year  & 0x0FU) << RTC_DR_YU_Pos)) | \
 8005a12:	431a      	orrs	r2, r3
         (((Day   & 0xF0U) << (RTC_DR_DT_Pos - 4U)) | ((Day   & 0x0FU) << RTC_DR_DU_Pos));
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	b2db      	uxtb	r3, r3
  temp = (  WeekDay                                                    << RTC_DR_WDU_Pos) | \
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	685a      	ldr	r2, [r3, #4]
 8005a20:	4b05      	ldr	r3, [pc, #20]	; (8005a38 <LL_RTC_DATE_Config+0x48>)
 8005a22:	4013      	ands	r3, r2
 8005a24:	697a      	ldr	r2, [r7, #20]
 8005a26:	431a      	orrs	r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	605a      	str	r2, [r3, #4]
}
 8005a2c:	bf00      	nop
 8005a2e:	371c      	adds	r7, #28
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr
 8005a38:	ff0000c0 	.word	0xff0000c0

08005a3c <LL_RTC_IsActiveFlag_INIT>:
  * @rmtoll ISR          INITF         LL_RTC_IsActiveFlag_INIT
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_INIT(RTC_TypeDef *RTCx)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF)) ? 1UL : 0UL);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a4c:	2b40      	cmp	r3, #64	; 0x40
 8005a4e:	d101      	bne.n	8005a54 <LL_RTC_IsActiveFlag_INIT+0x18>
 8005a50:	2301      	movs	r3, #1
 8005a52:	e000      	b.n	8005a56 <LL_RTC_IsActiveFlag_INIT+0x1a>
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	370c      	adds	r7, #12
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr

08005a62 <LL_RTC_IsActiveFlag_RS>:
  * @rmtoll ISR          RSF           LL_RTC_IsActiveFlag_RS
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_RS(RTC_TypeDef *RTCx)
{
 8005a62:	b480      	push	{r7}
 8005a64:	b083      	sub	sp, #12
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RTCx->ISR, RTC_ISR_RSF) == (RTC_ISR_RSF)) ? 1UL : 0UL);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	f003 0320 	and.w	r3, r3, #32
 8005a72:	2b20      	cmp	r3, #32
 8005a74:	d101      	bne.n	8005a7a <LL_RTC_IsActiveFlag_RS+0x18>
 8005a76:	2301      	movs	r3, #1
 8005a78:	e000      	b.n	8005a7c <LL_RTC_IsActiveFlag_RS+0x1a>
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <LL_RTC_ClearFlag_RS>:
  * @rmtoll ISR          RSF           LL_RTC_ClearFlag_RS
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_RS(RTC_TypeDef *RTCx)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a98:	f063 02a0 	orn	r2, r3, #160	; 0xa0
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	60da      	str	r2, [r3, #12]
}
 8005aa0:	bf00      	nop
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 8005aac:	b480      	push	{r7}
 8005aae:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8005ab0:	4b07      	ldr	r3, [pc, #28]	; (8005ad0 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005abc:	bf0c      	ite	eq
 8005abe:	2301      	moveq	r3, #1
 8005ac0:	2300      	movne	r3, #0
 8005ac2:	b2db      	uxtb	r3, r3
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	e000e010 	.word	0xe000e010

08005ad4 <LL_RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized
  */
ErrorStatus LL_RTC_Init(RTC_TypeDef *RTCx, LL_RTC_InitTypeDef *RTC_InitStruct)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_RTC_HOURFORMAT(RTC_InitStruct->HourFormat));
  assert_param(IS_LL_RTC_ASYNCH_PREDIV(RTC_InitStruct->AsynchPrescaler));
  assert_param(IS_LL_RTC_SYNCH_PREDIV(RTC_InitStruct->SynchPrescaler));

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f7ff ff4e 	bl	8005984 <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 f96d 	bl	8005dc8 <LL_RTC_EnterInitMode>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d016      	beq.n	8005b22 <LL_RTC_Init+0x4e>
  {
    /* Set Hour Format */
    LL_RTC_SetHourFormat(RTCx, RTC_InitStruct->HourFormat);
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4619      	mov	r1, r3
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f7ff febc 	bl	8005878 <LL_RTC_SetHourFormat>

    /* Configure Synchronous and Asynchronous prescaler factor */
    LL_RTC_SetSynchPrescaler(RTCx, RTC_InitStruct->SynchPrescaler);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	4619      	mov	r1, r3
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f7ff ff1a 	bl	8005940 <LL_RTC_SetSynchPrescaler>
    LL_RTC_SetAsynchPrescaler(RTCx, RTC_InitStruct->AsynchPrescaler);
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	4619      	mov	r1, r3
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7ff ff00 	bl	8005918 <LL_RTC_SetAsynchPrescaler>

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f7ff fedc 	bl	80058d6 <LL_RTC_DisableInitMode>

    status = SUCCESS;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f7ff ff21 	bl	800596a <LL_RTC_EnableWriteProtection>

  return status;
 8005b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
	...

08005b34 <LL_RTC_TIME_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus LL_RTC_TIME_Init(RTC_TypeDef *RTCx, uint32_t RTC_Format, LL_RTC_TimeTypeDef *RTC_TimeStruct)
{
 8005b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b36:	b089      	sub	sp, #36	; 0x24
 8005b38:	af02      	add	r7, sp, #8
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
  assert_param(IS_LL_RTC_FORMAT(RTC_Format));

  if (RTC_Format == LL_RTC_FORMAT_BIN)
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d109      	bne.n	8005b5e <LL_RTC_TIME_Init+0x2a>
  {
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f7ff fea7 	bl	800589e <LL_RTC_GetHourFormat>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10c      	bne.n	8005b70 <LL_RTC_TIME_Init+0x3c>
      assert_param(IS_LL_RTC_HOUR12(RTC_TimeStruct->Hours));
      assert_param(IS_LL_RTC_TIME_FORMAT(RTC_TimeStruct->TimeFormat));
    }
    else
    {
      RTC_TimeStruct->TimeFormat = 0x00U;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	601a      	str	r2, [r3, #0]
 8005b5c:	e008      	b.n	8005b70 <LL_RTC_TIME_Init+0x3c>
    assert_param(IS_LL_RTC_MINUTES(RTC_TimeStruct->Minutes));
    assert_param(IS_LL_RTC_SECONDS(RTC_TimeStruct->Seconds));
  }
  else
  {
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f7ff fe9d 	bl	800589e <LL_RTC_GetHourFormat>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d102      	bne.n	8005b70 <LL_RTC_TIME_Init+0x3c>
      assert_param(IS_LL_RTC_HOUR12(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Hours)));
      assert_param(IS_LL_RTC_TIME_FORMAT(RTC_TimeStruct->TimeFormat));
    }
    else
    {
      RTC_TimeStruct->TimeFormat = 0x00U;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	601a      	str	r2, [r3, #0]
    assert_param(IS_LL_RTC_MINUTES(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Minutes)));
    assert_param(IS_LL_RTC_SECONDS(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Seconds)));
  }

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	f7ff ff07 	bl	8005984 <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f000 f926 	bl	8005dc8 <LL_RTC_EnterInitMode>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d073      	beq.n	8005c6a <LL_RTC_TIME_Init+0x136>
  {
    /* Check the input parameters format */
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00f      	beq.n	8005ba8 <LL_RTC_TIME_Init+0x74>
    {
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6819      	ldr	r1, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	791b      	ldrb	r3, [r3, #4]
 8005b90:	461a      	mov	r2, r3
                         RTC_TimeStruct->Minutes, RTC_TimeStruct->Seconds);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	795b      	ldrb	r3, [r3, #5]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8005b96:	4618      	mov	r0, r3
                         RTC_TimeStruct->Minutes, RTC_TimeStruct->Seconds);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	799b      	ldrb	r3, [r3, #6]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8005b9c:	9300      	str	r3, [sp, #0]
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f7ff feff 	bl	80059a4 <LL_RTC_TIME_Config>
 8005ba6:	e04f      	b.n	8005c48 <LL_RTC_TIME_Init+0x114>
    }
    else
    {
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681c      	ldr	r4, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	791b      	ldrb	r3, [r3, #4]
 8005bb0:	4a32      	ldr	r2, [pc, #200]	; (8005c7c <LL_RTC_TIME_Init+0x148>)
 8005bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb6:	08db      	lsrs	r3, r3, #3
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	011b      	lsls	r3, r3, #4
 8005bbc:	b2d8      	uxtb	r0, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	791a      	ldrb	r2, [r3, #4]
 8005bc2:	4b2e      	ldr	r3, [pc, #184]	; (8005c7c <LL_RTC_TIME_Init+0x148>)
 8005bc4:	fba3 1302 	umull	r1, r3, r3, r2
 8005bc8:	08d9      	lsrs	r1, r3, #3
 8005bca:	460b      	mov	r3, r1
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	440b      	add	r3, r1
 8005bd0:	005b      	lsls	r3, r3, #1
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	4303      	orrs	r3, r0
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	461d      	mov	r5, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Minutes),
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	795b      	ldrb	r3, [r3, #5]
 8005be0:	4a26      	ldr	r2, [pc, #152]	; (8005c7c <LL_RTC_TIME_Init+0x148>)
 8005be2:	fba2 2303 	umull	r2, r3, r2, r3
 8005be6:	08db      	lsrs	r3, r3, #3
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	011b      	lsls	r3, r3, #4
 8005bec:	b2d8      	uxtb	r0, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	795a      	ldrb	r2, [r3, #5]
 8005bf2:	4b22      	ldr	r3, [pc, #136]	; (8005c7c <LL_RTC_TIME_Init+0x148>)
 8005bf4:	fba3 1302 	umull	r1, r3, r3, r2
 8005bf8:	08d9      	lsrs	r1, r3, #3
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	440b      	add	r3, r1
 8005c00:	005b      	lsls	r3, r3, #1
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	4303      	orrs	r3, r0
 8005c08:	b2db      	uxtb	r3, r3
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8005c0a:	461e      	mov	r6, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Seconds));
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	799b      	ldrb	r3, [r3, #6]
 8005c10:	4a1a      	ldr	r2, [pc, #104]	; (8005c7c <LL_RTC_TIME_Init+0x148>)
 8005c12:	fba2 2303 	umull	r2, r3, r2, r3
 8005c16:	08db      	lsrs	r3, r3, #3
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	011b      	lsls	r3, r3, #4
 8005c1c:	b2d8      	uxtb	r0, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	799a      	ldrb	r2, [r3, #6]
 8005c22:	4b16      	ldr	r3, [pc, #88]	; (8005c7c <LL_RTC_TIME_Init+0x148>)
 8005c24:	fba3 1302 	umull	r1, r3, r3, r2
 8005c28:	08d9      	lsrs	r1, r3, #3
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	440b      	add	r3, r1
 8005c30:	005b      	lsls	r3, r3, #1
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	4303      	orrs	r3, r0
 8005c38:	b2db      	uxtb	r3, r3
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8005c3a:	9300      	str	r3, [sp, #0]
 8005c3c:	4633      	mov	r3, r6
 8005c3e:	462a      	mov	r2, r5
 8005c40:	4621      	mov	r1, r4
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	f7ff feae 	bl	80059a4 <LL_RTC_TIME_Config>
    }

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f7ff fe44 	bl	80058d6 <LL_RTC_DisableInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f7ff fe4f 	bl	80058f2 <LL_RTC_IsShadowRegBypassEnabled>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d105      	bne.n	8005c66 <LL_RTC_TIME_Init+0x132>
    {
      status = LL_RTC_WaitForSynchro(RTCx);
 8005c5a:	68f8      	ldr	r0, [r7, #12]
 8005c5c:	f000 f8e9 	bl	8005e32 <LL_RTC_WaitForSynchro>
 8005c60:	4603      	mov	r3, r0
 8005c62:	75fb      	strb	r3, [r7, #23]
 8005c64:	e001      	b.n	8005c6a <LL_RTC_TIME_Init+0x136>
    }
    else
    {
      status = SUCCESS;
 8005c66:	2300      	movs	r3, #0
 8005c68:	75fb      	strb	r3, [r7, #23]
    }
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f7ff fe7d 	bl	800596a <LL_RTC_EnableWriteProtection>

  return status;
 8005c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	371c      	adds	r7, #28
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	cccccccd 	.word	0xcccccccd

08005c80 <LL_RTC_DATE_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Day register is configured
  *          - ERROR: RTC Day register is not configured
  */
ErrorStatus LL_RTC_DATE_Init(RTC_TypeDef *RTCx, uint32_t RTC_Format, LL_RTC_DateTypeDef *RTC_DateStruct)
{
 8005c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c82:	b089      	sub	sp, #36	; 0x24
 8005c84:	af02      	add	r7, sp, #8
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
  assert_param(IS_LL_RTC_FORMAT(RTC_Format));

  if ((RTC_Format == LL_RTC_FORMAT_BIN) && ((RTC_DateStruct->Month & 0x10U) == 0x10U))
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10e      	bne.n	8005cb4 <LL_RTC_DATE_Init+0x34>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	785b      	ldrb	r3, [r3, #1]
 8005c9a:	f003 0310 	and.w	r3, r3, #16
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d008      	beq.n	8005cb4 <LL_RTC_DATE_Init+0x34>
  {
    RTC_DateStruct->Month = (uint8_t)(RTC_DateStruct->Month & (uint8_t)~(0x10U)) + 0x0AU;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	785b      	ldrb	r3, [r3, #1]
 8005ca6:	f023 0310 	bic.w	r3, r3, #16
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	330a      	adds	r3, #10
 8005cae:	b2da      	uxtb	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	705a      	strb	r2, [r3, #1]
    assert_param(IS_LL_RTC_DAY(__LL_RTC_CONVERT_BCD2BIN(RTC_DateStruct->Day)));
  }
  assert_param(IS_LL_RTC_WEEKDAY(RTC_DateStruct->WeekDay));

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f7ff fe65 	bl	8005984 <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f000 f884 	bl	8005dc8 <LL_RTC_EnterInitMode>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d075      	beq.n	8005db2 <LL_RTC_DATE_Init+0x132>
  {
    /* Check the input parameters format */
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d010      	beq.n	8005cee <LL_RTC_DATE_Init+0x6e>
    {
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, RTC_DateStruct->Day, RTC_DateStruct->Month, RTC_DateStruct->Year);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	789b      	ldrb	r3, [r3, #2]
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	785b      	ldrb	r3, [r3, #1]
 8005cdc:	4618      	mov	r0, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	78db      	ldrb	r3, [r3, #3]
 8005ce2:	9300      	str	r3, [sp, #0]
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f7ff fe82 	bl	80059f0 <LL_RTC_DATE_Config>
 8005cec:	e050      	b.n	8005d90 <LL_RTC_DATE_Init+0x110>
    }
    else
    {
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	461c      	mov	r4, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	789b      	ldrb	r3, [r3, #2]
 8005cf8:	4a32      	ldr	r2, [pc, #200]	; (8005dc4 <LL_RTC_DATE_Init+0x144>)
 8005cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8005cfe:	08db      	lsrs	r3, r3, #3
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	011b      	lsls	r3, r3, #4
 8005d04:	b2d8      	uxtb	r0, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	789a      	ldrb	r2, [r3, #2]
 8005d0a:	4b2e      	ldr	r3, [pc, #184]	; (8005dc4 <LL_RTC_DATE_Init+0x144>)
 8005d0c:	fba3 1302 	umull	r1, r3, r3, r2
 8005d10:	08d9      	lsrs	r1, r3, #3
 8005d12:	460b      	mov	r3, r1
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	440b      	add	r3, r1
 8005d18:	005b      	lsls	r3, r3, #1
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	4303      	orrs	r3, r0
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	461d      	mov	r5, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	785b      	ldrb	r3, [r3, #1]
 8005d28:	4a26      	ldr	r2, [pc, #152]	; (8005dc4 <LL_RTC_DATE_Init+0x144>)
 8005d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d2e:	08db      	lsrs	r3, r3, #3
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	011b      	lsls	r3, r3, #4
 8005d34:	b2d8      	uxtb	r0, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	785a      	ldrb	r2, [r3, #1]
 8005d3a:	4b22      	ldr	r3, [pc, #136]	; (8005dc4 <LL_RTC_DATE_Init+0x144>)
 8005d3c:	fba3 1302 	umull	r1, r3, r3, r2
 8005d40:	08d9      	lsrs	r1, r3, #3
 8005d42:	460b      	mov	r3, r1
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	440b      	add	r3, r1
 8005d48:	005b      	lsls	r3, r3, #1
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	4303      	orrs	r3, r0
 8005d50:	b2db      	uxtb	r3, r3
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 8005d52:	461e      	mov	r6, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	78db      	ldrb	r3, [r3, #3]
 8005d58:	4a1a      	ldr	r2, [pc, #104]	; (8005dc4 <LL_RTC_DATE_Init+0x144>)
 8005d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d5e:	08db      	lsrs	r3, r3, #3
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	011b      	lsls	r3, r3, #4
 8005d64:	b2d8      	uxtb	r0, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	78da      	ldrb	r2, [r3, #3]
 8005d6a:	4b16      	ldr	r3, [pc, #88]	; (8005dc4 <LL_RTC_DATE_Init+0x144>)
 8005d6c:	fba3 1302 	umull	r1, r3, r3, r2
 8005d70:	08d9      	lsrs	r1, r3, #3
 8005d72:	460b      	mov	r3, r1
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	440b      	add	r3, r1
 8005d78:	005b      	lsls	r3, r3, #1
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	4303      	orrs	r3, r0
 8005d80:	b2db      	uxtb	r3, r3
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 8005d82:	9300      	str	r3, [sp, #0]
 8005d84:	4633      	mov	r3, r6
 8005d86:	462a      	mov	r2, r5
 8005d88:	4621      	mov	r1, r4
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f7ff fe30 	bl	80059f0 <LL_RTC_DATE_Config>
    }

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f7ff fda0 	bl	80058d6 <LL_RTC_DisableInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f7ff fdab 	bl	80058f2 <LL_RTC_IsShadowRegBypassEnabled>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d105      	bne.n	8005dae <LL_RTC_DATE_Init+0x12e>
    {
      status = LL_RTC_WaitForSynchro(RTCx);
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	f000 f845 	bl	8005e32 <LL_RTC_WaitForSynchro>
 8005da8:	4603      	mov	r3, r0
 8005daa:	75fb      	strb	r3, [r7, #23]
 8005dac:	e001      	b.n	8005db2 <LL_RTC_DATE_Init+0x132>
    }
    else
    {
      status = SUCCESS;
 8005dae:	2300      	movs	r3, #0
 8005db0:	75fb      	strb	r3, [r7, #23]
    }
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f7ff fdd9 	bl	800596a <LL_RTC_EnableWriteProtection>

  return status;
 8005db8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	371c      	adds	r7, #28
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	cccccccd 	.word	0xcccccccd

08005dc8 <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b086      	sub	sp, #24
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 8005dd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005dd4:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp = 0U;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	613b      	str	r3, [r7, #16]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Check if the Initialization mode is set */
  if (LL_RTC_IsActiveFlag_INIT(RTCx) == 0U)
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f7ff fe2c 	bl	8005a3c <LL_RTC_IsActiveFlag_INIT>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d11e      	bne.n	8005e28 <LL_RTC_EnterInitMode+0x60>
  {
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7ff fd65 	bl	80058ba <LL_RTC_EnableInitMode>

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f7ff fe23 	bl	8005a3c <LL_RTC_IsActiveFlag_INIT>
 8005df6:	6138      	str	r0, [r7, #16]
    while ((timeout != 0U) && (tmp != 1U))
 8005df8:	e010      	b.n	8005e1c <LL_RTC_EnterInitMode+0x54>
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8005dfa:	f7ff fe57 	bl	8005aac <LL_SYSTICK_IsActiveCounterFlag>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d102      	bne.n	8005e0a <LL_RTC_EnterInitMode+0x42>
      {
        timeout --;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	3b01      	subs	r3, #1
 8005e08:	60fb      	str	r3, [r7, #12]
      }
      tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f7ff fe16 	bl	8005a3c <LL_RTC_IsActiveFlag_INIT>
 8005e10:	6138      	str	r0, [r7, #16]
      if (timeout == 0U)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d101      	bne.n	8005e1c <LL_RTC_EnterInitMode+0x54>
      {
        status = ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	75fb      	strb	r3, [r7, #23]
    while ((timeout != 0U) && (tmp != 1U))
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d002      	beq.n	8005e28 <LL_RTC_EnterInitMode+0x60>
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d1e8      	bne.n	8005dfa <LL_RTC_EnterInitMode+0x32>
      }
    }
  }
  return status;
 8005e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3718      	adds	r7, #24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <LL_RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus LL_RTC_WaitForSynchro(RTC_TypeDef *RTCx)
{
 8005e32:	b580      	push	{r7, lr}
 8005e34:	b086      	sub	sp, #24
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_SYNCHRO_TIMEOUT;
 8005e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e3e:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 8005e40:	2300      	movs	r3, #0
 8005e42:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp = 0U;
 8005e44:	2300      	movs	r3, #0
 8005e46:	613b      	str	r3, [r7, #16]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Clear RSF flag */
  LL_RTC_ClearFlag_RS(RTCx);
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f7ff fe1d 	bl	8005a88 <LL_RTC_ClearFlag_RS>

  /* Wait the registers to be synchronised */
  tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f7ff fe07 	bl	8005a62 <LL_RTC_IsActiveFlag_RS>
 8005e54:	6138      	str	r0, [r7, #16]
  while ((timeout != 0U) && (tmp != 1U))
 8005e56:	e010      	b.n	8005e7a <LL_RTC_WaitForSynchro+0x48>
  {
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8005e58:	f7ff fe28 	bl	8005aac <LL_SYSTICK_IsActiveCounterFlag>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d102      	bne.n	8005e68 <LL_RTC_WaitForSynchro+0x36>
    {
      timeout--;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	3b01      	subs	r3, #1
 8005e66:	60fb      	str	r3, [r7, #12]
    }
    tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f7ff fdfa 	bl	8005a62 <LL_RTC_IsActiveFlag_RS>
 8005e6e:	6138      	str	r0, [r7, #16]
    if (timeout == 0U)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d101      	bne.n	8005e7a <LL_RTC_WaitForSynchro+0x48>
    {
      status = ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	75fb      	strb	r3, [r7, #23]
  while ((timeout != 0U) && (tmp != 1U))
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d002      	beq.n	8005e86 <LL_RTC_WaitForSynchro+0x54>
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d1e8      	bne.n	8005e58 <LL_RTC_WaitForSynchro+0x26>
    }
  }

  return (status);
 8005e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3718      	adds	r7, #24
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <LL_TIM_SetPrescaler>:
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	683a      	ldr	r2, [r7, #0]
 8005e9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005ea0:	bf00      	nop
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <LL_TIM_SetAutoReload>:
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	683a      	ldr	r2, [r7, #0]
 8005eba:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <LL_TIM_SetRepetitionCounter>:
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	683a      	ldr	r2, [r7, #0]
 8005ed6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005ed8:	bf00      	nop
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	695b      	ldr	r3, [r3, #20]
 8005ef0:	f043 0201 	orr.w	r2, r3, #1
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	615a      	str	r2, [r3, #20]
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a3d      	ldr	r2, [pc, #244]	; (800600c <LL_TIM_Init+0x108>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d013      	beq.n	8005f44 <LL_TIM_Init+0x40>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f22:	d00f      	beq.n	8005f44 <LL_TIM_Init+0x40>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a3a      	ldr	r2, [pc, #232]	; (8006010 <LL_TIM_Init+0x10c>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d00b      	beq.n	8005f44 <LL_TIM_Init+0x40>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a39      	ldr	r2, [pc, #228]	; (8006014 <LL_TIM_Init+0x110>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d007      	beq.n	8005f44 <LL_TIM_Init+0x40>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a38      	ldr	r2, [pc, #224]	; (8006018 <LL_TIM_Init+0x114>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d003      	beq.n	8005f44 <LL_TIM_Init+0x40>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a37      	ldr	r2, [pc, #220]	; (800601c <LL_TIM_Init+0x118>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d106      	bne.n	8005f52 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a2d      	ldr	r2, [pc, #180]	; (800600c <LL_TIM_Init+0x108>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d02b      	beq.n	8005fb2 <LL_TIM_Init+0xae>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f60:	d027      	beq.n	8005fb2 <LL_TIM_Init+0xae>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a2a      	ldr	r2, [pc, #168]	; (8006010 <LL_TIM_Init+0x10c>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d023      	beq.n	8005fb2 <LL_TIM_Init+0xae>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a29      	ldr	r2, [pc, #164]	; (8006014 <LL_TIM_Init+0x110>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d01f      	beq.n	8005fb2 <LL_TIM_Init+0xae>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a28      	ldr	r2, [pc, #160]	; (8006018 <LL_TIM_Init+0x114>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d01b      	beq.n	8005fb2 <LL_TIM_Init+0xae>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a27      	ldr	r2, [pc, #156]	; (800601c <LL_TIM_Init+0x118>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d017      	beq.n	8005fb2 <LL_TIM_Init+0xae>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a26      	ldr	r2, [pc, #152]	; (8006020 <LL_TIM_Init+0x11c>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d013      	beq.n	8005fb2 <LL_TIM_Init+0xae>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a25      	ldr	r2, [pc, #148]	; (8006024 <LL_TIM_Init+0x120>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d00f      	beq.n	8005fb2 <LL_TIM_Init+0xae>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a24      	ldr	r2, [pc, #144]	; (8006028 <LL_TIM_Init+0x124>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d00b      	beq.n	8005fb2 <LL_TIM_Init+0xae>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a23      	ldr	r2, [pc, #140]	; (800602c <LL_TIM_Init+0x128>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d007      	beq.n	8005fb2 <LL_TIM_Init+0xae>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a22      	ldr	r2, [pc, #136]	; (8006030 <LL_TIM_Init+0x12c>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d003      	beq.n	8005fb2 <LL_TIM_Init+0xae>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a21      	ldr	r2, [pc, #132]	; (8006034 <LL_TIM_Init+0x130>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d106      	bne.n	8005fc0 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	4619      	mov	r1, r3
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f7ff ff6d 	bl	8005eac <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	881b      	ldrh	r3, [r3, #0]
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f7ff ff59 	bl	8005e90 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a0a      	ldr	r2, [pc, #40]	; (800600c <LL_TIM_Init+0x108>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d003      	beq.n	8005fee <LL_TIM_Init+0xea>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a0c      	ldr	r2, [pc, #48]	; (800601c <LL_TIM_Init+0x118>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d105      	bne.n	8005ffa <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f7ff ff67 	bl	8005ec8 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f7ff ff72 	bl	8005ee4 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	40010000 	.word	0x40010000
 8006010:	40000400 	.word	0x40000400
 8006014:	40000800 	.word	0x40000800
 8006018:	40000c00 	.word	0x40000c00
 800601c:	40010400 	.word	0x40010400
 8006020:	40014000 	.word	0x40014000
 8006024:	40014400 	.word	0x40014400
 8006028:	40014800 	.word	0x40014800
 800602c:	40001800 	.word	0x40001800
 8006030:	40001c00 	.word	0x40001c00
 8006034:	40002000 	.word	0x40002000

08006038 <LL_USART_IsEnabled>:
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006048:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800604c:	bf0c      	ite	eq
 800604e:	2301      	moveq	r3, #1
 8006050:	2300      	movne	r3, #0
 8006052:	b2db      	uxtb	r3, r3
}
 8006054:	4618      	mov	r0, r3
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <LL_USART_SetStopBitsLength>:
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	431a      	orrs	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	611a      	str	r2, [r3, #16]
}
 800607a:	bf00      	nop
 800607c:	370c      	adds	r7, #12
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr

08006086 <LL_USART_SetHWFlowCtrl>:
{
 8006086:	b480      	push	{r7}
 8006088:	b083      	sub	sp, #12
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
 800608e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	695b      	ldr	r3, [r3, #20]
 8006094:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	431a      	orrs	r2, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	615a      	str	r2, [r3, #20]
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <LL_USART_SetBaudRate>:
{
 80060ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060b0:	b0c0      	sub	sp, #256	; 0x100
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80060b8:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 80060bc:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80060c0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80060c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060cc:	f040 810c 	bne.w	80062e8 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80060d0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80060d4:	2200      	movs	r2, #0
 80060d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80060da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80060de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80060e2:	4622      	mov	r2, r4
 80060e4:	462b      	mov	r3, r5
 80060e6:	1891      	adds	r1, r2, r2
 80060e8:	6639      	str	r1, [r7, #96]	; 0x60
 80060ea:	415b      	adcs	r3, r3
 80060ec:	667b      	str	r3, [r7, #100]	; 0x64
 80060ee:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80060f2:	4621      	mov	r1, r4
 80060f4:	eb12 0801 	adds.w	r8, r2, r1
 80060f8:	4629      	mov	r1, r5
 80060fa:	eb43 0901 	adc.w	r9, r3, r1
 80060fe:	f04f 0200 	mov.w	r2, #0
 8006102:	f04f 0300 	mov.w	r3, #0
 8006106:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800610a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800610e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006112:	4690      	mov	r8, r2
 8006114:	4699      	mov	r9, r3
 8006116:	4623      	mov	r3, r4
 8006118:	eb18 0303 	adds.w	r3, r8, r3
 800611c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006120:	462b      	mov	r3, r5
 8006122:	eb49 0303 	adc.w	r3, r9, r3
 8006126:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800612a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800612e:	2200      	movs	r2, #0
 8006130:	469a      	mov	sl, r3
 8006132:	4693      	mov	fp, r2
 8006134:	eb1a 030a 	adds.w	r3, sl, sl
 8006138:	65bb      	str	r3, [r7, #88]	; 0x58
 800613a:	eb4b 030b 	adc.w	r3, fp, fp
 800613e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006140:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006144:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006148:	f7fa f922 	bl	8000390 <__aeabi_uldivmod>
 800614c:	4602      	mov	r2, r0
 800614e:	460b      	mov	r3, r1
 8006150:	4b64      	ldr	r3, [pc, #400]	; (80062e4 <LL_USART_SetBaudRate+0x238>)
 8006152:	fba3 2302 	umull	r2, r3, r3, r2
 8006156:	095b      	lsrs	r3, r3, #5
 8006158:	b29b      	uxth	r3, r3
 800615a:	011b      	lsls	r3, r3, #4
 800615c:	b29c      	uxth	r4, r3
 800615e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006162:	2200      	movs	r2, #0
 8006164:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006168:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800616c:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8006170:	4642      	mov	r2, r8
 8006172:	464b      	mov	r3, r9
 8006174:	1891      	adds	r1, r2, r2
 8006176:	6539      	str	r1, [r7, #80]	; 0x50
 8006178:	415b      	adcs	r3, r3
 800617a:	657b      	str	r3, [r7, #84]	; 0x54
 800617c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006180:	4641      	mov	r1, r8
 8006182:	1851      	adds	r1, r2, r1
 8006184:	64b9      	str	r1, [r7, #72]	; 0x48
 8006186:	4649      	mov	r1, r9
 8006188:	414b      	adcs	r3, r1
 800618a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800618c:	f04f 0200 	mov.w	r2, #0
 8006190:	f04f 0300 	mov.w	r3, #0
 8006194:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8006198:	4659      	mov	r1, fp
 800619a:	00cb      	lsls	r3, r1, #3
 800619c:	4651      	mov	r1, sl
 800619e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061a2:	4651      	mov	r1, sl
 80061a4:	00ca      	lsls	r2, r1, #3
 80061a6:	4610      	mov	r0, r2
 80061a8:	4619      	mov	r1, r3
 80061aa:	4603      	mov	r3, r0
 80061ac:	4642      	mov	r2, r8
 80061ae:	189b      	adds	r3, r3, r2
 80061b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061b4:	464b      	mov	r3, r9
 80061b6:	460a      	mov	r2, r1
 80061b8:	eb42 0303 	adc.w	r3, r2, r3
 80061bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80061c0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80061c4:	2200      	movs	r2, #0
 80061c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061ca:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80061ce:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80061d2:	460b      	mov	r3, r1
 80061d4:	18db      	adds	r3, r3, r3
 80061d6:	643b      	str	r3, [r7, #64]	; 0x40
 80061d8:	4613      	mov	r3, r2
 80061da:	eb42 0303 	adc.w	r3, r2, r3
 80061de:	647b      	str	r3, [r7, #68]	; 0x44
 80061e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80061e4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80061e8:	f7fa f8d2 	bl	8000390 <__aeabi_uldivmod>
 80061ec:	4602      	mov	r2, r0
 80061ee:	460b      	mov	r3, r1
 80061f0:	4611      	mov	r1, r2
 80061f2:	4b3c      	ldr	r3, [pc, #240]	; (80062e4 <LL_USART_SetBaudRate+0x238>)
 80061f4:	fba3 2301 	umull	r2, r3, r3, r1
 80061f8:	095b      	lsrs	r3, r3, #5
 80061fa:	2264      	movs	r2, #100	; 0x64
 80061fc:	fb02 f303 	mul.w	r3, r2, r3
 8006200:	1acb      	subs	r3, r1, r3
 8006202:	00db      	lsls	r3, r3, #3
 8006204:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006208:	4b36      	ldr	r3, [pc, #216]	; (80062e4 <LL_USART_SetBaudRate+0x238>)
 800620a:	fba3 2302 	umull	r2, r3, r3, r2
 800620e:	095b      	lsrs	r3, r3, #5
 8006210:	b29b      	uxth	r3, r3
 8006212:	005b      	lsls	r3, r3, #1
 8006214:	b29b      	uxth	r3, r3
 8006216:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800621a:	b29b      	uxth	r3, r3
 800621c:	4423      	add	r3, r4
 800621e:	b29c      	uxth	r4, r3
 8006220:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006224:	2200      	movs	r2, #0
 8006226:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800622a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800622e:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8006232:	4642      	mov	r2, r8
 8006234:	464b      	mov	r3, r9
 8006236:	1891      	adds	r1, r2, r2
 8006238:	63b9      	str	r1, [r7, #56]	; 0x38
 800623a:	415b      	adcs	r3, r3
 800623c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800623e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006242:	4641      	mov	r1, r8
 8006244:	1851      	adds	r1, r2, r1
 8006246:	6339      	str	r1, [r7, #48]	; 0x30
 8006248:	4649      	mov	r1, r9
 800624a:	414b      	adcs	r3, r1
 800624c:	637b      	str	r3, [r7, #52]	; 0x34
 800624e:	f04f 0200 	mov.w	r2, #0
 8006252:	f04f 0300 	mov.w	r3, #0
 8006256:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800625a:	4659      	mov	r1, fp
 800625c:	00cb      	lsls	r3, r1, #3
 800625e:	4651      	mov	r1, sl
 8006260:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006264:	4651      	mov	r1, sl
 8006266:	00ca      	lsls	r2, r1, #3
 8006268:	4610      	mov	r0, r2
 800626a:	4619      	mov	r1, r3
 800626c:	4603      	mov	r3, r0
 800626e:	4642      	mov	r2, r8
 8006270:	189b      	adds	r3, r3, r2
 8006272:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006276:	464b      	mov	r3, r9
 8006278:	460a      	mov	r2, r1
 800627a:	eb42 0303 	adc.w	r3, r2, r3
 800627e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006282:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006286:	2200      	movs	r2, #0
 8006288:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800628c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8006290:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006294:	460b      	mov	r3, r1
 8006296:	18db      	adds	r3, r3, r3
 8006298:	62bb      	str	r3, [r7, #40]	; 0x28
 800629a:	4613      	mov	r3, r2
 800629c:	eb42 0303 	adc.w	r3, r2, r3
 80062a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80062a6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80062aa:	f7fa f871 	bl	8000390 <__aeabi_uldivmod>
 80062ae:	4602      	mov	r2, r0
 80062b0:	460b      	mov	r3, r1
 80062b2:	4b0c      	ldr	r3, [pc, #48]	; (80062e4 <LL_USART_SetBaudRate+0x238>)
 80062b4:	fba3 1302 	umull	r1, r3, r3, r2
 80062b8:	095b      	lsrs	r3, r3, #5
 80062ba:	2164      	movs	r1, #100	; 0x64
 80062bc:	fb01 f303 	mul.w	r3, r1, r3
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	00db      	lsls	r3, r3, #3
 80062c4:	3332      	adds	r3, #50	; 0x32
 80062c6:	4a07      	ldr	r2, [pc, #28]	; (80062e4 <LL_USART_SetBaudRate+0x238>)
 80062c8:	fba2 2303 	umull	r2, r3, r2, r3
 80062cc:	095b      	lsrs	r3, r3, #5
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	f003 0307 	and.w	r3, r3, #7
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	4423      	add	r3, r4
 80062d8:	b29b      	uxth	r3, r3
 80062da:	461a      	mov	r2, r3
 80062dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062e0:	609a      	str	r2, [r3, #8]
}
 80062e2:	e107      	b.n	80064f4 <LL_USART_SetBaudRate+0x448>
 80062e4:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80062e8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80062ec:	2200      	movs	r2, #0
 80062ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80062f2:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80062f6:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 80062fa:	4642      	mov	r2, r8
 80062fc:	464b      	mov	r3, r9
 80062fe:	1891      	adds	r1, r2, r2
 8006300:	6239      	str	r1, [r7, #32]
 8006302:	415b      	adcs	r3, r3
 8006304:	627b      	str	r3, [r7, #36]	; 0x24
 8006306:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800630a:	4641      	mov	r1, r8
 800630c:	1854      	adds	r4, r2, r1
 800630e:	4649      	mov	r1, r9
 8006310:	eb43 0501 	adc.w	r5, r3, r1
 8006314:	f04f 0200 	mov.w	r2, #0
 8006318:	f04f 0300 	mov.w	r3, #0
 800631c:	00eb      	lsls	r3, r5, #3
 800631e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006322:	00e2      	lsls	r2, r4, #3
 8006324:	4614      	mov	r4, r2
 8006326:	461d      	mov	r5, r3
 8006328:	4643      	mov	r3, r8
 800632a:	18e3      	adds	r3, r4, r3
 800632c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006330:	464b      	mov	r3, r9
 8006332:	eb45 0303 	adc.w	r3, r5, r3
 8006336:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800633a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800633e:	2200      	movs	r2, #0
 8006340:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006344:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8006348:	f04f 0200 	mov.w	r2, #0
 800634c:	f04f 0300 	mov.w	r3, #0
 8006350:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8006354:	4629      	mov	r1, r5
 8006356:	008b      	lsls	r3, r1, #2
 8006358:	4621      	mov	r1, r4
 800635a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800635e:	4621      	mov	r1, r4
 8006360:	008a      	lsls	r2, r1, #2
 8006362:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8006366:	f7fa f813 	bl	8000390 <__aeabi_uldivmod>
 800636a:	4602      	mov	r2, r0
 800636c:	460b      	mov	r3, r1
 800636e:	4b64      	ldr	r3, [pc, #400]	; (8006500 <LL_USART_SetBaudRate+0x454>)
 8006370:	fba3 2302 	umull	r2, r3, r3, r2
 8006374:	095b      	lsrs	r3, r3, #5
 8006376:	b29b      	uxth	r3, r3
 8006378:	011b      	lsls	r3, r3, #4
 800637a:	b29c      	uxth	r4, r3
 800637c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006380:	2200      	movs	r2, #0
 8006382:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006386:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800638a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 800638e:	4642      	mov	r2, r8
 8006390:	464b      	mov	r3, r9
 8006392:	1891      	adds	r1, r2, r2
 8006394:	61b9      	str	r1, [r7, #24]
 8006396:	415b      	adcs	r3, r3
 8006398:	61fb      	str	r3, [r7, #28]
 800639a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800639e:	4641      	mov	r1, r8
 80063a0:	1851      	adds	r1, r2, r1
 80063a2:	6139      	str	r1, [r7, #16]
 80063a4:	4649      	mov	r1, r9
 80063a6:	414b      	adcs	r3, r1
 80063a8:	617b      	str	r3, [r7, #20]
 80063aa:	f04f 0200 	mov.w	r2, #0
 80063ae:	f04f 0300 	mov.w	r3, #0
 80063b2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063b6:	4659      	mov	r1, fp
 80063b8:	00cb      	lsls	r3, r1, #3
 80063ba:	4651      	mov	r1, sl
 80063bc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063c0:	4651      	mov	r1, sl
 80063c2:	00ca      	lsls	r2, r1, #3
 80063c4:	4610      	mov	r0, r2
 80063c6:	4619      	mov	r1, r3
 80063c8:	4603      	mov	r3, r0
 80063ca:	4642      	mov	r2, r8
 80063cc:	189b      	adds	r3, r3, r2
 80063ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80063d2:	464b      	mov	r3, r9
 80063d4:	460a      	mov	r2, r1
 80063d6:	eb42 0303 	adc.w	r3, r2, r3
 80063da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80063de:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80063e2:	2200      	movs	r2, #0
 80063e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80063e8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80063ec:	f04f 0200 	mov.w	r2, #0
 80063f0:	f04f 0300 	mov.w	r3, #0
 80063f4:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 80063f8:	4649      	mov	r1, r9
 80063fa:	008b      	lsls	r3, r1, #2
 80063fc:	4641      	mov	r1, r8
 80063fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006402:	4641      	mov	r1, r8
 8006404:	008a      	lsls	r2, r1, #2
 8006406:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800640a:	f7f9 ffc1 	bl	8000390 <__aeabi_uldivmod>
 800640e:	4602      	mov	r2, r0
 8006410:	460b      	mov	r3, r1
 8006412:	4b3b      	ldr	r3, [pc, #236]	; (8006500 <LL_USART_SetBaudRate+0x454>)
 8006414:	fba3 1302 	umull	r1, r3, r3, r2
 8006418:	095b      	lsrs	r3, r3, #5
 800641a:	2164      	movs	r1, #100	; 0x64
 800641c:	fb01 f303 	mul.w	r3, r1, r3
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	011b      	lsls	r3, r3, #4
 8006424:	3332      	adds	r3, #50	; 0x32
 8006426:	4a36      	ldr	r2, [pc, #216]	; (8006500 <LL_USART_SetBaudRate+0x454>)
 8006428:	fba2 2303 	umull	r2, r3, r2, r3
 800642c:	095b      	lsrs	r3, r3, #5
 800642e:	b29b      	uxth	r3, r3
 8006430:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006434:	b29b      	uxth	r3, r3
 8006436:	4423      	add	r3, r4
 8006438:	b29c      	uxth	r4, r3
 800643a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800643e:	2200      	movs	r2, #0
 8006440:	67bb      	str	r3, [r7, #120]	; 0x78
 8006442:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006444:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006448:	4642      	mov	r2, r8
 800644a:	464b      	mov	r3, r9
 800644c:	1891      	adds	r1, r2, r2
 800644e:	60b9      	str	r1, [r7, #8]
 8006450:	415b      	adcs	r3, r3
 8006452:	60fb      	str	r3, [r7, #12]
 8006454:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006458:	4641      	mov	r1, r8
 800645a:	1851      	adds	r1, r2, r1
 800645c:	6039      	str	r1, [r7, #0]
 800645e:	4649      	mov	r1, r9
 8006460:	414b      	adcs	r3, r1
 8006462:	607b      	str	r3, [r7, #4]
 8006464:	f04f 0200 	mov.w	r2, #0
 8006468:	f04f 0300 	mov.w	r3, #0
 800646c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006470:	4659      	mov	r1, fp
 8006472:	00cb      	lsls	r3, r1, #3
 8006474:	4651      	mov	r1, sl
 8006476:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800647a:	4651      	mov	r1, sl
 800647c:	00ca      	lsls	r2, r1, #3
 800647e:	4610      	mov	r0, r2
 8006480:	4619      	mov	r1, r3
 8006482:	4603      	mov	r3, r0
 8006484:	4642      	mov	r2, r8
 8006486:	189b      	adds	r3, r3, r2
 8006488:	673b      	str	r3, [r7, #112]	; 0x70
 800648a:	464b      	mov	r3, r9
 800648c:	460a      	mov	r2, r1
 800648e:	eb42 0303 	adc.w	r3, r2, r3
 8006492:	677b      	str	r3, [r7, #116]	; 0x74
 8006494:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006498:	2200      	movs	r2, #0
 800649a:	66bb      	str	r3, [r7, #104]	; 0x68
 800649c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800649e:	f04f 0200 	mov.w	r2, #0
 80064a2:	f04f 0300 	mov.w	r3, #0
 80064a6:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 80064aa:	4649      	mov	r1, r9
 80064ac:	008b      	lsls	r3, r1, #2
 80064ae:	4641      	mov	r1, r8
 80064b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064b4:	4641      	mov	r1, r8
 80064b6:	008a      	lsls	r2, r1, #2
 80064b8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80064bc:	f7f9 ff68 	bl	8000390 <__aeabi_uldivmod>
 80064c0:	4602      	mov	r2, r0
 80064c2:	460b      	mov	r3, r1
 80064c4:	4b0e      	ldr	r3, [pc, #56]	; (8006500 <LL_USART_SetBaudRate+0x454>)
 80064c6:	fba3 1302 	umull	r1, r3, r3, r2
 80064ca:	095b      	lsrs	r3, r3, #5
 80064cc:	2164      	movs	r1, #100	; 0x64
 80064ce:	fb01 f303 	mul.w	r3, r1, r3
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	011b      	lsls	r3, r3, #4
 80064d6:	3332      	adds	r3, #50	; 0x32
 80064d8:	4a09      	ldr	r2, [pc, #36]	; (8006500 <LL_USART_SetBaudRate+0x454>)
 80064da:	fba2 2303 	umull	r2, r3, r2, r3
 80064de:	095b      	lsrs	r3, r3, #5
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	f003 030f 	and.w	r3, r3, #15
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	4423      	add	r3, r4
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	461a      	mov	r2, r3
 80064ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064f2:	609a      	str	r2, [r3, #8]
}
 80064f4:	bf00      	nop
 80064f6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80064fa:	46bd      	mov	sp, r7
 80064fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006500:	51eb851f 	.word	0x51eb851f

08006504 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b088      	sub	sp, #32
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8006512:	2300      	movs	r3, #0
 8006514:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f7ff fd8e 	bl	8006038 <LL_USART_IsEnabled>
 800651c:	4603      	mov	r3, r0
 800651e:	2b00      	cmp	r3, #0
 8006520:	d17a      	bne.n	8006618 <LL_USART_Init+0x114>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800652a:	f023 030c 	bic.w	r3, r3, #12
 800652e:	683a      	ldr	r2, [r7, #0]
 8006530:	6851      	ldr	r1, [r2, #4]
 8006532:	683a      	ldr	r2, [r7, #0]
 8006534:	68d2      	ldr	r2, [r2, #12]
 8006536:	4311      	orrs	r1, r2
 8006538:	683a      	ldr	r2, [r7, #0]
 800653a:	6912      	ldr	r2, [r2, #16]
 800653c:	4311      	orrs	r1, r2
 800653e:	683a      	ldr	r2, [r7, #0]
 8006540:	6992      	ldr	r2, [r2, #24]
 8006542:	430a      	orrs	r2, r1
 8006544:	431a      	orrs	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	4619      	mov	r1, r3
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f7ff fd85 	bl	8006060 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	695b      	ldr	r3, [r3, #20]
 800655a:	4619      	mov	r1, r3
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f7ff fd92 	bl	8006086 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8006562:	f107 0308 	add.w	r3, r7, #8
 8006566:	4618      	mov	r0, r3
 8006568:	f7ff f8bc 	bl	80056e4 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a2d      	ldr	r2, [pc, #180]	; (8006624 <LL_USART_Init+0x120>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d102      	bne.n	800657a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	61bb      	str	r3, [r7, #24]
 8006578:	e03d      	b.n	80065f6 <LL_USART_Init+0xf2>
    }
    else if (USARTx == USART2)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a2a      	ldr	r2, [pc, #168]	; (8006628 <LL_USART_Init+0x124>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d102      	bne.n	8006588 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	61bb      	str	r3, [r7, #24]
 8006586:	e036      	b.n	80065f6 <LL_USART_Init+0xf2>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a28      	ldr	r2, [pc, #160]	; (800662c <LL_USART_Init+0x128>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d102      	bne.n	8006596 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	61bb      	str	r3, [r7, #24]
 8006594:	e02f      	b.n	80065f6 <LL_USART_Init+0xf2>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a25      	ldr	r2, [pc, #148]	; (8006630 <LL_USART_Init+0x12c>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d102      	bne.n	80065a4 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	61bb      	str	r3, [r7, #24]
 80065a2:	e028      	b.n	80065f6 <LL_USART_Init+0xf2>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a23      	ldr	r2, [pc, #140]	; (8006634 <LL_USART_Init+0x130>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d102      	bne.n	80065b2 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	61bb      	str	r3, [r7, #24]
 80065b0:	e021      	b.n	80065f6 <LL_USART_Init+0xf2>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a20      	ldr	r2, [pc, #128]	; (8006638 <LL_USART_Init+0x134>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d102      	bne.n	80065c0 <LL_USART_Init+0xbc>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	61bb      	str	r3, [r7, #24]
 80065be:	e01a      	b.n	80065f6 <LL_USART_Init+0xf2>
    }
#endif /* UART5 */
#if defined(UART7)
    else if (USARTx == UART7)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a1e      	ldr	r2, [pc, #120]	; (800663c <LL_USART_Init+0x138>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d102      	bne.n	80065ce <LL_USART_Init+0xca>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	61bb      	str	r3, [r7, #24]
 80065cc:	e013      	b.n	80065f6 <LL_USART_Init+0xf2>
    }
#endif /* UART7 */
#if defined(UART8)
    else if (USARTx == UART8)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a1b      	ldr	r2, [pc, #108]	; (8006640 <LL_USART_Init+0x13c>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d102      	bne.n	80065dc <LL_USART_Init+0xd8>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	61bb      	str	r3, [r7, #24]
 80065da:	e00c      	b.n	80065f6 <LL_USART_Init+0xf2>
    }
#endif /* UART8 */
#if defined(UART9)
    else if (USARTx == UART9)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a19      	ldr	r2, [pc, #100]	; (8006644 <LL_USART_Init+0x140>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d102      	bne.n	80065ea <LL_USART_Init+0xe6>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	61bb      	str	r3, [r7, #24]
 80065e8:	e005      	b.n	80065f6 <LL_USART_Init+0xf2>
    }
#endif /* UART9 */
#if defined(UART10)
    else if (USARTx == UART10)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a16      	ldr	r2, [pc, #88]	; (8006648 <LL_USART_Init+0x144>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d101      	bne.n	80065f6 <LL_USART_Init+0xf2>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00d      	beq.n	8006618 <LL_USART_Init+0x114>
        && (USART_InitStruct->BaudRate != 0U))
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d009      	beq.n	8006618 <LL_USART_Init+0x114>
    {
      status = SUCCESS;
 8006604:	2300      	movs	r3, #0
 8006606:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	699a      	ldr	r2, [r3, #24]
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	69b9      	ldr	r1, [r7, #24]
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f7ff fd4a 	bl	80060ac <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8006618:	7ffb      	ldrb	r3, [r7, #31]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3720      	adds	r7, #32
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	40011000 	.word	0x40011000
 8006628:	40004400 	.word	0x40004400
 800662c:	40004800 	.word	0x40004800
 8006630:	40011400 	.word	0x40011400
 8006634:	40004c00 	.word	0x40004c00
 8006638:	40005000 	.word	0x40005000
 800663c:	40007800 	.word	0x40007800
 8006640:	40007c00 	.word	0x40007c00
 8006644:	40011800 	.word	0x40011800
 8006648:	40011c00 	.word	0x40011c00

0800664c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8006654:	4a04      	ldr	r2, [pc, #16]	; (8006668 <LL_SetSystemCoreClock+0x1c>)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6013      	str	r3, [r2, #0]
}
 800665a:	bf00      	nop
 800665c:	370c      	adds	r7, #12
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	200001e8 	.word	0x200001e8

0800666c <__NVIC_SetPriority>:
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	4603      	mov	r3, r0
 8006674:	6039      	str	r1, [r7, #0]
 8006676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800667c:	2b00      	cmp	r3, #0
 800667e:	db0a      	blt.n	8006696 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	b2da      	uxtb	r2, r3
 8006684:	490c      	ldr	r1, [pc, #48]	; (80066b8 <__NVIC_SetPriority+0x4c>)
 8006686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800668a:	0112      	lsls	r2, r2, #4
 800668c:	b2d2      	uxtb	r2, r2
 800668e:	440b      	add	r3, r1
 8006690:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006694:	e00a      	b.n	80066ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	b2da      	uxtb	r2, r3
 800669a:	4908      	ldr	r1, [pc, #32]	; (80066bc <__NVIC_SetPriority+0x50>)
 800669c:	79fb      	ldrb	r3, [r7, #7]
 800669e:	f003 030f 	and.w	r3, r3, #15
 80066a2:	3b04      	subs	r3, #4
 80066a4:	0112      	lsls	r2, r2, #4
 80066a6:	b2d2      	uxtb	r2, r2
 80066a8:	440b      	add	r3, r1
 80066aa:	761a      	strb	r2, [r3, #24]
}
 80066ac:	bf00      	nop
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr
 80066b8:	e000e100 	.word	0xe000e100
 80066bc:	e000ed00 	.word	0xe000ed00

080066c0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80066c0:	b580      	push	{r7, lr}
 80066c2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80066c4:	4b05      	ldr	r3, [pc, #20]	; (80066dc <SysTick_Handler+0x1c>)
 80066c6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80066c8:	f003 f86a 	bl	80097a0 <xTaskGetSchedulerState>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d001      	beq.n	80066d6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80066d2:	f004 f869 	bl	800a7a8 <xPortSysTickHandler>
  }
}
 80066d6:	bf00      	nop
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	e000e010 	.word	0xe000e010

080066e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80066e0:	b580      	push	{r7, lr}
 80066e2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80066e4:	2100      	movs	r1, #0
 80066e6:	f06f 0004 	mvn.w	r0, #4
 80066ea:	f7ff ffbf 	bl	800666c <__NVIC_SetPriority>
#endif
}
 80066ee:	bf00      	nop
 80066f0:	bd80      	pop	{r7, pc}
	...

080066f4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066fa:	f3ef 8305 	mrs	r3, IPSR
 80066fe:	603b      	str	r3, [r7, #0]
  return(result);
 8006700:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006702:	2b00      	cmp	r3, #0
 8006704:	d003      	beq.n	800670e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006706:	f06f 0305 	mvn.w	r3, #5
 800670a:	607b      	str	r3, [r7, #4]
 800670c:	e00c      	b.n	8006728 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800670e:	4b0a      	ldr	r3, [pc, #40]	; (8006738 <osKernelInitialize+0x44>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d105      	bne.n	8006722 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006716:	4b08      	ldr	r3, [pc, #32]	; (8006738 <osKernelInitialize+0x44>)
 8006718:	2201      	movs	r2, #1
 800671a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800671c:	2300      	movs	r3, #0
 800671e:	607b      	str	r3, [r7, #4]
 8006720:	e002      	b.n	8006728 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006722:	f04f 33ff 	mov.w	r3, #4294967295
 8006726:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006728:	687b      	ldr	r3, [r7, #4]
}
 800672a:	4618      	mov	r0, r3
 800672c:	370c      	adds	r7, #12
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	20000c60 	.word	0x20000c60

0800673c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006742:	f3ef 8305 	mrs	r3, IPSR
 8006746:	603b      	str	r3, [r7, #0]
  return(result);
 8006748:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800674a:	2b00      	cmp	r3, #0
 800674c:	d003      	beq.n	8006756 <osKernelStart+0x1a>
    stat = osErrorISR;
 800674e:	f06f 0305 	mvn.w	r3, #5
 8006752:	607b      	str	r3, [r7, #4]
 8006754:	e010      	b.n	8006778 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006756:	4b0b      	ldr	r3, [pc, #44]	; (8006784 <osKernelStart+0x48>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2b01      	cmp	r3, #1
 800675c:	d109      	bne.n	8006772 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800675e:	f7ff ffbf 	bl	80066e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006762:	4b08      	ldr	r3, [pc, #32]	; (8006784 <osKernelStart+0x48>)
 8006764:	2202      	movs	r2, #2
 8006766:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006768:	f002 faf2 	bl	8008d50 <vTaskStartScheduler>
      stat = osOK;
 800676c:	2300      	movs	r3, #0
 800676e:	607b      	str	r3, [r7, #4]
 8006770:	e002      	b.n	8006778 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006772:	f04f 33ff 	mov.w	r3, #4294967295
 8006776:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006778:	687b      	ldr	r3, [r7, #4]
}
 800677a:	4618      	mov	r0, r3
 800677c:	3708      	adds	r7, #8
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	20000c60 	.word	0x20000c60

08006788 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006788:	b580      	push	{r7, lr}
 800678a:	b08e      	sub	sp, #56	; 0x38
 800678c:	af04      	add	r7, sp, #16
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006794:	2300      	movs	r3, #0
 8006796:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006798:	f3ef 8305 	mrs	r3, IPSR
 800679c:	617b      	str	r3, [r7, #20]
  return(result);
 800679e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d17e      	bne.n	80068a2 <osThreadNew+0x11a>
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d07b      	beq.n	80068a2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80067aa:	2380      	movs	r3, #128	; 0x80
 80067ac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80067ae:	2318      	movs	r3, #24
 80067b0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80067b2:	2300      	movs	r3, #0
 80067b4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80067b6:	f04f 33ff 	mov.w	r3, #4294967295
 80067ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d045      	beq.n	800684e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d002      	beq.n	80067d0 <osThreadNew+0x48>
        name = attr->name;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	699b      	ldr	r3, [r3, #24]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d002      	beq.n	80067de <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	699b      	ldr	r3, [r3, #24]
 80067dc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d008      	beq.n	80067f6 <osThreadNew+0x6e>
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	2b38      	cmp	r3, #56	; 0x38
 80067e8:	d805      	bhi.n	80067f6 <osThreadNew+0x6e>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d001      	beq.n	80067fa <osThreadNew+0x72>
        return (NULL);
 80067f6:	2300      	movs	r3, #0
 80067f8:	e054      	b.n	80068a4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d003      	beq.n	800680a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	089b      	lsrs	r3, r3, #2
 8006808:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00e      	beq.n	8006830 <osThreadNew+0xa8>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	2bc3      	cmp	r3, #195	; 0xc3
 8006818:	d90a      	bls.n	8006830 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800681e:	2b00      	cmp	r3, #0
 8006820:	d006      	beq.n	8006830 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	695b      	ldr	r3, [r3, #20]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d002      	beq.n	8006830 <osThreadNew+0xa8>
        mem = 1;
 800682a:	2301      	movs	r3, #1
 800682c:	61bb      	str	r3, [r7, #24]
 800682e:	e010      	b.n	8006852 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10c      	bne.n	8006852 <osThreadNew+0xca>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d108      	bne.n	8006852 <osThreadNew+0xca>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d104      	bne.n	8006852 <osThreadNew+0xca>
          mem = 0;
 8006848:	2300      	movs	r3, #0
 800684a:	61bb      	str	r3, [r7, #24]
 800684c:	e001      	b.n	8006852 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800684e:	2300      	movs	r3, #0
 8006850:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d110      	bne.n	800687a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006860:	9202      	str	r2, [sp, #8]
 8006862:	9301      	str	r3, [sp, #4]
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	9300      	str	r3, [sp, #0]
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	6a3a      	ldr	r2, [r7, #32]
 800686c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f002 f87c 	bl	800896c <xTaskCreateStatic>
 8006874:	4603      	mov	r3, r0
 8006876:	613b      	str	r3, [r7, #16]
 8006878:	e013      	b.n	80068a2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d110      	bne.n	80068a2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006880:	6a3b      	ldr	r3, [r7, #32]
 8006882:	b29a      	uxth	r2, r3
 8006884:	f107 0310 	add.w	r3, r7, #16
 8006888:	9301      	str	r3, [sp, #4]
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	9300      	str	r3, [sp, #0]
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006892:	68f8      	ldr	r0, [r7, #12]
 8006894:	f002 f8c7 	bl	8008a26 <xTaskCreate>
 8006898:	4603      	mov	r3, r0
 800689a:	2b01      	cmp	r3, #1
 800689c:	d001      	beq.n	80068a2 <osThreadNew+0x11a>
            hTask = NULL;
 800689e:	2300      	movs	r3, #0
 80068a0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80068a2:	693b      	ldr	r3, [r7, #16]
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3728      	adds	r7, #40	; 0x28
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068b4:	f3ef 8305 	mrs	r3, IPSR
 80068b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80068ba:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d003      	beq.n	80068c8 <osDelay+0x1c>
    stat = osErrorISR;
 80068c0:	f06f 0305 	mvn.w	r3, #5
 80068c4:	60fb      	str	r3, [r7, #12]
 80068c6:	e007      	b.n	80068d8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80068c8:	2300      	movs	r3, #0
 80068ca:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d002      	beq.n	80068d8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f002 fa08 	bl	8008ce8 <vTaskDelay>
    }
  }

  return (stat);
 80068d8:	68fb      	ldr	r3, [r7, #12]
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3710      	adds	r7, #16
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}

080068e2 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b084      	sub	sp, #16
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f003 fd5f 	bl	800a3ae <pvTimerGetTimerID>
 80068f0:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d005      	beq.n	8006904 <TimerCallback+0x22>
    callb->func (callb->arg);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	6852      	ldr	r2, [r2, #4]
 8006900:	4610      	mov	r0, r2
 8006902:	4798      	blx	r3
  }
}
 8006904:	bf00      	nop
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800690c:	b580      	push	{r7, lr}
 800690e:	b08c      	sub	sp, #48	; 0x30
 8006910:	af02      	add	r7, sp, #8
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	607a      	str	r2, [r7, #4]
 8006916:	603b      	str	r3, [r7, #0]
 8006918:	460b      	mov	r3, r1
 800691a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800691c:	2300      	movs	r3, #0
 800691e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006920:	f3ef 8305 	mrs	r3, IPSR
 8006924:	613b      	str	r3, [r7, #16]
  return(result);
 8006926:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8006928:	2b00      	cmp	r3, #0
 800692a:	d163      	bne.n	80069f4 <osTimerNew+0xe8>
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d060      	beq.n	80069f4 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8006932:	2008      	movs	r0, #8
 8006934:	f003 ffc8 	bl	800a8c8 <pvPortMalloc>
 8006938:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d059      	beq.n	80069f4 <osTimerNew+0xe8>
      callb->func = func;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800694c:	7afb      	ldrb	r3, [r7, #11]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d102      	bne.n	8006958 <osTimerNew+0x4c>
        reload = pdFALSE;
 8006952:	2300      	movs	r3, #0
 8006954:	61fb      	str	r3, [r7, #28]
 8006956:	e001      	b.n	800695c <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8006958:	2301      	movs	r3, #1
 800695a:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800695c:	f04f 33ff 	mov.w	r3, #4294967295
 8006960:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8006962:	2300      	movs	r3, #0
 8006964:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d01c      	beq.n	80069a6 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d002      	beq.n	800697a <osTimerNew+0x6e>
          name = attr->name;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d006      	beq.n	8006990 <osTimerNew+0x84>
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	2b2b      	cmp	r3, #43	; 0x2b
 8006988:	d902      	bls.n	8006990 <osTimerNew+0x84>
          mem = 1;
 800698a:	2301      	movs	r3, #1
 800698c:	61bb      	str	r3, [r7, #24]
 800698e:	e00c      	b.n	80069aa <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d108      	bne.n	80069aa <osTimerNew+0x9e>
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d104      	bne.n	80069aa <osTimerNew+0x9e>
            mem = 0;
 80069a0:	2300      	movs	r3, #0
 80069a2:	61bb      	str	r3, [r7, #24]
 80069a4:	e001      	b.n	80069aa <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 80069a6:	2300      	movs	r3, #0
 80069a8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d10c      	bne.n	80069ca <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	9301      	str	r3, [sp, #4]
 80069b6:	4b12      	ldr	r3, [pc, #72]	; (8006a00 <osTimerNew+0xf4>)
 80069b8:	9300      	str	r3, [sp, #0]
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	69fa      	ldr	r2, [r7, #28]
 80069be:	2101      	movs	r1, #1
 80069c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069c2:	f003 f94c 	bl	8009c5e <xTimerCreateStatic>
 80069c6:	6238      	str	r0, [r7, #32]
 80069c8:	e00b      	b.n	80069e2 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d108      	bne.n	80069e2 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80069d0:	4b0b      	ldr	r3, [pc, #44]	; (8006a00 <osTimerNew+0xf4>)
 80069d2:	9300      	str	r3, [sp, #0]
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	69fa      	ldr	r2, [r7, #28]
 80069d8:	2101      	movs	r1, #1
 80069da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069dc:	f003 f91e 	bl	8009c1c <xTimerCreate>
 80069e0:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 80069e2:	6a3b      	ldr	r3, [r7, #32]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d105      	bne.n	80069f4 <osTimerNew+0xe8>
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d002      	beq.n	80069f4 <osTimerNew+0xe8>
        vPortFree (callb);
 80069ee:	6978      	ldr	r0, [r7, #20]
 80069f0:	f004 f836 	bl	800aa60 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80069f4:	6a3b      	ldr	r3, [r7, #32]
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3728      	adds	r7, #40	; 0x28
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	080068e3 	.word	0x080068e3

08006a04 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b088      	sub	sp, #32
 8006a08:	af02      	add	r7, sp, #8
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a12:	f3ef 8305 	mrs	r3, IPSR
 8006a16:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a18:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d003      	beq.n	8006a26 <osTimerStart+0x22>
    stat = osErrorISR;
 8006a1e:	f06f 0305 	mvn.w	r3, #5
 8006a22:	617b      	str	r3, [r7, #20]
 8006a24:	e017      	b.n	8006a56 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d103      	bne.n	8006a34 <osTimerStart+0x30>
    stat = osErrorParameter;
 8006a2c:	f06f 0303 	mvn.w	r3, #3
 8006a30:	617b      	str	r3, [r7, #20]
 8006a32:	e010      	b.n	8006a56 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8006a34:	2300      	movs	r3, #0
 8006a36:	9300      	str	r3, [sp, #0]
 8006a38:	2300      	movs	r3, #0
 8006a3a:	683a      	ldr	r2, [r7, #0]
 8006a3c:	2104      	movs	r1, #4
 8006a3e:	6938      	ldr	r0, [r7, #16]
 8006a40:	f003 f986 	bl	8009d50 <xTimerGenericCommand>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d102      	bne.n	8006a50 <osTimerStart+0x4c>
      stat = osOK;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	617b      	str	r3, [r7, #20]
 8006a4e:	e002      	b.n	8006a56 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8006a50:	f06f 0302 	mvn.w	r3, #2
 8006a54:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006a56:	697b      	ldr	r3, [r7, #20]
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3718      	adds	r7, #24
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b088      	sub	sp, #32
 8006a64:	af02      	add	r7, sp, #8
 8006a66:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a6c:	f3ef 8305 	mrs	r3, IPSR
 8006a70:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a72:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d003      	beq.n	8006a80 <osTimerStop+0x20>
    stat = osErrorISR;
 8006a78:	f06f 0305 	mvn.w	r3, #5
 8006a7c:	617b      	str	r3, [r7, #20]
 8006a7e:	e021      	b.n	8006ac4 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d103      	bne.n	8006a8e <osTimerStop+0x2e>
    stat = osErrorParameter;
 8006a86:	f06f 0303 	mvn.w	r3, #3
 8006a8a:	617b      	str	r3, [r7, #20]
 8006a8c:	e01a      	b.n	8006ac4 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 8006a8e:	6938      	ldr	r0, [r7, #16]
 8006a90:	f003 fc64 	bl	800a35c <xTimerIsTimerActive>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d103      	bne.n	8006aa2 <osTimerStop+0x42>
      stat = osErrorResource;
 8006a9a:	f06f 0302 	mvn.w	r3, #2
 8006a9e:	617b      	str	r3, [r7, #20]
 8006aa0:	e010      	b.n	8006ac4 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	9300      	str	r3, [sp, #0]
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	2103      	movs	r1, #3
 8006aac:	6938      	ldr	r0, [r7, #16]
 8006aae:	f003 f94f 	bl	8009d50 <xTimerGenericCommand>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d102      	bne.n	8006abe <osTimerStop+0x5e>
        stat = osOK;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	617b      	str	r3, [r7, #20]
 8006abc:	e002      	b.n	8006ac4 <osTimerStop+0x64>
      } else {
        stat = osError;
 8006abe:	f04f 33ff 	mov.w	r3, #4294967295
 8006ac2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006ac4:	697b      	ldr	r3, [r7, #20]
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3718      	adds	r7, #24
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}

08006ace <osTimerDelete>:
  }

  return (running);
}

osStatus_t osTimerDelete (osTimerId_t timer_id) {
 8006ace:	b580      	push	{r7, lr}
 8006ad0:	b088      	sub	sp, #32
 8006ad2:	af02      	add	r7, sp, #8
 8006ad4:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ada:	f3ef 8305 	mrs	r3, IPSR
 8006ade:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ae0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  TimerCallback_t *callb;

  if (IS_IRQ()) {
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d003      	beq.n	8006aee <osTimerDelete+0x20>
    stat = osErrorISR;
 8006ae6:	f06f 0305 	mvn.w	r3, #5
 8006aea:	617b      	str	r3, [r7, #20]
 8006aec:	e01e      	b.n	8006b2c <osTimerDelete+0x5e>
  }
  else if (hTimer == NULL) {
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d103      	bne.n	8006afc <osTimerDelete+0x2e>
    stat = osErrorParameter;
 8006af4:	f06f 0303 	mvn.w	r3, #3
 8006af8:	617b      	str	r3, [r7, #20]
 8006afa:	e017      	b.n	8006b2c <osTimerDelete+0x5e>
  }
  else {
    callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8006afc:	6938      	ldr	r0, [r7, #16]
 8006afe:	f003 fc56 	bl	800a3ae <pvTimerGetTimerID>
 8006b02:	60f8      	str	r0, [r7, #12]

    if (xTimerDelete (hTimer, 0) == pdPASS) {
 8006b04:	2300      	movs	r3, #0
 8006b06:	9300      	str	r3, [sp, #0]
 8006b08:	2300      	movs	r3, #0
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	2105      	movs	r1, #5
 8006b0e:	6938      	ldr	r0, [r7, #16]
 8006b10:	f003 f91e 	bl	8009d50 <xTimerGenericCommand>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d105      	bne.n	8006b26 <osTimerDelete+0x58>
      vPortFree (callb);
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f003 ffa0 	bl	800aa60 <vPortFree>
      stat = osOK;
 8006b20:	2300      	movs	r3, #0
 8006b22:	617b      	str	r3, [r7, #20]
 8006b24:	e002      	b.n	8006b2c <osTimerDelete+0x5e>
    } else {
      stat = osErrorResource;
 8006b26:	f06f 0302 	mvn.w	r3, #2
 8006b2a:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8006b2c:	697b      	ldr	r3, [r7, #20]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3718      	adds	r7, #24
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <osEventFlagsNew>:
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8006b36:	b580      	push	{r7, lr}
 8006b38:	b086      	sub	sp, #24
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b42:	f3ef 8305 	mrs	r3, IPSR
 8006b46:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b48:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d12d      	bne.n	8006baa <osEventFlagsNew+0x74>
    mem = -1;
 8006b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b52:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d015      	beq.n	8006b86 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d006      	beq.n	8006b70 <osEventFlagsNew+0x3a>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	2b1f      	cmp	r3, #31
 8006b68:	d902      	bls.n	8006b70 <osEventFlagsNew+0x3a>
        mem = 1;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	613b      	str	r3, [r7, #16]
 8006b6e:	e00c      	b.n	8006b8a <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d108      	bne.n	8006b8a <osEventFlagsNew+0x54>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d104      	bne.n	8006b8a <osEventFlagsNew+0x54>
          mem = 0;
 8006b80:	2300      	movs	r3, #0
 8006b82:	613b      	str	r3, [r7, #16]
 8006b84:	e001      	b.n	8006b8a <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8006b86:	2300      	movs	r3, #0
 8006b88:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d106      	bne.n	8006b9e <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	4618      	mov	r0, r3
 8006b96:	f000 fbc7 	bl	8007328 <xEventGroupCreateStatic>
 8006b9a:	6178      	str	r0, [r7, #20]
 8006b9c:	e005      	b.n	8006baa <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d102      	bne.n	8006baa <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8006ba4:	f000 fbf7 	bl	8007396 <xEventGroupCreate>
 8006ba8:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8006baa:	697b      	ldr	r3, [r7, #20]
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3718      	adds	r7, #24
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b086      	sub	sp, #24
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d004      	beq.n	8006bd2 <osEventFlagsSet+0x1e>
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d003      	beq.n	8006bda <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8006bd2:	f06f 0303 	mvn.w	r3, #3
 8006bd6:	617b      	str	r3, [r7, #20]
 8006bd8:	e028      	b.n	8006c2c <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bda:	f3ef 8305 	mrs	r3, IPSR
 8006bde:	60fb      	str	r3, [r7, #12]
  return(result);
 8006be0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d01d      	beq.n	8006c22 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8006be6:	2300      	movs	r3, #0
 8006be8:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8006bea:	f107 0308 	add.w	r3, r7, #8
 8006bee:	461a      	mov	r2, r3
 8006bf0:	6839      	ldr	r1, [r7, #0]
 8006bf2:	6938      	ldr	r0, [r7, #16]
 8006bf4:	f000 fe24 	bl	8007840 <xEventGroupSetBitsFromISR>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d103      	bne.n	8006c06 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8006bfe:	f06f 0302 	mvn.w	r3, #2
 8006c02:	617b      	str	r3, [r7, #20]
 8006c04:	e012      	b.n	8006c2c <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00d      	beq.n	8006c2c <osEventFlagsSet+0x78>
 8006c10:	4b09      	ldr	r3, [pc, #36]	; (8006c38 <osEventFlagsSet+0x84>)
 8006c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c16:	601a      	str	r2, [r3, #0]
 8006c18:	f3bf 8f4f 	dsb	sy
 8006c1c:	f3bf 8f6f 	isb	sy
 8006c20:	e004      	b.n	8006c2c <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8006c22:	6839      	ldr	r1, [r7, #0]
 8006c24:	6938      	ldr	r0, [r7, #16]
 8006c26:	f000 fd0f 	bl	8007648 <xEventGroupSetBits>
 8006c2a:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8006c2c:	697b      	ldr	r3, [r7, #20]
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3718      	adds	r7, #24
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	e000ed04 	.word	0xe000ed04

08006c3c <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b086      	sub	sp, #24
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d004      	beq.n	8006c5a <osEventFlagsClear+0x1e>
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d003      	beq.n	8006c62 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8006c5a:	f06f 0303 	mvn.w	r3, #3
 8006c5e:	617b      	str	r3, [r7, #20]
 8006c60:	e019      	b.n	8006c96 <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c62:	f3ef 8305 	mrs	r3, IPSR
 8006c66:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c68:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00e      	beq.n	8006c8c <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8006c6e:	6938      	ldr	r0, [r7, #16]
 8006c70:	f000 fcc6 	bl	8007600 <xEventGroupGetBitsFromISR>
 8006c74:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8006c76:	6839      	ldr	r1, [r7, #0]
 8006c78:	6938      	ldr	r0, [r7, #16]
 8006c7a:	f000 fcad 	bl	80075d8 <xEventGroupClearBitsFromISR>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d108      	bne.n	8006c96 <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 8006c84:	f06f 0302 	mvn.w	r3, #2
 8006c88:	617b      	str	r3, [r7, #20]
 8006c8a:	e004      	b.n	8006c96 <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8006c8c:	6839      	ldr	r1, [r7, #0]
 8006c8e:	6938      	ldr	r0, [r7, #16]
 8006c90:	f000 fc6a 	bl	8007568 <xEventGroupClearBits>
 8006c94:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8006c96:	697b      	ldr	r3, [r7, #20]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3718      	adds	r7, #24
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b08c      	sub	sp, #48	; 0x30
 8006ca4:	af02      	add	r7, sp, #8
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]
 8006cac:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d004      	beq.n	8006cc2 <osEventFlagsWait+0x22>
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d003      	beq.n	8006cca <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8006cc2:	f06f 0303 	mvn.w	r3, #3
 8006cc6:	61fb      	str	r3, [r7, #28]
 8006cc8:	e04b      	b.n	8006d62 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cca:	f3ef 8305 	mrs	r3, IPSR
 8006cce:	617b      	str	r3, [r7, #20]
  return(result);
 8006cd0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d003      	beq.n	8006cde <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8006cd6:	f06f 0305 	mvn.w	r3, #5
 8006cda:	61fb      	str	r3, [r7, #28]
 8006cdc:	e041      	b.n	8006d62 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f003 0301 	and.w	r3, r3, #1
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d002      	beq.n	8006cee <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	627b      	str	r3, [r7, #36]	; 0x24
 8006cec:	e001      	b.n	8006cf2 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f003 0302 	and.w	r3, r3, #2
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d002      	beq.n	8006d02 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	623b      	str	r3, [r7, #32]
 8006d00:	e001      	b.n	8006d06 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8006d02:	2301      	movs	r3, #1
 8006d04:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	9300      	str	r3, [sp, #0]
 8006d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0c:	6a3a      	ldr	r2, [r7, #32]
 8006d0e:	68b9      	ldr	r1, [r7, #8]
 8006d10:	69b8      	ldr	r0, [r7, #24]
 8006d12:	f000 fb5b 	bl	80073cc <xEventGroupWaitBits>
 8006d16:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f003 0301 	and.w	r3, r3, #1
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d010      	beq.n	8006d44 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8006d22:	68ba      	ldr	r2, [r7, #8]
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	4013      	ands	r3, r2
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d019      	beq.n	8006d62 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d003      	beq.n	8006d3c <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8006d34:	f06f 0301 	mvn.w	r3, #1
 8006d38:	61fb      	str	r3, [r7, #28]
 8006d3a:	e012      	b.n	8006d62 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8006d3c:	f06f 0302 	mvn.w	r3, #2
 8006d40:	61fb      	str	r3, [r7, #28]
 8006d42:	e00e      	b.n	8006d62 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8006d44:	68ba      	ldr	r2, [r7, #8]
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	4013      	ands	r3, r2
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d109      	bne.n	8006d62 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d003      	beq.n	8006d5c <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8006d54:	f06f 0301 	mvn.w	r3, #1
 8006d58:	61fb      	str	r3, [r7, #28]
 8006d5a:	e002      	b.n	8006d62 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8006d5c:	f06f 0302 	mvn.w	r3, #2
 8006d60:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8006d62:	69fb      	ldr	r3, [r7, #28]
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3728      	adds	r7, #40	; 0x28
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <osEventFlagsDelete>:

osStatus_t osEventFlagsDelete (osEventFlagsId_t ef_id) {
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b086      	sub	sp, #24
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d78:	f3ef 8305 	mrs	r3, IPSR
 8006d7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d003      	beq.n	8006d8c <osEventFlagsDelete+0x20>
    stat = osErrorISR;
 8006d84:	f06f 0305 	mvn.w	r3, #5
 8006d88:	617b      	str	r3, [r7, #20]
 8006d8a:	e00b      	b.n	8006da4 <osEventFlagsDelete+0x38>
  }
  else if (hEventGroup == NULL) {
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d103      	bne.n	8006d9a <osEventFlagsDelete+0x2e>
    stat = osErrorParameter;
 8006d92:	f06f 0303 	mvn.w	r3, #3
 8006d96:	617b      	str	r3, [r7, #20]
 8006d98:	e004      	b.n	8006da4 <osEventFlagsDelete+0x38>
  }
  else {
    stat = osOK;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	617b      	str	r3, [r7, #20]
    vEventGroupDelete (hEventGroup);
 8006d9e:	6938      	ldr	r0, [r7, #16]
 8006da0:	f000 fcdd 	bl	800775e <vEventGroupDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8006da4:	697b      	ldr	r3, [r7, #20]
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3718      	adds	r7, #24
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <osMutexNew>:

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b088      	sub	sp, #32
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006db6:	2300      	movs	r3, #0
 8006db8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dba:	f3ef 8305 	mrs	r3, IPSR
 8006dbe:	60bb      	str	r3, [r7, #8]
  return(result);
 8006dc0:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d174      	bne.n	8006eb0 <osMutexNew+0x102>
    if (attr != NULL) {
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d003      	beq.n	8006dd4 <osMutexNew+0x26>
      type = attr->attr_bits;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	61bb      	str	r3, [r7, #24]
 8006dd2:	e001      	b.n	8006dd8 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	f003 0301 	and.w	r3, r3, #1
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d002      	beq.n	8006de8 <osMutexNew+0x3a>
      rmtx = 1U;
 8006de2:	2301      	movs	r3, #1
 8006de4:	617b      	str	r3, [r7, #20]
 8006de6:	e001      	b.n	8006dec <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8006de8:	2300      	movs	r3, #0
 8006dea:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	f003 0308 	and.w	r3, r3, #8
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d15c      	bne.n	8006eb0 <osMutexNew+0x102>
      mem = -1;
 8006df6:	f04f 33ff 	mov.w	r3, #4294967295
 8006dfa:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d015      	beq.n	8006e2e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d006      	beq.n	8006e18 <osMutexNew+0x6a>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	2b4f      	cmp	r3, #79	; 0x4f
 8006e10:	d902      	bls.n	8006e18 <osMutexNew+0x6a>
          mem = 1;
 8006e12:	2301      	movs	r3, #1
 8006e14:	613b      	str	r3, [r7, #16]
 8006e16:	e00c      	b.n	8006e32 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d108      	bne.n	8006e32 <osMutexNew+0x84>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d104      	bne.n	8006e32 <osMutexNew+0x84>
            mem = 0;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	613b      	str	r3, [r7, #16]
 8006e2c:	e001      	b.n	8006e32 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d112      	bne.n	8006e5e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d007      	beq.n	8006e4e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	4619      	mov	r1, r3
 8006e44:	2004      	movs	r0, #4
 8006e46:	f000 ff32 	bl	8007cae <xQueueCreateMutexStatic>
 8006e4a:	61f8      	str	r0, [r7, #28]
 8006e4c:	e016      	b.n	8006e7c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	4619      	mov	r1, r3
 8006e54:	2001      	movs	r0, #1
 8006e56:	f000 ff2a 	bl	8007cae <xQueueCreateMutexStatic>
 8006e5a:	61f8      	str	r0, [r7, #28]
 8006e5c:	e00e      	b.n	8006e7c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d10b      	bne.n	8006e7c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d004      	beq.n	8006e74 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006e6a:	2004      	movs	r0, #4
 8006e6c:	f000 ff07 	bl	8007c7e <xQueueCreateMutex>
 8006e70:	61f8      	str	r0, [r7, #28]
 8006e72:	e003      	b.n	8006e7c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8006e74:	2001      	movs	r0, #1
 8006e76:	f000 ff02 	bl	8007c7e <xQueueCreateMutex>
 8006e7a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d00c      	beq.n	8006e9c <osMutexNew+0xee>
        if (attr != NULL) {
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d003      	beq.n	8006e90 <osMutexNew+0xe2>
          name = attr->name;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	60fb      	str	r3, [r7, #12]
 8006e8e:	e001      	b.n	8006e94 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8006e90:	2300      	movs	r3, #0
 8006e92:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8006e94:	68f9      	ldr	r1, [r7, #12]
 8006e96:	69f8      	ldr	r0, [r7, #28]
 8006e98:	f001 fce0 	bl	800885c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d006      	beq.n	8006eb0 <osMutexNew+0x102>
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d003      	beq.n	8006eb0 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	f043 0301 	orr.w	r3, r3, #1
 8006eae:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006eb0:	69fb      	ldr	r3, [r7, #28]
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3720      	adds	r7, #32
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b086      	sub	sp, #24
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
 8006ec2:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f023 0301 	bic.w	r3, r3, #1
 8006eca:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f003 0301 	and.w	r3, r3, #1
 8006ed2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ed8:	f3ef 8305 	mrs	r3, IPSR
 8006edc:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ede:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d003      	beq.n	8006eec <osMutexAcquire+0x32>
    stat = osErrorISR;
 8006ee4:	f06f 0305 	mvn.w	r3, #5
 8006ee8:	617b      	str	r3, [r7, #20]
 8006eea:	e02c      	b.n	8006f46 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d103      	bne.n	8006efa <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8006ef2:	f06f 0303 	mvn.w	r3, #3
 8006ef6:	617b      	str	r3, [r7, #20]
 8006ef8:	e025      	b.n	8006f46 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d011      	beq.n	8006f24 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006f00:	6839      	ldr	r1, [r7, #0]
 8006f02:	6938      	ldr	r0, [r7, #16]
 8006f04:	f000 ff22 	bl	8007d4c <xQueueTakeMutexRecursive>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d01b      	beq.n	8006f46 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d003      	beq.n	8006f1c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8006f14:	f06f 0301 	mvn.w	r3, #1
 8006f18:	617b      	str	r3, [r7, #20]
 8006f1a:	e014      	b.n	8006f46 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006f1c:	f06f 0302 	mvn.w	r3, #2
 8006f20:	617b      	str	r3, [r7, #20]
 8006f22:	e010      	b.n	8006f46 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006f24:	6839      	ldr	r1, [r7, #0]
 8006f26:	6938      	ldr	r0, [r7, #16]
 8006f28:	f001 f9c0 	bl	80082ac <xQueueSemaphoreTake>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d009      	beq.n	8006f46 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d003      	beq.n	8006f40 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8006f38:	f06f 0301 	mvn.w	r3, #1
 8006f3c:	617b      	str	r3, [r7, #20]
 8006f3e:	e002      	b.n	8006f46 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006f40:	f06f 0302 	mvn.w	r3, #2
 8006f44:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8006f46:	697b      	ldr	r3, [r7, #20]
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3718      	adds	r7, #24
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b086      	sub	sp, #24
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f023 0301 	bic.w	r3, r3, #1
 8006f5e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f003 0301 	and.w	r3, r3, #1
 8006f66:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f6c:	f3ef 8305 	mrs	r3, IPSR
 8006f70:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f72:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d003      	beq.n	8006f80 <osMutexRelease+0x30>
    stat = osErrorISR;
 8006f78:	f06f 0305 	mvn.w	r3, #5
 8006f7c:	617b      	str	r3, [r7, #20]
 8006f7e:	e01f      	b.n	8006fc0 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d103      	bne.n	8006f8e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8006f86:	f06f 0303 	mvn.w	r3, #3
 8006f8a:	617b      	str	r3, [r7, #20]
 8006f8c:	e018      	b.n	8006fc0 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d009      	beq.n	8006fa8 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006f94:	6938      	ldr	r0, [r7, #16]
 8006f96:	f000 fea5 	bl	8007ce4 <xQueueGiveMutexRecursive>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d00f      	beq.n	8006fc0 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006fa0:	f06f 0302 	mvn.w	r3, #2
 8006fa4:	617b      	str	r3, [r7, #20]
 8006fa6:	e00b      	b.n	8006fc0 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006fa8:	2300      	movs	r3, #0
 8006faa:	2200      	movs	r2, #0
 8006fac:	2100      	movs	r1, #0
 8006fae:	6938      	ldr	r0, [r7, #16]
 8006fb0:	f000 ff02 	bl	8007db8 <xQueueGenericSend>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d002      	beq.n	8006fc0 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006fba:	f06f 0302 	mvn.w	r3, #2
 8006fbe:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006fc0:	697b      	ldr	r3, [r7, #20]
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3718      	adds	r7, #24
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <osMutexDelete>:
  }

  return (owner);
}

osStatus_t osMutexDelete (osMutexId_t mutex_id) {
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b086      	sub	sp, #24
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  SemaphoreHandle_t hMutex;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f023 0301 	bic.w	r3, r3, #1
 8006fd8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fda:	f3ef 8305 	mrs	r3, IPSR
 8006fde:	60fb      	str	r3, [r7, #12]
  return(result);
 8006fe0:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ()) {
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d003      	beq.n	8006fee <osMutexDelete+0x24>
    stat = osErrorISR;
 8006fe6:	f06f 0305 	mvn.w	r3, #5
 8006fea:	617b      	str	r3, [r7, #20]
 8006fec:	e00e      	b.n	800700c <osMutexDelete+0x42>
  }
  else if (hMutex == NULL) {
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d103      	bne.n	8006ffc <osMutexDelete+0x32>
    stat = osErrorParameter;
 8006ff4:	f06f 0303 	mvn.w	r3, #3
 8006ff8:	617b      	str	r3, [r7, #20]
 8006ffa:	e007      	b.n	800700c <osMutexDelete+0x42>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hMutex);
 8006ffc:	6938      	ldr	r0, [r7, #16]
 8006ffe:	f001 fc57 	bl	80088b0 <vQueueUnregisterQueue>
    #endif
    stat = osOK;
 8007002:	2300      	movs	r3, #0
 8007004:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hMutex);
 8007006:	6938      	ldr	r0, [r7, #16]
 8007008:	f001 fadc 	bl	80085c4 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800700c:	697b      	ldr	r3, [r7, #20]
}
 800700e:	4618      	mov	r0, r3
 8007010:	3718      	adds	r7, #24
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007016:	b580      	push	{r7, lr}
 8007018:	b08a      	sub	sp, #40	; 0x28
 800701a:	af02      	add	r7, sp, #8
 800701c:	60f8      	str	r0, [r7, #12]
 800701e:	60b9      	str	r1, [r7, #8]
 8007020:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007022:	2300      	movs	r3, #0
 8007024:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007026:	f3ef 8305 	mrs	r3, IPSR
 800702a:	613b      	str	r3, [r7, #16]
  return(result);
 800702c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800702e:	2b00      	cmp	r3, #0
 8007030:	d15f      	bne.n	80070f2 <osMessageQueueNew+0xdc>
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d05c      	beq.n	80070f2 <osMessageQueueNew+0xdc>
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d059      	beq.n	80070f2 <osMessageQueueNew+0xdc>
    mem = -1;
 800703e:	f04f 33ff 	mov.w	r3, #4294967295
 8007042:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d029      	beq.n	800709e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d012      	beq.n	8007078 <osMessageQueueNew+0x62>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	2b4f      	cmp	r3, #79	; 0x4f
 8007058:	d90e      	bls.n	8007078 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00a      	beq.n	8007078 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	695a      	ldr	r2, [r3, #20]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	68b9      	ldr	r1, [r7, #8]
 800706a:	fb01 f303 	mul.w	r3, r1, r3
 800706e:	429a      	cmp	r2, r3
 8007070:	d302      	bcc.n	8007078 <osMessageQueueNew+0x62>
        mem = 1;
 8007072:	2301      	movs	r3, #1
 8007074:	61bb      	str	r3, [r7, #24]
 8007076:	e014      	b.n	80070a2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d110      	bne.n	80070a2 <osMessageQueueNew+0x8c>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d10c      	bne.n	80070a2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800708c:	2b00      	cmp	r3, #0
 800708e:	d108      	bne.n	80070a2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	695b      	ldr	r3, [r3, #20]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d104      	bne.n	80070a2 <osMessageQueueNew+0x8c>
          mem = 0;
 8007098:	2300      	movs	r3, #0
 800709a:	61bb      	str	r3, [r7, #24]
 800709c:	e001      	b.n	80070a2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800709e:	2300      	movs	r3, #0
 80070a0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d10b      	bne.n	80070c0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	691a      	ldr	r2, [r3, #16]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	2100      	movs	r1, #0
 80070b2:	9100      	str	r1, [sp, #0]
 80070b4:	68b9      	ldr	r1, [r7, #8]
 80070b6:	68f8      	ldr	r0, [r7, #12]
 80070b8:	f000 fcf2 	bl	8007aa0 <xQueueGenericCreateStatic>
 80070bc:	61f8      	str	r0, [r7, #28]
 80070be:	e008      	b.n	80070d2 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d105      	bne.n	80070d2 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80070c6:	2200      	movs	r2, #0
 80070c8:	68b9      	ldr	r1, [r7, #8]
 80070ca:	68f8      	ldr	r0, [r7, #12]
 80070cc:	f000 fd60 	bl	8007b90 <xQueueGenericCreate>
 80070d0:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d00c      	beq.n	80070f2 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d003      	beq.n	80070e6 <osMessageQueueNew+0xd0>
        name = attr->name;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	617b      	str	r3, [r7, #20]
 80070e4:	e001      	b.n	80070ea <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80070e6:	2300      	movs	r3, #0
 80070e8:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80070ea:	6979      	ldr	r1, [r7, #20]
 80070ec:	69f8      	ldr	r0, [r7, #28]
 80070ee:	f001 fbb5 	bl	800885c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80070f2:	69fb      	ldr	r3, [r7, #28]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3720      	adds	r7, #32
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b088      	sub	sp, #32
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	603b      	str	r3, [r7, #0]
 8007108:	4613      	mov	r3, r2
 800710a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007110:	2300      	movs	r3, #0
 8007112:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007114:	f3ef 8305 	mrs	r3, IPSR
 8007118:	617b      	str	r3, [r7, #20]
  return(result);
 800711a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800711c:	2b00      	cmp	r3, #0
 800711e:	d028      	beq.n	8007172 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d005      	beq.n	8007132 <osMessageQueuePut+0x36>
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d002      	beq.n	8007132 <osMessageQueuePut+0x36>
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d003      	beq.n	800713a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8007132:	f06f 0303 	mvn.w	r3, #3
 8007136:	61fb      	str	r3, [r7, #28]
 8007138:	e038      	b.n	80071ac <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800713a:	2300      	movs	r3, #0
 800713c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800713e:	f107 0210 	add.w	r2, r7, #16
 8007142:	2300      	movs	r3, #0
 8007144:	68b9      	ldr	r1, [r7, #8]
 8007146:	69b8      	ldr	r0, [r7, #24]
 8007148:	f000 ff34 	bl	8007fb4 <xQueueGenericSendFromISR>
 800714c:	4603      	mov	r3, r0
 800714e:	2b01      	cmp	r3, #1
 8007150:	d003      	beq.n	800715a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8007152:	f06f 0302 	mvn.w	r3, #2
 8007156:	61fb      	str	r3, [r7, #28]
 8007158:	e028      	b.n	80071ac <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d025      	beq.n	80071ac <osMessageQueuePut+0xb0>
 8007160:	4b15      	ldr	r3, [pc, #84]	; (80071b8 <osMessageQueuePut+0xbc>)
 8007162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007166:	601a      	str	r2, [r3, #0]
 8007168:	f3bf 8f4f 	dsb	sy
 800716c:	f3bf 8f6f 	isb	sy
 8007170:	e01c      	b.n	80071ac <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d002      	beq.n	800717e <osMessageQueuePut+0x82>
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d103      	bne.n	8007186 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800717e:	f06f 0303 	mvn.w	r3, #3
 8007182:	61fb      	str	r3, [r7, #28]
 8007184:	e012      	b.n	80071ac <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007186:	2300      	movs	r3, #0
 8007188:	683a      	ldr	r2, [r7, #0]
 800718a:	68b9      	ldr	r1, [r7, #8]
 800718c:	69b8      	ldr	r0, [r7, #24]
 800718e:	f000 fe13 	bl	8007db8 <xQueueGenericSend>
 8007192:	4603      	mov	r3, r0
 8007194:	2b01      	cmp	r3, #1
 8007196:	d009      	beq.n	80071ac <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d003      	beq.n	80071a6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800719e:	f06f 0301 	mvn.w	r3, #1
 80071a2:	61fb      	str	r3, [r7, #28]
 80071a4:	e002      	b.n	80071ac <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80071a6:	f06f 0302 	mvn.w	r3, #2
 80071aa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80071ac:	69fb      	ldr	r3, [r7, #28]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3720      	adds	r7, #32
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	e000ed04 	.word	0xe000ed04

080071bc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80071bc:	b580      	push	{r7, lr}
 80071be:	b088      	sub	sp, #32
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	607a      	str	r2, [r7, #4]
 80071c8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80071ce:	2300      	movs	r3, #0
 80071d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071d2:	f3ef 8305 	mrs	r3, IPSR
 80071d6:	617b      	str	r3, [r7, #20]
  return(result);
 80071d8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d028      	beq.n	8007230 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d005      	beq.n	80071f0 <osMessageQueueGet+0x34>
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d002      	beq.n	80071f0 <osMessageQueueGet+0x34>
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d003      	beq.n	80071f8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80071f0:	f06f 0303 	mvn.w	r3, #3
 80071f4:	61fb      	str	r3, [r7, #28]
 80071f6:	e037      	b.n	8007268 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80071f8:	2300      	movs	r3, #0
 80071fa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80071fc:	f107 0310 	add.w	r3, r7, #16
 8007200:	461a      	mov	r2, r3
 8007202:	68b9      	ldr	r1, [r7, #8]
 8007204:	69b8      	ldr	r0, [r7, #24]
 8007206:	f001 f95d 	bl	80084c4 <xQueueReceiveFromISR>
 800720a:	4603      	mov	r3, r0
 800720c:	2b01      	cmp	r3, #1
 800720e:	d003      	beq.n	8007218 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8007210:	f06f 0302 	mvn.w	r3, #2
 8007214:	61fb      	str	r3, [r7, #28]
 8007216:	e027      	b.n	8007268 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d024      	beq.n	8007268 <osMessageQueueGet+0xac>
 800721e:	4b15      	ldr	r3, [pc, #84]	; (8007274 <osMessageQueueGet+0xb8>)
 8007220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007224:	601a      	str	r2, [r3, #0]
 8007226:	f3bf 8f4f 	dsb	sy
 800722a:	f3bf 8f6f 	isb	sy
 800722e:	e01b      	b.n	8007268 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d002      	beq.n	800723c <osMessageQueueGet+0x80>
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d103      	bne.n	8007244 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800723c:	f06f 0303 	mvn.w	r3, #3
 8007240:	61fb      	str	r3, [r7, #28]
 8007242:	e011      	b.n	8007268 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007244:	683a      	ldr	r2, [r7, #0]
 8007246:	68b9      	ldr	r1, [r7, #8]
 8007248:	69b8      	ldr	r0, [r7, #24]
 800724a:	f000 ff4f 	bl	80080ec <xQueueReceive>
 800724e:	4603      	mov	r3, r0
 8007250:	2b01      	cmp	r3, #1
 8007252:	d009      	beq.n	8007268 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d003      	beq.n	8007262 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800725a:	f06f 0301 	mvn.w	r3, #1
 800725e:	61fb      	str	r3, [r7, #28]
 8007260:	e002      	b.n	8007268 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8007262:	f06f 0302 	mvn.w	r3, #2
 8007266:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007268:	69fb      	ldr	r3, [r7, #28]
}
 800726a:	4618      	mov	r0, r3
 800726c:	3720      	adds	r7, #32
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	e000ed04 	.word	0xe000ed04

08007278 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8007278:	b580      	push	{r7, lr}
 800727a:	b086      	sub	sp, #24
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007284:	f3ef 8305 	mrs	r3, IPSR
 8007288:	60fb      	str	r3, [r7, #12]
  return(result);
 800728a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800728c:	2b00      	cmp	r3, #0
 800728e:	d003      	beq.n	8007298 <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 8007290:	f06f 0305 	mvn.w	r3, #5
 8007294:	617b      	str	r3, [r7, #20]
 8007296:	e00e      	b.n	80072b6 <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d103      	bne.n	80072a6 <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 800729e:	f06f 0303 	mvn.w	r3, #3
 80072a2:	617b      	str	r3, [r7, #20]
 80072a4:	e007      	b.n	80072b6 <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 80072a6:	6938      	ldr	r0, [r7, #16]
 80072a8:	f001 fb02 	bl	80088b0 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80072ac:	2300      	movs	r3, #0
 80072ae:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 80072b0:	6938      	ldr	r0, [r7, #16]
 80072b2:	f001 f987 	bl	80085c4 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80072b6:	697b      	ldr	r3, [r7, #20]
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3718      	adds	r7, #24
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80072c0:	b480      	push	{r7}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	4a07      	ldr	r2, [pc, #28]	; (80072ec <vApplicationGetIdleTaskMemory+0x2c>)
 80072d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	4a06      	ldr	r2, [pc, #24]	; (80072f0 <vApplicationGetIdleTaskMemory+0x30>)
 80072d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2280      	movs	r2, #128	; 0x80
 80072dc:	601a      	str	r2, [r3, #0]
}
 80072de:	bf00      	nop
 80072e0:	3714      	adds	r7, #20
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	20000c64 	.word	0x20000c64
 80072f0:	20000d28 	.word	0x20000d28

080072f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	4a07      	ldr	r2, [pc, #28]	; (8007320 <vApplicationGetTimerTaskMemory+0x2c>)
 8007304:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	4a06      	ldr	r2, [pc, #24]	; (8007324 <vApplicationGetTimerTaskMemory+0x30>)
 800730a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007312:	601a      	str	r2, [r3, #0]
}
 8007314:	bf00      	nop
 8007316:	3714      	adds	r7, #20
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr
 8007320:	20000f28 	.word	0x20000f28
 8007324:	20000fec 	.word	0x20000fec

08007328 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8007328:	b580      	push	{r7, lr}
 800732a:	b086      	sub	sp, #24
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d10a      	bne.n	800734c <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733a:	f383 8811 	msr	BASEPRI, r3
 800733e:	f3bf 8f6f 	isb	sy
 8007342:	f3bf 8f4f 	dsb	sy
 8007346:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007348:	bf00      	nop
 800734a:	e7fe      	b.n	800734a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800734c:	2320      	movs	r3, #32
 800734e:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	2b20      	cmp	r3, #32
 8007354:	d00a      	beq.n	800736c <xEventGroupCreateStatic+0x44>
	__asm volatile
 8007356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735a:	f383 8811 	msr	BASEPRI, r3
 800735e:	f3bf 8f6f 	isb	sy
 8007362:	f3bf 8f4f 	dsb	sy
 8007366:	60fb      	str	r3, [r7, #12]
}
 8007368:	bf00      	nop
 800736a:	e7fe      	b.n	800736a <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00a      	beq.n	800738c <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	2200      	movs	r2, #0
 800737a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	3304      	adds	r3, #4
 8007380:	4618      	mov	r0, r3
 8007382:	f000 fa71 	bl	8007868 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	2201      	movs	r2, #1
 800738a:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800738c:	697b      	ldr	r3, [r7, #20]
	}
 800738e:	4618      	mov	r0, r3
 8007390:	3718      	adds	r7, #24
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8007396:	b580      	push	{r7, lr}
 8007398:	b082      	sub	sp, #8
 800739a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800739c:	2020      	movs	r0, #32
 800739e:	f003 fa93 	bl	800a8c8 <pvPortMalloc>
 80073a2:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00a      	beq.n	80073c0 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	3304      	adds	r3, #4
 80073b4:	4618      	mov	r0, r3
 80073b6:	f000 fa57 	bl	8007868 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80073c0:	687b      	ldr	r3, [r7, #4]
	}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3708      	adds	r7, #8
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
	...

080073cc <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b090      	sub	sp, #64	; 0x40
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	607a      	str	r2, [r7, #4]
 80073d8:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80073de:	2300      	movs	r3, #0
 80073e0:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80073e2:	2300      	movs	r3, #0
 80073e4:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d10a      	bne.n	8007402 <xEventGroupWaitBits+0x36>
	__asm volatile
 80073ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f0:	f383 8811 	msr	BASEPRI, r3
 80073f4:	f3bf 8f6f 	isb	sy
 80073f8:	f3bf 8f4f 	dsb	sy
 80073fc:	623b      	str	r3, [r7, #32]
}
 80073fe:	bf00      	nop
 8007400:	e7fe      	b.n	8007400 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007408:	2b00      	cmp	r3, #0
 800740a:	d00a      	beq.n	8007422 <xEventGroupWaitBits+0x56>
	__asm volatile
 800740c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007410:	f383 8811 	msr	BASEPRI, r3
 8007414:	f3bf 8f6f 	isb	sy
 8007418:	f3bf 8f4f 	dsb	sy
 800741c:	61fb      	str	r3, [r7, #28]
}
 800741e:	bf00      	nop
 8007420:	e7fe      	b.n	8007420 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d10a      	bne.n	800743e <xEventGroupWaitBits+0x72>
	__asm volatile
 8007428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742c:	f383 8811 	msr	BASEPRI, r3
 8007430:	f3bf 8f6f 	isb	sy
 8007434:	f3bf 8f4f 	dsb	sy
 8007438:	61bb      	str	r3, [r7, #24]
}
 800743a:	bf00      	nop
 800743c:	e7fe      	b.n	800743c <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800743e:	f002 f9af 	bl	80097a0 <xTaskGetSchedulerState>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d102      	bne.n	800744e <xEventGroupWaitBits+0x82>
 8007448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800744a:	2b00      	cmp	r3, #0
 800744c:	d101      	bne.n	8007452 <xEventGroupWaitBits+0x86>
 800744e:	2301      	movs	r3, #1
 8007450:	e000      	b.n	8007454 <xEventGroupWaitBits+0x88>
 8007452:	2300      	movs	r3, #0
 8007454:	2b00      	cmp	r3, #0
 8007456:	d10a      	bne.n	800746e <xEventGroupWaitBits+0xa2>
	__asm volatile
 8007458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745c:	f383 8811 	msr	BASEPRI, r3
 8007460:	f3bf 8f6f 	isb	sy
 8007464:	f3bf 8f4f 	dsb	sy
 8007468:	617b      	str	r3, [r7, #20]
}
 800746a:	bf00      	nop
 800746c:	e7fe      	b.n	800746c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800746e:	f001 fce1 	bl	8008e34 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8007472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8007478:	683a      	ldr	r2, [r7, #0]
 800747a:	68b9      	ldr	r1, [r7, #8]
 800747c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800747e:	f000 f9bd 	bl	80077fc <prvTestWaitCondition>
 8007482:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8007484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007486:	2b00      	cmp	r3, #0
 8007488:	d00e      	beq.n	80074a8 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800748a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800748e:	2300      	movs	r3, #0
 8007490:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d028      	beq.n	80074ea <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8007498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	43db      	mvns	r3, r3
 80074a0:	401a      	ands	r2, r3
 80074a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074a4:	601a      	str	r2, [r3, #0]
 80074a6:	e020      	b.n	80074ea <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80074a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d104      	bne.n	80074b8 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80074ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80074b2:	2301      	movs	r3, #1
 80074b4:	633b      	str	r3, [r7, #48]	; 0x30
 80074b6:	e018      	b.n	80074ea <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d003      	beq.n	80074c6 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80074be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80074c4:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d003      	beq.n	80074d4 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80074cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80074d2:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80074d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074d6:	1d18      	adds	r0, r3, #4
 80074d8:	68ba      	ldr	r2, [r7, #8]
 80074da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074dc:	4313      	orrs	r3, r2
 80074de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074e0:	4619      	mov	r1, r3
 80074e2:	f001 fec1 	bl	8009268 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80074e6:	2300      	movs	r3, #0
 80074e8:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80074ea:	f001 fcb1 	bl	8008e50 <xTaskResumeAll>
 80074ee:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80074f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d031      	beq.n	800755a <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80074f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d107      	bne.n	800750c <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80074fc:	4b19      	ldr	r3, [pc, #100]	; (8007564 <xEventGroupWaitBits+0x198>)
 80074fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007502:	601a      	str	r2, [r3, #0]
 8007504:	f3bf 8f4f 	dsb	sy
 8007508:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800750c:	f002 fabe 	bl	8009a8c <uxTaskResetEventItemValue>
 8007510:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8007512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007518:	2b00      	cmp	r3, #0
 800751a:	d11a      	bne.n	8007552 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800751c:	f003 f8b2 	bl	800a684 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8007520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8007526:	683a      	ldr	r2, [r7, #0]
 8007528:	68b9      	ldr	r1, [r7, #8]
 800752a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800752c:	f000 f966 	bl	80077fc <prvTestWaitCondition>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d009      	beq.n	800754a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d006      	beq.n	800754a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800753c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	43db      	mvns	r3, r3
 8007544:	401a      	ands	r2, r3
 8007546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007548:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800754a:	2301      	movs	r3, #1
 800754c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800754e:	f003 f8c9 	bl	800a6e4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8007552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007554:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007558:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800755a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800755c:	4618      	mov	r0, r3
 800755e:	3740      	adds	r7, #64	; 0x40
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}
 8007564:	e000ed04 	.word	0xe000ed04

08007568 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b086      	sub	sp, #24
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d10a      	bne.n	8007592 <xEventGroupClearBits+0x2a>
	__asm volatile
 800757c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007580:	f383 8811 	msr	BASEPRI, r3
 8007584:	f3bf 8f6f 	isb	sy
 8007588:	f3bf 8f4f 	dsb	sy
 800758c:	60fb      	str	r3, [r7, #12]
}
 800758e:	bf00      	nop
 8007590:	e7fe      	b.n	8007590 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00a      	beq.n	80075b2 <xEventGroupClearBits+0x4a>
	__asm volatile
 800759c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a0:	f383 8811 	msr	BASEPRI, r3
 80075a4:	f3bf 8f6f 	isb	sy
 80075a8:	f3bf 8f4f 	dsb	sy
 80075ac:	60bb      	str	r3, [r7, #8]
}
 80075ae:	bf00      	nop
 80075b0:	e7fe      	b.n	80075b0 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 80075b2:	f003 f867 	bl	800a684 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	43db      	mvns	r3, r3
 80075c4:	401a      	ands	r2, r3
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 80075ca:	f003 f88b 	bl	800a6e4 <vPortExitCritical>

	return uxReturn;
 80075ce:	693b      	ldr	r3, [r7, #16]
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3718      	adds	r7, #24
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80075e2:	2300      	movs	r3, #0
 80075e4:	683a      	ldr	r2, [r7, #0]
 80075e6:	6879      	ldr	r1, [r7, #4]
 80075e8:	4804      	ldr	r0, [pc, #16]	; (80075fc <xEventGroupClearBitsFromISR+0x24>)
 80075ea:	f002 ff01 	bl	800a3f0 <xTimerPendFunctionCallFromISR>
 80075ee:	60f8      	str	r0, [r7, #12]

		return xReturn;
 80075f0:	68fb      	ldr	r3, [r7, #12]
	}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	080077e3 	.word	0x080077e3

08007600 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8007600:	b480      	push	{r7}
 8007602:	b089      	sub	sp, #36	; 0x24
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800760c:	f3ef 8211 	mrs	r2, BASEPRI
 8007610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007614:	f383 8811 	msr	BASEPRI, r3
 8007618:	f3bf 8f6f 	isb	sy
 800761c:	f3bf 8f4f 	dsb	sy
 8007620:	60fa      	str	r2, [r7, #12]
 8007622:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007624:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007626:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	617b      	str	r3, [r7, #20]
 800762e:	69bb      	ldr	r3, [r7, #24]
 8007630:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007638:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 800763a:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 800763c:	4618      	mov	r0, r3
 800763e:	3724      	adds	r7, #36	; 0x24
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b08e      	sub	sp, #56	; 0x38
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8007652:	2300      	movs	r3, #0
 8007654:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800765a:	2300      	movs	r3, #0
 800765c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d10a      	bne.n	800767a <xEventGroupSetBits+0x32>
	__asm volatile
 8007664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007668:	f383 8811 	msr	BASEPRI, r3
 800766c:	f3bf 8f6f 	isb	sy
 8007670:	f3bf 8f4f 	dsb	sy
 8007674:	613b      	str	r3, [r7, #16]
}
 8007676:	bf00      	nop
 8007678:	e7fe      	b.n	8007678 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00a      	beq.n	800769a <xEventGroupSetBits+0x52>
	__asm volatile
 8007684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007688:	f383 8811 	msr	BASEPRI, r3
 800768c:	f3bf 8f6f 	isb	sy
 8007690:	f3bf 8f4f 	dsb	sy
 8007694:	60fb      	str	r3, [r7, #12]
}
 8007696:	bf00      	nop
 8007698:	e7fe      	b.n	8007698 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800769a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800769c:	3304      	adds	r3, #4
 800769e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a2:	3308      	adds	r3, #8
 80076a4:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80076a6:	f001 fbc5 	bl	8008e34 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80076aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80076b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	431a      	orrs	r2, r3
 80076b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ba:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80076bc:	e03c      	b.n	8007738 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80076be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80076c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80076ca:	2300      	movs	r3, #0
 80076cc:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80076d4:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80076dc:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d108      	bne.n	80076fa <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80076e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	4013      	ands	r3, r2
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00b      	beq.n	800770c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80076f4:	2301      	movs	r3, #1
 80076f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076f8:	e008      	b.n	800770c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80076fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	4013      	ands	r3, r2
 8007702:	69ba      	ldr	r2, [r7, #24]
 8007704:	429a      	cmp	r2, r3
 8007706:	d101      	bne.n	800770c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8007708:	2301      	movs	r3, #1
 800770a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800770c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800770e:	2b00      	cmp	r3, #0
 8007710:	d010      	beq.n	8007734 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007718:	2b00      	cmp	r3, #0
 800771a:	d003      	beq.n	8007724 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800771c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	4313      	orrs	r3, r2
 8007722:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8007724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800772c:	4619      	mov	r1, r3
 800772e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007730:	f001 fe66 	bl	8009400 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8007738:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800773a:	6a3b      	ldr	r3, [r7, #32]
 800773c:	429a      	cmp	r2, r3
 800773e:	d1be      	bne.n	80076be <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8007740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007746:	43db      	mvns	r3, r3
 8007748:	401a      	ands	r2, r3
 800774a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800774c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800774e:	f001 fb7f 	bl	8008e50 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8007752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007754:	681b      	ldr	r3, [r3, #0]
}
 8007756:	4618      	mov	r0, r3
 8007758:	3738      	adds	r7, #56	; 0x38
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}

0800775e <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b086      	sub	sp, #24
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
EventGroup_t *pxEventBits = xEventGroup;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	617b      	str	r3, [r7, #20]
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	3304      	adds	r3, #4
 800776e:	613b      	str	r3, [r7, #16]

	vTaskSuspendAll();
 8007770:	f001 fb60 	bl	8008e34 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8007774:	e017      	b.n	80077a6 <vEventGroupDelete+0x48>
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	68da      	ldr	r2, [r3, #12]
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	3308      	adds	r3, #8
 800777e:	429a      	cmp	r2, r3
 8007780:	d10a      	bne.n	8007798 <vEventGroupDelete+0x3a>
	__asm volatile
 8007782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007786:	f383 8811 	msr	BASEPRI, r3
 800778a:	f3bf 8f6f 	isb	sy
 800778e:	f3bf 8f4f 	dsb	sy
 8007792:	60fb      	str	r3, [r7, #12]
}
 8007794:	bf00      	nop
 8007796:	e7fe      	b.n	8007796 <vEventGroupDelete+0x38>
			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80077a0:	4618      	mov	r0, r3
 80077a2:	f001 fe2d 	bl	8009400 <vTaskRemoveFromUnorderedEventList>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d1e3      	bne.n	8007776 <vEventGroupDelete+0x18>
		}
		#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
		{
			/* The event group could have been allocated statically or
			dynamically, so check before attempting to free the memory. */
			if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	7f1b      	ldrb	r3, [r3, #28]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d102      	bne.n	80077bc <vEventGroupDelete+0x5e>
			{
				vPortFree( pxEventBits );
 80077b6:	6978      	ldr	r0, [r7, #20]
 80077b8:	f003 f952 	bl	800aa60 <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
 80077bc:	f001 fb48 	bl	8008e50 <xTaskResumeAll>
}
 80077c0:	bf00      	nop
 80077c2:	3718      	adds	r7, #24
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80077d2:	6839      	ldr	r1, [r7, #0]
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f7ff ff37 	bl	8007648 <xEventGroupSetBits>
}
 80077da:	bf00      	nop
 80077dc:	3708      	adds	r7, #8
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b082      	sub	sp, #8
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
 80077ea:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80077ec:	6839      	ldr	r1, [r7, #0]
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f7ff feba 	bl	8007568 <xEventGroupClearBits>
}
 80077f4:	bf00      	nop
 80077f6:	3708      	adds	r7, #8
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80077fc:	b480      	push	{r7}
 80077fe:	b087      	sub	sp, #28
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8007808:	2300      	movs	r3, #0
 800780a:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d107      	bne.n	8007822 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8007812:	68fa      	ldr	r2, [r7, #12]
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	4013      	ands	r3, r2
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00a      	beq.n	8007832 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800781c:	2301      	movs	r3, #1
 800781e:	617b      	str	r3, [r7, #20]
 8007820:	e007      	b.n	8007832 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8007822:	68fa      	ldr	r2, [r7, #12]
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	4013      	ands	r3, r2
 8007828:	68ba      	ldr	r2, [r7, #8]
 800782a:	429a      	cmp	r2, r3
 800782c:	d101      	bne.n	8007832 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800782e:	2301      	movs	r3, #1
 8007830:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8007832:	697b      	ldr	r3, [r7, #20]
}
 8007834:	4618      	mov	r0, r3
 8007836:	371c      	adds	r7, #28
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007840:	b580      	push	{r7, lr}
 8007842:	b086      	sub	sp, #24
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	68ba      	ldr	r2, [r7, #8]
 8007850:	68f9      	ldr	r1, [r7, #12]
 8007852:	4804      	ldr	r0, [pc, #16]	; (8007864 <xEventGroupSetBitsFromISR+0x24>)
 8007854:	f002 fdcc 	bl	800a3f0 <xTimerPendFunctionCallFromISR>
 8007858:	6178      	str	r0, [r7, #20]

		return xReturn;
 800785a:	697b      	ldr	r3, [r7, #20]
	}
 800785c:	4618      	mov	r0, r3
 800785e:	3718      	adds	r7, #24
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}
 8007864:	080077c9 	.word	0x080077c9

08007868 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f103 0208 	add.w	r2, r3, #8
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f04f 32ff 	mov.w	r2, #4294967295
 8007880:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f103 0208 	add.w	r2, r3, #8
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f103 0208 	add.w	r2, r3, #8
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800789c:	bf00      	nop
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80078b6:	bf00      	nop
 80078b8:	370c      	adds	r7, #12
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr

080078c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80078c2:	b480      	push	{r7}
 80078c4:	b085      	sub	sp, #20
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
 80078ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	689a      	ldr	r2, [r3, #8]
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	683a      	ldr	r2, [r7, #0]
 80078e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	683a      	ldr	r2, [r7, #0]
 80078ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	1c5a      	adds	r2, r3, #1
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	601a      	str	r2, [r3, #0]
}
 80078fe:	bf00      	nop
 8007900:	3714      	adds	r7, #20
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr

0800790a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800790a:	b480      	push	{r7}
 800790c:	b085      	sub	sp, #20
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
 8007912:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007920:	d103      	bne.n	800792a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	60fb      	str	r3, [r7, #12]
 8007928:	e00c      	b.n	8007944 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	3308      	adds	r3, #8
 800792e:	60fb      	str	r3, [r7, #12]
 8007930:	e002      	b.n	8007938 <vListInsert+0x2e>
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	60fb      	str	r3, [r7, #12]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	68ba      	ldr	r2, [r7, #8]
 8007940:	429a      	cmp	r2, r3
 8007942:	d2f6      	bcs.n	8007932 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	685a      	ldr	r2, [r3, #4]
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	683a      	ldr	r2, [r7, #0]
 8007952:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	68fa      	ldr	r2, [r7, #12]
 8007958:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	683a      	ldr	r2, [r7, #0]
 800795e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	1c5a      	adds	r2, r3, #1
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	601a      	str	r2, [r3, #0]
}
 8007970:	bf00      	nop
 8007972:	3714      	adds	r7, #20
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	691b      	ldr	r3, [r3, #16]
 8007988:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	6892      	ldr	r2, [r2, #8]
 8007992:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	6852      	ldr	r2, [r2, #4]
 800799c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d103      	bne.n	80079b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	689a      	ldr	r2, [r3, #8]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	1e5a      	subs	r2, r3, #1
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3714      	adds	r7, #20
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d10a      	bne.n	80079fa <xQueueGenericReset+0x2a>
	__asm volatile
 80079e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e8:	f383 8811 	msr	BASEPRI, r3
 80079ec:	f3bf 8f6f 	isb	sy
 80079f0:	f3bf 8f4f 	dsb	sy
 80079f4:	60bb      	str	r3, [r7, #8]
}
 80079f6:	bf00      	nop
 80079f8:	e7fe      	b.n	80079f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80079fa:	f002 fe43 	bl	800a684 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a06:	68f9      	ldr	r1, [r7, #12]
 8007a08:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007a0a:	fb01 f303 	mul.w	r3, r1, r3
 8007a0e:	441a      	add	r2, r3
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2200      	movs	r2, #0
 8007a18:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a2a:	3b01      	subs	r3, #1
 8007a2c:	68f9      	ldr	r1, [r7, #12]
 8007a2e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007a30:	fb01 f303 	mul.w	r3, r1, r3
 8007a34:	441a      	add	r2, r3
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	22ff      	movs	r2, #255	; 0xff
 8007a3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	22ff      	movs	r2, #255	; 0xff
 8007a46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d114      	bne.n	8007a7a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	691b      	ldr	r3, [r3, #16]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d01a      	beq.n	8007a8e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	3310      	adds	r3, #16
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f001 fc6b 	bl	8009338 <xTaskRemoveFromEventList>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d012      	beq.n	8007a8e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007a68:	4b0c      	ldr	r3, [pc, #48]	; (8007a9c <xQueueGenericReset+0xcc>)
 8007a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a6e:	601a      	str	r2, [r3, #0]
 8007a70:	f3bf 8f4f 	dsb	sy
 8007a74:	f3bf 8f6f 	isb	sy
 8007a78:	e009      	b.n	8007a8e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	3310      	adds	r3, #16
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7ff fef2 	bl	8007868 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	3324      	adds	r3, #36	; 0x24
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f7ff feed 	bl	8007868 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007a8e:	f002 fe29 	bl	800a6e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007a92:	2301      	movs	r3, #1
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3710      	adds	r7, #16
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	e000ed04 	.word	0xe000ed04

08007aa0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b08e      	sub	sp, #56	; 0x38
 8007aa4:	af02      	add	r7, sp, #8
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	607a      	str	r2, [r7, #4]
 8007aac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d10a      	bne.n	8007aca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab8:	f383 8811 	msr	BASEPRI, r3
 8007abc:	f3bf 8f6f 	isb	sy
 8007ac0:	f3bf 8f4f 	dsb	sy
 8007ac4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007ac6:	bf00      	nop
 8007ac8:	e7fe      	b.n	8007ac8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d10a      	bne.n	8007ae6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad4:	f383 8811 	msr	BASEPRI, r3
 8007ad8:	f3bf 8f6f 	isb	sy
 8007adc:	f3bf 8f4f 	dsb	sy
 8007ae0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007ae2:	bf00      	nop
 8007ae4:	e7fe      	b.n	8007ae4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d002      	beq.n	8007af2 <xQueueGenericCreateStatic+0x52>
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d001      	beq.n	8007af6 <xQueueGenericCreateStatic+0x56>
 8007af2:	2301      	movs	r3, #1
 8007af4:	e000      	b.n	8007af8 <xQueueGenericCreateStatic+0x58>
 8007af6:	2300      	movs	r3, #0
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d10a      	bne.n	8007b12 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b00:	f383 8811 	msr	BASEPRI, r3
 8007b04:	f3bf 8f6f 	isb	sy
 8007b08:	f3bf 8f4f 	dsb	sy
 8007b0c:	623b      	str	r3, [r7, #32]
}
 8007b0e:	bf00      	nop
 8007b10:	e7fe      	b.n	8007b10 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d102      	bne.n	8007b1e <xQueueGenericCreateStatic+0x7e>
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d101      	bne.n	8007b22 <xQueueGenericCreateStatic+0x82>
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e000      	b.n	8007b24 <xQueueGenericCreateStatic+0x84>
 8007b22:	2300      	movs	r3, #0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d10a      	bne.n	8007b3e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2c:	f383 8811 	msr	BASEPRI, r3
 8007b30:	f3bf 8f6f 	isb	sy
 8007b34:	f3bf 8f4f 	dsb	sy
 8007b38:	61fb      	str	r3, [r7, #28]
}
 8007b3a:	bf00      	nop
 8007b3c:	e7fe      	b.n	8007b3c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007b3e:	2350      	movs	r3, #80	; 0x50
 8007b40:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	2b50      	cmp	r3, #80	; 0x50
 8007b46:	d00a      	beq.n	8007b5e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b4c:	f383 8811 	msr	BASEPRI, r3
 8007b50:	f3bf 8f6f 	isb	sy
 8007b54:	f3bf 8f4f 	dsb	sy
 8007b58:	61bb      	str	r3, [r7, #24]
}
 8007b5a:	bf00      	nop
 8007b5c:	e7fe      	b.n	8007b5c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007b5e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00d      	beq.n	8007b86 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007b72:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b78:	9300      	str	r3, [sp, #0]
 8007b7a:	4613      	mov	r3, r2
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	68b9      	ldr	r1, [r7, #8]
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	f000 f83f 	bl	8007c04 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3730      	adds	r7, #48	; 0x30
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b08a      	sub	sp, #40	; 0x28
 8007b94:	af02      	add	r7, sp, #8
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	4613      	mov	r3, r2
 8007b9c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d10a      	bne.n	8007bba <xQueueGenericCreate+0x2a>
	__asm volatile
 8007ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba8:	f383 8811 	msr	BASEPRI, r3
 8007bac:	f3bf 8f6f 	isb	sy
 8007bb0:	f3bf 8f4f 	dsb	sy
 8007bb4:	613b      	str	r3, [r7, #16]
}
 8007bb6:	bf00      	nop
 8007bb8:	e7fe      	b.n	8007bb8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	68ba      	ldr	r2, [r7, #8]
 8007bbe:	fb02 f303 	mul.w	r3, r2, r3
 8007bc2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	3350      	adds	r3, #80	; 0x50
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f002 fe7d 	bl	800a8c8 <pvPortMalloc>
 8007bce:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d011      	beq.n	8007bfa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	3350      	adds	r3, #80	; 0x50
 8007bde:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007be8:	79fa      	ldrb	r2, [r7, #7]
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	4613      	mov	r3, r2
 8007bf0:	697a      	ldr	r2, [r7, #20]
 8007bf2:	68b9      	ldr	r1, [r7, #8]
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f000 f805 	bl	8007c04 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007bfa:	69bb      	ldr	r3, [r7, #24]
	}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3720      	adds	r7, #32
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	607a      	str	r2, [r7, #4]
 8007c10:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d103      	bne.n	8007c20 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	69ba      	ldr	r2, [r7, #24]
 8007c1c:	601a      	str	r2, [r3, #0]
 8007c1e:	e002      	b.n	8007c26 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007c2c:	69bb      	ldr	r3, [r7, #24]
 8007c2e:	68ba      	ldr	r2, [r7, #8]
 8007c30:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007c32:	2101      	movs	r1, #1
 8007c34:	69b8      	ldr	r0, [r7, #24]
 8007c36:	f7ff fecb 	bl	80079d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007c3a:	69bb      	ldr	r3, [r7, #24]
 8007c3c:	78fa      	ldrb	r2, [r7, #3]
 8007c3e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007c42:	bf00      	nop
 8007c44:	3710      	adds	r7, #16
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b082      	sub	sp, #8
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00e      	beq.n	8007c76 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	2100      	movs	r1, #0
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 f8a1 	bl	8007db8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007c76:	bf00      	nop
 8007c78:	3708      	adds	r7, #8
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b086      	sub	sp, #24
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	4603      	mov	r3, r0
 8007c86:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	617b      	str	r3, [r7, #20]
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007c90:	79fb      	ldrb	r3, [r7, #7]
 8007c92:	461a      	mov	r2, r3
 8007c94:	6939      	ldr	r1, [r7, #16]
 8007c96:	6978      	ldr	r0, [r7, #20]
 8007c98:	f7ff ff7a 	bl	8007b90 <xQueueGenericCreate>
 8007c9c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f7ff ffd3 	bl	8007c4a <prvInitialiseMutex>

		return xNewQueue;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
	}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3718      	adds	r7, #24
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}

08007cae <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b088      	sub	sp, #32
 8007cb2:	af02      	add	r7, sp, #8
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	6039      	str	r1, [r7, #0]
 8007cb8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	617b      	str	r3, [r7, #20]
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007cc2:	79fb      	ldrb	r3, [r7, #7]
 8007cc4:	9300      	str	r3, [sp, #0]
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	6939      	ldr	r1, [r7, #16]
 8007ccc:	6978      	ldr	r0, [r7, #20]
 8007cce:	f7ff fee7 	bl	8007aa0 <xQueueGenericCreateStatic>
 8007cd2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007cd4:	68f8      	ldr	r0, [r7, #12]
 8007cd6:	f7ff ffb8 	bl	8007c4a <prvInitialiseMutex>

		return xNewQueue;
 8007cda:	68fb      	ldr	r3, [r7, #12]
	}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3718      	adds	r7, #24
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007ce4:	b590      	push	{r4, r7, lr}
 8007ce6:	b087      	sub	sp, #28
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d10a      	bne.n	8007d0c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8007cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfa:	f383 8811 	msr	BASEPRI, r3
 8007cfe:	f3bf 8f6f 	isb	sy
 8007d02:	f3bf 8f4f 	dsb	sy
 8007d06:	60fb      	str	r3, [r7, #12]
}
 8007d08:	bf00      	nop
 8007d0a:	e7fe      	b.n	8007d0a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	689c      	ldr	r4, [r3, #8]
 8007d10:	f001 fd36 	bl	8009780 <xTaskGetCurrentTaskHandle>
 8007d14:	4603      	mov	r3, r0
 8007d16:	429c      	cmp	r4, r3
 8007d18:	d111      	bne.n	8007d3e <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	1e5a      	subs	r2, r3, #1
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	68db      	ldr	r3, [r3, #12]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d105      	bne.n	8007d38 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	2200      	movs	r2, #0
 8007d30:	2100      	movs	r1, #0
 8007d32:	6938      	ldr	r0, [r7, #16]
 8007d34:	f000 f840 	bl	8007db8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	617b      	str	r3, [r7, #20]
 8007d3c:	e001      	b.n	8007d42 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007d42:	697b      	ldr	r3, [r7, #20]
	}
 8007d44:	4618      	mov	r0, r3
 8007d46:	371c      	adds	r7, #28
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd90      	pop	{r4, r7, pc}

08007d4c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007d4c:	b590      	push	{r4, r7, lr}
 8007d4e:	b087      	sub	sp, #28
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d10a      	bne.n	8007d76 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8007d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d64:	f383 8811 	msr	BASEPRI, r3
 8007d68:	f3bf 8f6f 	isb	sy
 8007d6c:	f3bf 8f4f 	dsb	sy
 8007d70:	60fb      	str	r3, [r7, #12]
}
 8007d72:	bf00      	nop
 8007d74:	e7fe      	b.n	8007d74 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	689c      	ldr	r4, [r3, #8]
 8007d7a:	f001 fd01 	bl	8009780 <xTaskGetCurrentTaskHandle>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	429c      	cmp	r4, r3
 8007d82:	d107      	bne.n	8007d94 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	1c5a      	adds	r2, r3, #1
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	617b      	str	r3, [r7, #20]
 8007d92:	e00c      	b.n	8007dae <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007d94:	6839      	ldr	r1, [r7, #0]
 8007d96:	6938      	ldr	r0, [r7, #16]
 8007d98:	f000 fa88 	bl	80082ac <xQueueSemaphoreTake>
 8007d9c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d004      	beq.n	8007dae <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	1c5a      	adds	r2, r3, #1
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007dae:	697b      	ldr	r3, [r7, #20]
	}
 8007db0:	4618      	mov	r0, r3
 8007db2:	371c      	adds	r7, #28
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd90      	pop	{r4, r7, pc}

08007db8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b08e      	sub	sp, #56	; 0x38
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	60b9      	str	r1, [r7, #8]
 8007dc2:	607a      	str	r2, [r7, #4]
 8007dc4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d10a      	bne.n	8007dea <xQueueGenericSend+0x32>
	__asm volatile
 8007dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd8:	f383 8811 	msr	BASEPRI, r3
 8007ddc:	f3bf 8f6f 	isb	sy
 8007de0:	f3bf 8f4f 	dsb	sy
 8007de4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007de6:	bf00      	nop
 8007de8:	e7fe      	b.n	8007de8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d103      	bne.n	8007df8 <xQueueGenericSend+0x40>
 8007df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d101      	bne.n	8007dfc <xQueueGenericSend+0x44>
 8007df8:	2301      	movs	r3, #1
 8007dfa:	e000      	b.n	8007dfe <xQueueGenericSend+0x46>
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d10a      	bne.n	8007e18 <xQueueGenericSend+0x60>
	__asm volatile
 8007e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e06:	f383 8811 	msr	BASEPRI, r3
 8007e0a:	f3bf 8f6f 	isb	sy
 8007e0e:	f3bf 8f4f 	dsb	sy
 8007e12:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007e14:	bf00      	nop
 8007e16:	e7fe      	b.n	8007e16 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	2b02      	cmp	r3, #2
 8007e1c:	d103      	bne.n	8007e26 <xQueueGenericSend+0x6e>
 8007e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d101      	bne.n	8007e2a <xQueueGenericSend+0x72>
 8007e26:	2301      	movs	r3, #1
 8007e28:	e000      	b.n	8007e2c <xQueueGenericSend+0x74>
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d10a      	bne.n	8007e46 <xQueueGenericSend+0x8e>
	__asm volatile
 8007e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e34:	f383 8811 	msr	BASEPRI, r3
 8007e38:	f3bf 8f6f 	isb	sy
 8007e3c:	f3bf 8f4f 	dsb	sy
 8007e40:	623b      	str	r3, [r7, #32]
}
 8007e42:	bf00      	nop
 8007e44:	e7fe      	b.n	8007e44 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e46:	f001 fcab 	bl	80097a0 <xTaskGetSchedulerState>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d102      	bne.n	8007e56 <xQueueGenericSend+0x9e>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d101      	bne.n	8007e5a <xQueueGenericSend+0xa2>
 8007e56:	2301      	movs	r3, #1
 8007e58:	e000      	b.n	8007e5c <xQueueGenericSend+0xa4>
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d10a      	bne.n	8007e76 <xQueueGenericSend+0xbe>
	__asm volatile
 8007e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e64:	f383 8811 	msr	BASEPRI, r3
 8007e68:	f3bf 8f6f 	isb	sy
 8007e6c:	f3bf 8f4f 	dsb	sy
 8007e70:	61fb      	str	r3, [r7, #28]
}
 8007e72:	bf00      	nop
 8007e74:	e7fe      	b.n	8007e74 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e76:	f002 fc05 	bl	800a684 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d302      	bcc.n	8007e8c <xQueueGenericSend+0xd4>
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	2b02      	cmp	r3, #2
 8007e8a:	d129      	bne.n	8007ee0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e8c:	683a      	ldr	r2, [r7, #0]
 8007e8e:	68b9      	ldr	r1, [r7, #8]
 8007e90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e92:	f000 fbd2 	bl	800863a <prvCopyDataToQueue>
 8007e96:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d010      	beq.n	8007ec2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea2:	3324      	adds	r3, #36	; 0x24
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f001 fa47 	bl	8009338 <xTaskRemoveFromEventList>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d013      	beq.n	8007ed8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007eb0:	4b3f      	ldr	r3, [pc, #252]	; (8007fb0 <xQueueGenericSend+0x1f8>)
 8007eb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eb6:	601a      	str	r2, [r3, #0]
 8007eb8:	f3bf 8f4f 	dsb	sy
 8007ebc:	f3bf 8f6f 	isb	sy
 8007ec0:	e00a      	b.n	8007ed8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d007      	beq.n	8007ed8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007ec8:	4b39      	ldr	r3, [pc, #228]	; (8007fb0 <xQueueGenericSend+0x1f8>)
 8007eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ece:	601a      	str	r2, [r3, #0]
 8007ed0:	f3bf 8f4f 	dsb	sy
 8007ed4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007ed8:	f002 fc04 	bl	800a6e4 <vPortExitCritical>
				return pdPASS;
 8007edc:	2301      	movs	r3, #1
 8007ede:	e063      	b.n	8007fa8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d103      	bne.n	8007eee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ee6:	f002 fbfd 	bl	800a6e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007eea:	2300      	movs	r3, #0
 8007eec:	e05c      	b.n	8007fa8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d106      	bne.n	8007f02 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ef4:	f107 0314 	add.w	r3, r7, #20
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f001 fae3 	bl	80094c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007efe:	2301      	movs	r3, #1
 8007f00:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f02:	f002 fbef 	bl	800a6e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f06:	f000 ff95 	bl	8008e34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f0a:	f002 fbbb 	bl	800a684 <vPortEnterCritical>
 8007f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f14:	b25b      	sxtb	r3, r3
 8007f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f1a:	d103      	bne.n	8007f24 <xQueueGenericSend+0x16c>
 8007f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f2a:	b25b      	sxtb	r3, r3
 8007f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f30:	d103      	bne.n	8007f3a <xQueueGenericSend+0x182>
 8007f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f34:	2200      	movs	r2, #0
 8007f36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f3a:	f002 fbd3 	bl	800a6e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f3e:	1d3a      	adds	r2, r7, #4
 8007f40:	f107 0314 	add.w	r3, r7, #20
 8007f44:	4611      	mov	r1, r2
 8007f46:	4618      	mov	r0, r3
 8007f48:	f001 fad2 	bl	80094f0 <xTaskCheckForTimeOut>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d124      	bne.n	8007f9c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007f52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f54:	f000 fc69 	bl	800882a <prvIsQueueFull>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d018      	beq.n	8007f90 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f60:	3310      	adds	r3, #16
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	4611      	mov	r1, r2
 8007f66:	4618      	mov	r0, r3
 8007f68:	f001 f95a 	bl	8009220 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007f6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f6e:	f000 fbf4 	bl	800875a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007f72:	f000 ff6d 	bl	8008e50 <xTaskResumeAll>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f47f af7c 	bne.w	8007e76 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007f7e:	4b0c      	ldr	r3, [pc, #48]	; (8007fb0 <xQueueGenericSend+0x1f8>)
 8007f80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f84:	601a      	str	r2, [r3, #0]
 8007f86:	f3bf 8f4f 	dsb	sy
 8007f8a:	f3bf 8f6f 	isb	sy
 8007f8e:	e772      	b.n	8007e76 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007f90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f92:	f000 fbe2 	bl	800875a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f96:	f000 ff5b 	bl	8008e50 <xTaskResumeAll>
 8007f9a:	e76c      	b.n	8007e76 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007f9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f9e:	f000 fbdc 	bl	800875a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007fa2:	f000 ff55 	bl	8008e50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007fa6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3738      	adds	r7, #56	; 0x38
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	e000ed04 	.word	0xe000ed04

08007fb4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b090      	sub	sp, #64	; 0x40
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	607a      	str	r2, [r7, #4]
 8007fc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d10a      	bne.n	8007fe2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd0:	f383 8811 	msr	BASEPRI, r3
 8007fd4:	f3bf 8f6f 	isb	sy
 8007fd8:	f3bf 8f4f 	dsb	sy
 8007fdc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007fde:	bf00      	nop
 8007fe0:	e7fe      	b.n	8007fe0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d103      	bne.n	8007ff0 <xQueueGenericSendFromISR+0x3c>
 8007fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d101      	bne.n	8007ff4 <xQueueGenericSendFromISR+0x40>
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e000      	b.n	8007ff6 <xQueueGenericSendFromISR+0x42>
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d10a      	bne.n	8008010 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ffe:	f383 8811 	msr	BASEPRI, r3
 8008002:	f3bf 8f6f 	isb	sy
 8008006:	f3bf 8f4f 	dsb	sy
 800800a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800800c:	bf00      	nop
 800800e:	e7fe      	b.n	800800e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	2b02      	cmp	r3, #2
 8008014:	d103      	bne.n	800801e <xQueueGenericSendFromISR+0x6a>
 8008016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800801a:	2b01      	cmp	r3, #1
 800801c:	d101      	bne.n	8008022 <xQueueGenericSendFromISR+0x6e>
 800801e:	2301      	movs	r3, #1
 8008020:	e000      	b.n	8008024 <xQueueGenericSendFromISR+0x70>
 8008022:	2300      	movs	r3, #0
 8008024:	2b00      	cmp	r3, #0
 8008026:	d10a      	bne.n	800803e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800802c:	f383 8811 	msr	BASEPRI, r3
 8008030:	f3bf 8f6f 	isb	sy
 8008034:	f3bf 8f4f 	dsb	sy
 8008038:	623b      	str	r3, [r7, #32]
}
 800803a:	bf00      	nop
 800803c:	e7fe      	b.n	800803c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800803e:	f002 fc03 	bl	800a848 <vPortValidateInterruptPriority>
	__asm volatile
 8008042:	f3ef 8211 	mrs	r2, BASEPRI
 8008046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804a:	f383 8811 	msr	BASEPRI, r3
 800804e:	f3bf 8f6f 	isb	sy
 8008052:	f3bf 8f4f 	dsb	sy
 8008056:	61fa      	str	r2, [r7, #28]
 8008058:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800805a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800805c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800805e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008060:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008066:	429a      	cmp	r2, r3
 8008068:	d302      	bcc.n	8008070 <xQueueGenericSendFromISR+0xbc>
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	2b02      	cmp	r3, #2
 800806e:	d12f      	bne.n	80080d0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008072:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008076:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800807a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800807c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800807e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008080:	683a      	ldr	r2, [r7, #0]
 8008082:	68b9      	ldr	r1, [r7, #8]
 8008084:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008086:	f000 fad8 	bl	800863a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800808a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800808e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008092:	d112      	bne.n	80080ba <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008098:	2b00      	cmp	r3, #0
 800809a:	d016      	beq.n	80080ca <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800809c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809e:	3324      	adds	r3, #36	; 0x24
 80080a0:	4618      	mov	r0, r3
 80080a2:	f001 f949 	bl	8009338 <xTaskRemoveFromEventList>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d00e      	beq.n	80080ca <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d00b      	beq.n	80080ca <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2201      	movs	r2, #1
 80080b6:	601a      	str	r2, [r3, #0]
 80080b8:	e007      	b.n	80080ca <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80080ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80080be:	3301      	adds	r3, #1
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	b25a      	sxtb	r2, r3
 80080c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80080ca:	2301      	movs	r3, #1
 80080cc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80080ce:	e001      	b.n	80080d4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80080d0:	2300      	movs	r3, #0
 80080d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080d6:	617b      	str	r3, [r7, #20]
	__asm volatile
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	f383 8811 	msr	BASEPRI, r3
}
 80080de:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80080e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3740      	adds	r7, #64	; 0x40
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
	...

080080ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b08c      	sub	sp, #48	; 0x30
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80080f8:	2300      	movs	r3, #0
 80080fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008102:	2b00      	cmp	r3, #0
 8008104:	d10a      	bne.n	800811c <xQueueReceive+0x30>
	__asm volatile
 8008106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810a:	f383 8811 	msr	BASEPRI, r3
 800810e:	f3bf 8f6f 	isb	sy
 8008112:	f3bf 8f4f 	dsb	sy
 8008116:	623b      	str	r3, [r7, #32]
}
 8008118:	bf00      	nop
 800811a:	e7fe      	b.n	800811a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d103      	bne.n	800812a <xQueueReceive+0x3e>
 8008122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008126:	2b00      	cmp	r3, #0
 8008128:	d101      	bne.n	800812e <xQueueReceive+0x42>
 800812a:	2301      	movs	r3, #1
 800812c:	e000      	b.n	8008130 <xQueueReceive+0x44>
 800812e:	2300      	movs	r3, #0
 8008130:	2b00      	cmp	r3, #0
 8008132:	d10a      	bne.n	800814a <xQueueReceive+0x5e>
	__asm volatile
 8008134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008138:	f383 8811 	msr	BASEPRI, r3
 800813c:	f3bf 8f6f 	isb	sy
 8008140:	f3bf 8f4f 	dsb	sy
 8008144:	61fb      	str	r3, [r7, #28]
}
 8008146:	bf00      	nop
 8008148:	e7fe      	b.n	8008148 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800814a:	f001 fb29 	bl	80097a0 <xTaskGetSchedulerState>
 800814e:	4603      	mov	r3, r0
 8008150:	2b00      	cmp	r3, #0
 8008152:	d102      	bne.n	800815a <xQueueReceive+0x6e>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d101      	bne.n	800815e <xQueueReceive+0x72>
 800815a:	2301      	movs	r3, #1
 800815c:	e000      	b.n	8008160 <xQueueReceive+0x74>
 800815e:	2300      	movs	r3, #0
 8008160:	2b00      	cmp	r3, #0
 8008162:	d10a      	bne.n	800817a <xQueueReceive+0x8e>
	__asm volatile
 8008164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008168:	f383 8811 	msr	BASEPRI, r3
 800816c:	f3bf 8f6f 	isb	sy
 8008170:	f3bf 8f4f 	dsb	sy
 8008174:	61bb      	str	r3, [r7, #24]
}
 8008176:	bf00      	nop
 8008178:	e7fe      	b.n	8008178 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800817a:	f002 fa83 	bl	800a684 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800817e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008182:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008186:	2b00      	cmp	r3, #0
 8008188:	d01f      	beq.n	80081ca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800818a:	68b9      	ldr	r1, [r7, #8]
 800818c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800818e:	f000 fabe 	bl	800870e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008194:	1e5a      	subs	r2, r3, #1
 8008196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008198:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800819a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800819c:	691b      	ldr	r3, [r3, #16]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d00f      	beq.n	80081c2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a4:	3310      	adds	r3, #16
 80081a6:	4618      	mov	r0, r3
 80081a8:	f001 f8c6 	bl	8009338 <xTaskRemoveFromEventList>
 80081ac:	4603      	mov	r3, r0
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d007      	beq.n	80081c2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80081b2:	4b3d      	ldr	r3, [pc, #244]	; (80082a8 <xQueueReceive+0x1bc>)
 80081b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081b8:	601a      	str	r2, [r3, #0]
 80081ba:	f3bf 8f4f 	dsb	sy
 80081be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80081c2:	f002 fa8f 	bl	800a6e4 <vPortExitCritical>
				return pdPASS;
 80081c6:	2301      	movs	r3, #1
 80081c8:	e069      	b.n	800829e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d103      	bne.n	80081d8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80081d0:	f002 fa88 	bl	800a6e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80081d4:	2300      	movs	r3, #0
 80081d6:	e062      	b.n	800829e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80081d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d106      	bne.n	80081ec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80081de:	f107 0310 	add.w	r3, r7, #16
 80081e2:	4618      	mov	r0, r3
 80081e4:	f001 f96e 	bl	80094c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80081e8:	2301      	movs	r3, #1
 80081ea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80081ec:	f002 fa7a 	bl	800a6e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80081f0:	f000 fe20 	bl	8008e34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80081f4:	f002 fa46 	bl	800a684 <vPortEnterCritical>
 80081f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081fe:	b25b      	sxtb	r3, r3
 8008200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008204:	d103      	bne.n	800820e <xQueueReceive+0x122>
 8008206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008208:	2200      	movs	r2, #0
 800820a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800820e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008210:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008214:	b25b      	sxtb	r3, r3
 8008216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800821a:	d103      	bne.n	8008224 <xQueueReceive+0x138>
 800821c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800821e:	2200      	movs	r2, #0
 8008220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008224:	f002 fa5e 	bl	800a6e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008228:	1d3a      	adds	r2, r7, #4
 800822a:	f107 0310 	add.w	r3, r7, #16
 800822e:	4611      	mov	r1, r2
 8008230:	4618      	mov	r0, r3
 8008232:	f001 f95d 	bl	80094f0 <xTaskCheckForTimeOut>
 8008236:	4603      	mov	r3, r0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d123      	bne.n	8008284 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800823c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800823e:	f000 fade 	bl	80087fe <prvIsQueueEmpty>
 8008242:	4603      	mov	r3, r0
 8008244:	2b00      	cmp	r3, #0
 8008246:	d017      	beq.n	8008278 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800824a:	3324      	adds	r3, #36	; 0x24
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	4611      	mov	r1, r2
 8008250:	4618      	mov	r0, r3
 8008252:	f000 ffe5 	bl	8009220 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008256:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008258:	f000 fa7f 	bl	800875a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800825c:	f000 fdf8 	bl	8008e50 <xTaskResumeAll>
 8008260:	4603      	mov	r3, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d189      	bne.n	800817a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008266:	4b10      	ldr	r3, [pc, #64]	; (80082a8 <xQueueReceive+0x1bc>)
 8008268:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800826c:	601a      	str	r2, [r3, #0]
 800826e:	f3bf 8f4f 	dsb	sy
 8008272:	f3bf 8f6f 	isb	sy
 8008276:	e780      	b.n	800817a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008278:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800827a:	f000 fa6e 	bl	800875a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800827e:	f000 fde7 	bl	8008e50 <xTaskResumeAll>
 8008282:	e77a      	b.n	800817a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008284:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008286:	f000 fa68 	bl	800875a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800828a:	f000 fde1 	bl	8008e50 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800828e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008290:	f000 fab5 	bl	80087fe <prvIsQueueEmpty>
 8008294:	4603      	mov	r3, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	f43f af6f 	beq.w	800817a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800829c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3730      	adds	r7, #48	; 0x30
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop
 80082a8:	e000ed04 	.word	0xe000ed04

080082ac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b08e      	sub	sp, #56	; 0x38
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80082b6:	2300      	movs	r3, #0
 80082b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80082be:	2300      	movs	r3, #0
 80082c0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80082c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d10a      	bne.n	80082de <xQueueSemaphoreTake+0x32>
	__asm volatile
 80082c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082cc:	f383 8811 	msr	BASEPRI, r3
 80082d0:	f3bf 8f6f 	isb	sy
 80082d4:	f3bf 8f4f 	dsb	sy
 80082d8:	623b      	str	r3, [r7, #32]
}
 80082da:	bf00      	nop
 80082dc:	e7fe      	b.n	80082dc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80082de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00a      	beq.n	80082fc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80082e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ea:	f383 8811 	msr	BASEPRI, r3
 80082ee:	f3bf 8f6f 	isb	sy
 80082f2:	f3bf 8f4f 	dsb	sy
 80082f6:	61fb      	str	r3, [r7, #28]
}
 80082f8:	bf00      	nop
 80082fa:	e7fe      	b.n	80082fa <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80082fc:	f001 fa50 	bl	80097a0 <xTaskGetSchedulerState>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d102      	bne.n	800830c <xQueueSemaphoreTake+0x60>
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d101      	bne.n	8008310 <xQueueSemaphoreTake+0x64>
 800830c:	2301      	movs	r3, #1
 800830e:	e000      	b.n	8008312 <xQueueSemaphoreTake+0x66>
 8008310:	2300      	movs	r3, #0
 8008312:	2b00      	cmp	r3, #0
 8008314:	d10a      	bne.n	800832c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831a:	f383 8811 	msr	BASEPRI, r3
 800831e:	f3bf 8f6f 	isb	sy
 8008322:	f3bf 8f4f 	dsb	sy
 8008326:	61bb      	str	r3, [r7, #24]
}
 8008328:	bf00      	nop
 800832a:	e7fe      	b.n	800832a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800832c:	f002 f9aa 	bl	800a684 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008334:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008338:	2b00      	cmp	r3, #0
 800833a:	d024      	beq.n	8008386 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800833c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800833e:	1e5a      	subs	r2, r3, #1
 8008340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008342:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d104      	bne.n	8008356 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800834c:	f001 fbb6 	bl	8009abc <pvTaskIncrementMutexHeldCount>
 8008350:	4602      	mov	r2, r0
 8008352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008354:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00f      	beq.n	800837e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800835e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008360:	3310      	adds	r3, #16
 8008362:	4618      	mov	r0, r3
 8008364:	f000 ffe8 	bl	8009338 <xTaskRemoveFromEventList>
 8008368:	4603      	mov	r3, r0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d007      	beq.n	800837e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800836e:	4b54      	ldr	r3, [pc, #336]	; (80084c0 <xQueueSemaphoreTake+0x214>)
 8008370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008374:	601a      	str	r2, [r3, #0]
 8008376:	f3bf 8f4f 	dsb	sy
 800837a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800837e:	f002 f9b1 	bl	800a6e4 <vPortExitCritical>
				return pdPASS;
 8008382:	2301      	movs	r3, #1
 8008384:	e097      	b.n	80084b6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d111      	bne.n	80083b0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800838c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800838e:	2b00      	cmp	r3, #0
 8008390:	d00a      	beq.n	80083a8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008396:	f383 8811 	msr	BASEPRI, r3
 800839a:	f3bf 8f6f 	isb	sy
 800839e:	f3bf 8f4f 	dsb	sy
 80083a2:	617b      	str	r3, [r7, #20]
}
 80083a4:	bf00      	nop
 80083a6:	e7fe      	b.n	80083a6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80083a8:	f002 f99c 	bl	800a6e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80083ac:	2300      	movs	r3, #0
 80083ae:	e082      	b.n	80084b6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80083b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d106      	bne.n	80083c4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80083b6:	f107 030c 	add.w	r3, r7, #12
 80083ba:	4618      	mov	r0, r3
 80083bc:	f001 f882 	bl	80094c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80083c0:	2301      	movs	r3, #1
 80083c2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80083c4:	f002 f98e 	bl	800a6e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80083c8:	f000 fd34 	bl	8008e34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80083cc:	f002 f95a 	bl	800a684 <vPortEnterCritical>
 80083d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083d6:	b25b      	sxtb	r3, r3
 80083d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083dc:	d103      	bne.n	80083e6 <xQueueSemaphoreTake+0x13a>
 80083de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e0:	2200      	movs	r2, #0
 80083e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083ec:	b25b      	sxtb	r3, r3
 80083ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083f2:	d103      	bne.n	80083fc <xQueueSemaphoreTake+0x150>
 80083f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f6:	2200      	movs	r2, #0
 80083f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083fc:	f002 f972 	bl	800a6e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008400:	463a      	mov	r2, r7
 8008402:	f107 030c 	add.w	r3, r7, #12
 8008406:	4611      	mov	r1, r2
 8008408:	4618      	mov	r0, r3
 800840a:	f001 f871 	bl	80094f0 <xTaskCheckForTimeOut>
 800840e:	4603      	mov	r3, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d132      	bne.n	800847a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008414:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008416:	f000 f9f2 	bl	80087fe <prvIsQueueEmpty>
 800841a:	4603      	mov	r3, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d026      	beq.n	800846e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d109      	bne.n	800843c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008428:	f002 f92c 	bl	800a684 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800842c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	4618      	mov	r0, r3
 8008432:	f001 f9d3 	bl	80097dc <xTaskPriorityInherit>
 8008436:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008438:	f002 f954 	bl	800a6e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800843c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800843e:	3324      	adds	r3, #36	; 0x24
 8008440:	683a      	ldr	r2, [r7, #0]
 8008442:	4611      	mov	r1, r2
 8008444:	4618      	mov	r0, r3
 8008446:	f000 feeb 	bl	8009220 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800844a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800844c:	f000 f985 	bl	800875a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008450:	f000 fcfe 	bl	8008e50 <xTaskResumeAll>
 8008454:	4603      	mov	r3, r0
 8008456:	2b00      	cmp	r3, #0
 8008458:	f47f af68 	bne.w	800832c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800845c:	4b18      	ldr	r3, [pc, #96]	; (80084c0 <xQueueSemaphoreTake+0x214>)
 800845e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008462:	601a      	str	r2, [r3, #0]
 8008464:	f3bf 8f4f 	dsb	sy
 8008468:	f3bf 8f6f 	isb	sy
 800846c:	e75e      	b.n	800832c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800846e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008470:	f000 f973 	bl	800875a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008474:	f000 fcec 	bl	8008e50 <xTaskResumeAll>
 8008478:	e758      	b.n	800832c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800847a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800847c:	f000 f96d 	bl	800875a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008480:	f000 fce6 	bl	8008e50 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008484:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008486:	f000 f9ba 	bl	80087fe <prvIsQueueEmpty>
 800848a:	4603      	mov	r3, r0
 800848c:	2b00      	cmp	r3, #0
 800848e:	f43f af4d 	beq.w	800832c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008494:	2b00      	cmp	r3, #0
 8008496:	d00d      	beq.n	80084b4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008498:	f002 f8f4 	bl	800a684 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800849c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800849e:	f000 f8b4 	bl	800860a <prvGetDisinheritPriorityAfterTimeout>
 80084a2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80084a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084aa:	4618      	mov	r0, r3
 80084ac:	f001 fa6c 	bl	8009988 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80084b0:	f002 f918 	bl	800a6e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80084b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3738      	adds	r7, #56	; 0x38
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	e000ed04 	.word	0xe000ed04

080084c4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b08e      	sub	sp, #56	; 0x38
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	60b9      	str	r1, [r7, #8]
 80084ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80084d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d10a      	bne.n	80084f0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80084da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084de:	f383 8811 	msr	BASEPRI, r3
 80084e2:	f3bf 8f6f 	isb	sy
 80084e6:	f3bf 8f4f 	dsb	sy
 80084ea:	623b      	str	r3, [r7, #32]
}
 80084ec:	bf00      	nop
 80084ee:	e7fe      	b.n	80084ee <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d103      	bne.n	80084fe <xQueueReceiveFromISR+0x3a>
 80084f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d101      	bne.n	8008502 <xQueueReceiveFromISR+0x3e>
 80084fe:	2301      	movs	r3, #1
 8008500:	e000      	b.n	8008504 <xQueueReceiveFromISR+0x40>
 8008502:	2300      	movs	r3, #0
 8008504:	2b00      	cmp	r3, #0
 8008506:	d10a      	bne.n	800851e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850c:	f383 8811 	msr	BASEPRI, r3
 8008510:	f3bf 8f6f 	isb	sy
 8008514:	f3bf 8f4f 	dsb	sy
 8008518:	61fb      	str	r3, [r7, #28]
}
 800851a:	bf00      	nop
 800851c:	e7fe      	b.n	800851c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800851e:	f002 f993 	bl	800a848 <vPortValidateInterruptPriority>
	__asm volatile
 8008522:	f3ef 8211 	mrs	r2, BASEPRI
 8008526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800852a:	f383 8811 	msr	BASEPRI, r3
 800852e:	f3bf 8f6f 	isb	sy
 8008532:	f3bf 8f4f 	dsb	sy
 8008536:	61ba      	str	r2, [r7, #24]
 8008538:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800853a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800853c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800853e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008542:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008546:	2b00      	cmp	r3, #0
 8008548:	d02f      	beq.n	80085aa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800854a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008550:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008554:	68b9      	ldr	r1, [r7, #8]
 8008556:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008558:	f000 f8d9 	bl	800870e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800855c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800855e:	1e5a      	subs	r2, r3, #1
 8008560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008562:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008564:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800856c:	d112      	bne.n	8008594 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800856e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d016      	beq.n	80085a4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008578:	3310      	adds	r3, #16
 800857a:	4618      	mov	r0, r3
 800857c:	f000 fedc 	bl	8009338 <xTaskRemoveFromEventList>
 8008580:	4603      	mov	r3, r0
 8008582:	2b00      	cmp	r3, #0
 8008584:	d00e      	beq.n	80085a4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00b      	beq.n	80085a4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2201      	movs	r2, #1
 8008590:	601a      	str	r2, [r3, #0]
 8008592:	e007      	b.n	80085a4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008594:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008598:	3301      	adds	r3, #1
 800859a:	b2db      	uxtb	r3, r3
 800859c:	b25a      	sxtb	r2, r3
 800859e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80085a4:	2301      	movs	r3, #1
 80085a6:	637b      	str	r3, [r7, #52]	; 0x34
 80085a8:	e001      	b.n	80085ae <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80085aa:	2300      	movs	r3, #0
 80085ac:	637b      	str	r3, [r7, #52]	; 0x34
 80085ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	f383 8811 	msr	BASEPRI, r3
}
 80085b8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80085ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3738      	adds	r7, #56	; 0x38
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d10a      	bne.n	80085ec <vQueueDelete+0x28>
	__asm volatile
 80085d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085da:	f383 8811 	msr	BASEPRI, r3
 80085de:	f3bf 8f6f 	isb	sy
 80085e2:	f3bf 8f4f 	dsb	sy
 80085e6:	60bb      	str	r3, [r7, #8]
}
 80085e8:	bf00      	nop
 80085ea:	e7fe      	b.n	80085ea <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80085ec:	68f8      	ldr	r0, [r7, #12]
 80085ee:	f000 f95f 	bl	80088b0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d102      	bne.n	8008602 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80085fc:	68f8      	ldr	r0, [r7, #12]
 80085fe:	f002 fa2f 	bl	800aa60 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008602:	bf00      	nop
 8008604:	3710      	adds	r7, #16
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}

0800860a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800860a:	b480      	push	{r7}
 800860c:	b085      	sub	sp, #20
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008616:	2b00      	cmp	r3, #0
 8008618:	d006      	beq.n	8008628 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008624:	60fb      	str	r3, [r7, #12]
 8008626:	e001      	b.n	800862c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008628:	2300      	movs	r3, #0
 800862a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800862c:	68fb      	ldr	r3, [r7, #12]
	}
 800862e:	4618      	mov	r0, r3
 8008630:	3714      	adds	r7, #20
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr

0800863a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800863a:	b580      	push	{r7, lr}
 800863c:	b086      	sub	sp, #24
 800863e:	af00      	add	r7, sp, #0
 8008640:	60f8      	str	r0, [r7, #12]
 8008642:	60b9      	str	r1, [r7, #8]
 8008644:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008646:	2300      	movs	r3, #0
 8008648:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800864e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008654:	2b00      	cmp	r3, #0
 8008656:	d10d      	bne.n	8008674 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d14d      	bne.n	80086fc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	4618      	mov	r0, r3
 8008666:	f001 f921 	bl	80098ac <xTaskPriorityDisinherit>
 800866a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2200      	movs	r2, #0
 8008670:	609a      	str	r2, [r3, #8]
 8008672:	e043      	b.n	80086fc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d119      	bne.n	80086ae <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	6858      	ldr	r0, [r3, #4]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008682:	461a      	mov	r2, r3
 8008684:	68b9      	ldr	r1, [r7, #8]
 8008686:	f003 f921 	bl	800b8cc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	685a      	ldr	r2, [r3, #4]
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008692:	441a      	add	r2, r3
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	685a      	ldr	r2, [r3, #4]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d32b      	bcc.n	80086fc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	605a      	str	r2, [r3, #4]
 80086ac:	e026      	b.n	80086fc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	68d8      	ldr	r0, [r3, #12]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b6:	461a      	mov	r2, r3
 80086b8:	68b9      	ldr	r1, [r7, #8]
 80086ba:	f003 f907 	bl	800b8cc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	68da      	ldr	r2, [r3, #12]
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c6:	425b      	negs	r3, r3
 80086c8:	441a      	add	r2, r3
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	68da      	ldr	r2, [r3, #12]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d207      	bcs.n	80086ea <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	689a      	ldr	r2, [r3, #8]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e2:	425b      	negs	r3, r3
 80086e4:	441a      	add	r2, r3
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	d105      	bne.n	80086fc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d002      	beq.n	80086fc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	3b01      	subs	r3, #1
 80086fa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	1c5a      	adds	r2, r3, #1
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008704:	697b      	ldr	r3, [r7, #20]
}
 8008706:	4618      	mov	r0, r3
 8008708:	3718      	adds	r7, #24
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b082      	sub	sp, #8
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
 8008716:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800871c:	2b00      	cmp	r3, #0
 800871e:	d018      	beq.n	8008752 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	68da      	ldr	r2, [r3, #12]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008728:	441a      	add	r2, r3
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	68da      	ldr	r2, [r3, #12]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	429a      	cmp	r2, r3
 8008738:	d303      	bcc.n	8008742 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	68d9      	ldr	r1, [r3, #12]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800874a:	461a      	mov	r2, r3
 800874c:	6838      	ldr	r0, [r7, #0]
 800874e:	f003 f8bd 	bl	800b8cc <memcpy>
	}
}
 8008752:	bf00      	nop
 8008754:	3708      	adds	r7, #8
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}

0800875a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800875a:	b580      	push	{r7, lr}
 800875c:	b084      	sub	sp, #16
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008762:	f001 ff8f 	bl	800a684 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800876c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800876e:	e011      	b.n	8008794 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008774:	2b00      	cmp	r3, #0
 8008776:	d012      	beq.n	800879e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	3324      	adds	r3, #36	; 0x24
 800877c:	4618      	mov	r0, r3
 800877e:	f000 fddb 	bl	8009338 <xTaskRemoveFromEventList>
 8008782:	4603      	mov	r3, r0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d001      	beq.n	800878c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008788:	f000 ff14 	bl	80095b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800878c:	7bfb      	ldrb	r3, [r7, #15]
 800878e:	3b01      	subs	r3, #1
 8008790:	b2db      	uxtb	r3, r3
 8008792:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008794:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008798:	2b00      	cmp	r3, #0
 800879a:	dce9      	bgt.n	8008770 <prvUnlockQueue+0x16>
 800879c:	e000      	b.n	80087a0 <prvUnlockQueue+0x46>
					break;
 800879e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	22ff      	movs	r2, #255	; 0xff
 80087a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80087a8:	f001 ff9c 	bl	800a6e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80087ac:	f001 ff6a 	bl	800a684 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087b6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087b8:	e011      	b.n	80087de <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	691b      	ldr	r3, [r3, #16]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d012      	beq.n	80087e8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	3310      	adds	r3, #16
 80087c6:	4618      	mov	r0, r3
 80087c8:	f000 fdb6 	bl	8009338 <xTaskRemoveFromEventList>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d001      	beq.n	80087d6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80087d2:	f000 feef 	bl	80095b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80087d6:	7bbb      	ldrb	r3, [r7, #14]
 80087d8:	3b01      	subs	r3, #1
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	dce9      	bgt.n	80087ba <prvUnlockQueue+0x60>
 80087e6:	e000      	b.n	80087ea <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80087e8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	22ff      	movs	r2, #255	; 0xff
 80087ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80087f2:	f001 ff77 	bl	800a6e4 <vPortExitCritical>
}
 80087f6:	bf00      	nop
 80087f8:	3710      	adds	r7, #16
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}

080087fe <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80087fe:	b580      	push	{r7, lr}
 8008800:	b084      	sub	sp, #16
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008806:	f001 ff3d 	bl	800a684 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800880e:	2b00      	cmp	r3, #0
 8008810:	d102      	bne.n	8008818 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008812:	2301      	movs	r3, #1
 8008814:	60fb      	str	r3, [r7, #12]
 8008816:	e001      	b.n	800881c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008818:	2300      	movs	r3, #0
 800881a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800881c:	f001 ff62 	bl	800a6e4 <vPortExitCritical>

	return xReturn;
 8008820:	68fb      	ldr	r3, [r7, #12]
}
 8008822:	4618      	mov	r0, r3
 8008824:	3710      	adds	r7, #16
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b084      	sub	sp, #16
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008832:	f001 ff27 	bl	800a684 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800883e:	429a      	cmp	r2, r3
 8008840:	d102      	bne.n	8008848 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008842:	2301      	movs	r3, #1
 8008844:	60fb      	str	r3, [r7, #12]
 8008846:	e001      	b.n	800884c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008848:	2300      	movs	r3, #0
 800884a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800884c:	f001 ff4a 	bl	800a6e4 <vPortExitCritical>

	return xReturn;
 8008850:	68fb      	ldr	r3, [r7, #12]
}
 8008852:	4618      	mov	r0, r3
 8008854:	3710      	adds	r7, #16
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
	...

0800885c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800885c:	b480      	push	{r7}
 800885e:	b085      	sub	sp, #20
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008866:	2300      	movs	r3, #0
 8008868:	60fb      	str	r3, [r7, #12]
 800886a:	e014      	b.n	8008896 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800886c:	4a0f      	ldr	r2, [pc, #60]	; (80088ac <vQueueAddToRegistry+0x50>)
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d10b      	bne.n	8008890 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008878:	490c      	ldr	r1, [pc, #48]	; (80088ac <vQueueAddToRegistry+0x50>)
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	683a      	ldr	r2, [r7, #0]
 800887e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008882:	4a0a      	ldr	r2, [pc, #40]	; (80088ac <vQueueAddToRegistry+0x50>)
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	00db      	lsls	r3, r3, #3
 8008888:	4413      	add	r3, r2
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800888e:	e006      	b.n	800889e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	3301      	adds	r3, #1
 8008894:	60fb      	str	r3, [r7, #12]
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2b07      	cmp	r3, #7
 800889a:	d9e7      	bls.n	800886c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800889c:	bf00      	nop
 800889e:	bf00      	nop
 80088a0:	3714      	adds	r7, #20
 80088a2:	46bd      	mov	sp, r7
 80088a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a8:	4770      	bx	lr
 80088aa:	bf00      	nop
 80088ac:	200013ec 	.word	0x200013ec

080088b0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80088b0:	b480      	push	{r7}
 80088b2:	b085      	sub	sp, #20
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088b8:	2300      	movs	r3, #0
 80088ba:	60fb      	str	r3, [r7, #12]
 80088bc:	e016      	b.n	80088ec <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80088be:	4a10      	ldr	r2, [pc, #64]	; (8008900 <vQueueUnregisterQueue+0x50>)
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	00db      	lsls	r3, r3, #3
 80088c4:	4413      	add	r3, r2
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d10b      	bne.n	80088e6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80088ce:	4a0c      	ldr	r2, [pc, #48]	; (8008900 <vQueueUnregisterQueue+0x50>)
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2100      	movs	r1, #0
 80088d4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80088d8:	4a09      	ldr	r2, [pc, #36]	; (8008900 <vQueueUnregisterQueue+0x50>)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	00db      	lsls	r3, r3, #3
 80088de:	4413      	add	r3, r2
 80088e0:	2200      	movs	r2, #0
 80088e2:	605a      	str	r2, [r3, #4]
				break;
 80088e4:	e006      	b.n	80088f4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	3301      	adds	r3, #1
 80088ea:	60fb      	str	r3, [r7, #12]
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2b07      	cmp	r3, #7
 80088f0:	d9e5      	bls.n	80088be <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80088f2:	bf00      	nop
 80088f4:	bf00      	nop
 80088f6:	3714      	adds	r7, #20
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr
 8008900:	200013ec 	.word	0x200013ec

08008904 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008904:	b580      	push	{r7, lr}
 8008906:	b086      	sub	sp, #24
 8008908:	af00      	add	r7, sp, #0
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	60b9      	str	r1, [r7, #8]
 800890e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008914:	f001 feb6 	bl	800a684 <vPortEnterCritical>
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800891e:	b25b      	sxtb	r3, r3
 8008920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008924:	d103      	bne.n	800892e <vQueueWaitForMessageRestricted+0x2a>
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	2200      	movs	r2, #0
 800892a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008934:	b25b      	sxtb	r3, r3
 8008936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800893a:	d103      	bne.n	8008944 <vQueueWaitForMessageRestricted+0x40>
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	2200      	movs	r2, #0
 8008940:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008944:	f001 fece 	bl	800a6e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800894c:	2b00      	cmp	r3, #0
 800894e:	d106      	bne.n	800895e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	3324      	adds	r3, #36	; 0x24
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	68b9      	ldr	r1, [r7, #8]
 8008958:	4618      	mov	r0, r3
 800895a:	f000 fcc1 	bl	80092e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800895e:	6978      	ldr	r0, [r7, #20]
 8008960:	f7ff fefb 	bl	800875a <prvUnlockQueue>
	}
 8008964:	bf00      	nop
 8008966:	3718      	adds	r7, #24
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800896c:	b580      	push	{r7, lr}
 800896e:	b08e      	sub	sp, #56	; 0x38
 8008970:	af04      	add	r7, sp, #16
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	607a      	str	r2, [r7, #4]
 8008978:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800897a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800897c:	2b00      	cmp	r3, #0
 800897e:	d10a      	bne.n	8008996 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008984:	f383 8811 	msr	BASEPRI, r3
 8008988:	f3bf 8f6f 	isb	sy
 800898c:	f3bf 8f4f 	dsb	sy
 8008990:	623b      	str	r3, [r7, #32]
}
 8008992:	bf00      	nop
 8008994:	e7fe      	b.n	8008994 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008998:	2b00      	cmp	r3, #0
 800899a:	d10a      	bne.n	80089b2 <xTaskCreateStatic+0x46>
	__asm volatile
 800899c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a0:	f383 8811 	msr	BASEPRI, r3
 80089a4:	f3bf 8f6f 	isb	sy
 80089a8:	f3bf 8f4f 	dsb	sy
 80089ac:	61fb      	str	r3, [r7, #28]
}
 80089ae:	bf00      	nop
 80089b0:	e7fe      	b.n	80089b0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80089b2:	23c4      	movs	r3, #196	; 0xc4
 80089b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	2bc4      	cmp	r3, #196	; 0xc4
 80089ba:	d00a      	beq.n	80089d2 <xTaskCreateStatic+0x66>
	__asm volatile
 80089bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c0:	f383 8811 	msr	BASEPRI, r3
 80089c4:	f3bf 8f6f 	isb	sy
 80089c8:	f3bf 8f4f 	dsb	sy
 80089cc:	61bb      	str	r3, [r7, #24]
}
 80089ce:	bf00      	nop
 80089d0:	e7fe      	b.n	80089d0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80089d2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80089d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d01e      	beq.n	8008a18 <xTaskCreateStatic+0xac>
 80089da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d01b      	beq.n	8008a18 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80089e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80089e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089e8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80089ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ec:	2202      	movs	r2, #2
 80089ee:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80089f2:	2300      	movs	r3, #0
 80089f4:	9303      	str	r3, [sp, #12]
 80089f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f8:	9302      	str	r3, [sp, #8]
 80089fa:	f107 0314 	add.w	r3, r7, #20
 80089fe:	9301      	str	r3, [sp, #4]
 8008a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a02:	9300      	str	r3, [sp, #0]
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	68b9      	ldr	r1, [r7, #8]
 8008a0a:	68f8      	ldr	r0, [r7, #12]
 8008a0c:	f000 f850 	bl	8008ab0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a12:	f000 f8f9 	bl	8008c08 <prvAddNewTaskToReadyList>
 8008a16:	e001      	b.n	8008a1c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008a1c:	697b      	ldr	r3, [r7, #20]
	}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3728      	adds	r7, #40	; 0x28
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b08c      	sub	sp, #48	; 0x30
 8008a2a:	af04      	add	r7, sp, #16
 8008a2c:	60f8      	str	r0, [r7, #12]
 8008a2e:	60b9      	str	r1, [r7, #8]
 8008a30:	603b      	str	r3, [r7, #0]
 8008a32:	4613      	mov	r3, r2
 8008a34:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008a36:	88fb      	ldrh	r3, [r7, #6]
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f001 ff44 	bl	800a8c8 <pvPortMalloc>
 8008a40:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d00e      	beq.n	8008a66 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008a48:	20c4      	movs	r0, #196	; 0xc4
 8008a4a:	f001 ff3d 	bl	800a8c8 <pvPortMalloc>
 8008a4e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d003      	beq.n	8008a5e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	697a      	ldr	r2, [r7, #20]
 8008a5a:	631a      	str	r2, [r3, #48]	; 0x30
 8008a5c:	e005      	b.n	8008a6a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008a5e:	6978      	ldr	r0, [r7, #20]
 8008a60:	f001 fffe 	bl	800aa60 <vPortFree>
 8008a64:	e001      	b.n	8008a6a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008a66:	2300      	movs	r3, #0
 8008a68:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d017      	beq.n	8008aa0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008a70:	69fb      	ldr	r3, [r7, #28]
 8008a72:	2200      	movs	r2, #0
 8008a74:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008a78:	88fa      	ldrh	r2, [r7, #6]
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	9303      	str	r3, [sp, #12]
 8008a7e:	69fb      	ldr	r3, [r7, #28]
 8008a80:	9302      	str	r3, [sp, #8]
 8008a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a84:	9301      	str	r3, [sp, #4]
 8008a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a88:	9300      	str	r3, [sp, #0]
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	68b9      	ldr	r1, [r7, #8]
 8008a8e:	68f8      	ldr	r0, [r7, #12]
 8008a90:	f000 f80e 	bl	8008ab0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a94:	69f8      	ldr	r0, [r7, #28]
 8008a96:	f000 f8b7 	bl	8008c08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	61bb      	str	r3, [r7, #24]
 8008a9e:	e002      	b.n	8008aa6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8008aa4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008aa6:	69bb      	ldr	r3, [r7, #24]
	}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3720      	adds	r7, #32
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b088      	sub	sp, #32
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	607a      	str	r2, [r7, #4]
 8008abc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	21a5      	movs	r1, #165	; 0xa5
 8008aca:	f002 ff27 	bl	800b91c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008ad8:	3b01      	subs	r3, #1
 8008ada:	009b      	lsls	r3, r3, #2
 8008adc:	4413      	add	r3, r2
 8008ade:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008ae0:	69bb      	ldr	r3, [r7, #24]
 8008ae2:	f023 0307 	bic.w	r3, r3, #7
 8008ae6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008ae8:	69bb      	ldr	r3, [r7, #24]
 8008aea:	f003 0307 	and.w	r3, r3, #7
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00a      	beq.n	8008b08 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af6:	f383 8811 	msr	BASEPRI, r3
 8008afa:	f3bf 8f6f 	isb	sy
 8008afe:	f3bf 8f4f 	dsb	sy
 8008b02:	617b      	str	r3, [r7, #20]
}
 8008b04:	bf00      	nop
 8008b06:	e7fe      	b.n	8008b06 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8008b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0a:	69ba      	ldr	r2, [r7, #24]
 8008b0c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d01f      	beq.n	8008b54 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b14:	2300      	movs	r3, #0
 8008b16:	61fb      	str	r3, [r7, #28]
 8008b18:	e012      	b.n	8008b40 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008b1a:	68ba      	ldr	r2, [r7, #8]
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	4413      	add	r3, r2
 8008b20:	7819      	ldrb	r1, [r3, #0]
 8008b22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	4413      	add	r3, r2
 8008b28:	3334      	adds	r3, #52	; 0x34
 8008b2a:	460a      	mov	r2, r1
 8008b2c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008b2e:	68ba      	ldr	r2, [r7, #8]
 8008b30:	69fb      	ldr	r3, [r7, #28]
 8008b32:	4413      	add	r3, r2
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d006      	beq.n	8008b48 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b3a:	69fb      	ldr	r3, [r7, #28]
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	61fb      	str	r3, [r7, #28]
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	2b0f      	cmp	r3, #15
 8008b44:	d9e9      	bls.n	8008b1a <prvInitialiseNewTask+0x6a>
 8008b46:	e000      	b.n	8008b4a <prvInitialiseNewTask+0x9a>
			{
				break;
 8008b48:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b52:	e003      	b.n	8008b5c <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b56:	2200      	movs	r2, #0
 8008b58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b5e:	2b37      	cmp	r3, #55	; 0x37
 8008b60:	d901      	bls.n	8008b66 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008b62:	2337      	movs	r3, #55	; 0x37
 8008b64:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b6a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b70:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8008b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b74:	2200      	movs	r2, #0
 8008b76:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b7a:	3304      	adds	r3, #4
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f7fe fe93 	bl	80078a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b84:	3318      	adds	r3, #24
 8008b86:	4618      	mov	r0, r3
 8008b88:	f7fe fe8e 	bl	80078a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b90:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b94:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ba0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8008ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008baa:	2200      	movs	r2, #0
 8008bac:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bba:	335c      	adds	r3, #92	; 0x5c
 8008bbc:	2260      	movs	r2, #96	; 0x60
 8008bbe:	2100      	movs	r1, #0
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f002 feab 	bl	800b91c <memset>
 8008bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc8:	4a0c      	ldr	r2, [pc, #48]	; (8008bfc <prvInitialiseNewTask+0x14c>)
 8008bca:	661a      	str	r2, [r3, #96]	; 0x60
 8008bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bce:	4a0c      	ldr	r2, [pc, #48]	; (8008c00 <prvInitialiseNewTask+0x150>)
 8008bd0:	665a      	str	r2, [r3, #100]	; 0x64
 8008bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd4:	4a0b      	ldr	r2, [pc, #44]	; (8008c04 <prvInitialiseNewTask+0x154>)
 8008bd6:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008bd8:	683a      	ldr	r2, [r7, #0]
 8008bda:	68f9      	ldr	r1, [r7, #12]
 8008bdc:	69b8      	ldr	r0, [r7, #24]
 8008bde:	f001 fc27 	bl	800a430 <pxPortInitialiseStack>
 8008be2:	4602      	mov	r2, r0
 8008be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d002      	beq.n	8008bf4 <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bf2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008bf4:	bf00      	nop
 8008bf6:	3720      	adds	r7, #32
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	0800ed60 	.word	0x0800ed60
 8008c00:	0800ed80 	.word	0x0800ed80
 8008c04:	0800ed40 	.word	0x0800ed40

08008c08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008c10:	f001 fd38 	bl	800a684 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008c14:	4b2d      	ldr	r3, [pc, #180]	; (8008ccc <prvAddNewTaskToReadyList+0xc4>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	3301      	adds	r3, #1
 8008c1a:	4a2c      	ldr	r2, [pc, #176]	; (8008ccc <prvAddNewTaskToReadyList+0xc4>)
 8008c1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008c1e:	4b2c      	ldr	r3, [pc, #176]	; (8008cd0 <prvAddNewTaskToReadyList+0xc8>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d109      	bne.n	8008c3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008c26:	4a2a      	ldr	r2, [pc, #168]	; (8008cd0 <prvAddNewTaskToReadyList+0xc8>)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008c2c:	4b27      	ldr	r3, [pc, #156]	; (8008ccc <prvAddNewTaskToReadyList+0xc4>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d110      	bne.n	8008c56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008c34:	f000 fce2 	bl	80095fc <prvInitialiseTaskLists>
 8008c38:	e00d      	b.n	8008c56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008c3a:	4b26      	ldr	r3, [pc, #152]	; (8008cd4 <prvAddNewTaskToReadyList+0xcc>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d109      	bne.n	8008c56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008c42:	4b23      	ldr	r3, [pc, #140]	; (8008cd0 <prvAddNewTaskToReadyList+0xc8>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d802      	bhi.n	8008c56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008c50:	4a1f      	ldr	r2, [pc, #124]	; (8008cd0 <prvAddNewTaskToReadyList+0xc8>)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008c56:	4b20      	ldr	r3, [pc, #128]	; (8008cd8 <prvAddNewTaskToReadyList+0xd0>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	4a1e      	ldr	r2, [pc, #120]	; (8008cd8 <prvAddNewTaskToReadyList+0xd0>)
 8008c5e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008c60:	4b1d      	ldr	r3, [pc, #116]	; (8008cd8 <prvAddNewTaskToReadyList+0xd0>)
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c6c:	4b1b      	ldr	r3, [pc, #108]	; (8008cdc <prvAddNewTaskToReadyList+0xd4>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d903      	bls.n	8008c7c <prvAddNewTaskToReadyList+0x74>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c78:	4a18      	ldr	r2, [pc, #96]	; (8008cdc <prvAddNewTaskToReadyList+0xd4>)
 8008c7a:	6013      	str	r3, [r2, #0]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c80:	4613      	mov	r3, r2
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	4413      	add	r3, r2
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	4a15      	ldr	r2, [pc, #84]	; (8008ce0 <prvAddNewTaskToReadyList+0xd8>)
 8008c8a:	441a      	add	r2, r3
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	3304      	adds	r3, #4
 8008c90:	4619      	mov	r1, r3
 8008c92:	4610      	mov	r0, r2
 8008c94:	f7fe fe15 	bl	80078c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008c98:	f001 fd24 	bl	800a6e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008c9c:	4b0d      	ldr	r3, [pc, #52]	; (8008cd4 <prvAddNewTaskToReadyList+0xcc>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d00e      	beq.n	8008cc2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008ca4:	4b0a      	ldr	r3, [pc, #40]	; (8008cd0 <prvAddNewTaskToReadyList+0xc8>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d207      	bcs.n	8008cc2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008cb2:	4b0c      	ldr	r3, [pc, #48]	; (8008ce4 <prvAddNewTaskToReadyList+0xdc>)
 8008cb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cb8:	601a      	str	r2, [r3, #0]
 8008cba:	f3bf 8f4f 	dsb	sy
 8008cbe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cc2:	bf00      	nop
 8008cc4:	3708      	adds	r7, #8
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
 8008cca:	bf00      	nop
 8008ccc:	20001900 	.word	0x20001900
 8008cd0:	2000142c 	.word	0x2000142c
 8008cd4:	2000190c 	.word	0x2000190c
 8008cd8:	2000191c 	.word	0x2000191c
 8008cdc:	20001908 	.word	0x20001908
 8008ce0:	20001430 	.word	0x20001430
 8008ce4:	e000ed04 	.word	0xe000ed04

08008ce8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d017      	beq.n	8008d2a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008cfa:	4b13      	ldr	r3, [pc, #76]	; (8008d48 <vTaskDelay+0x60>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d00a      	beq.n	8008d18 <vTaskDelay+0x30>
	__asm volatile
 8008d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d06:	f383 8811 	msr	BASEPRI, r3
 8008d0a:	f3bf 8f6f 	isb	sy
 8008d0e:	f3bf 8f4f 	dsb	sy
 8008d12:	60bb      	str	r3, [r7, #8]
}
 8008d14:	bf00      	nop
 8008d16:	e7fe      	b.n	8008d16 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008d18:	f000 f88c 	bl	8008e34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008d1c:	2100      	movs	r1, #0
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 fee0 	bl	8009ae4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008d24:	f000 f894 	bl	8008e50 <xTaskResumeAll>
 8008d28:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d107      	bne.n	8008d40 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008d30:	4b06      	ldr	r3, [pc, #24]	; (8008d4c <vTaskDelay+0x64>)
 8008d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d36:	601a      	str	r2, [r3, #0]
 8008d38:	f3bf 8f4f 	dsb	sy
 8008d3c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008d40:	bf00      	nop
 8008d42:	3710      	adds	r7, #16
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}
 8008d48:	20001928 	.word	0x20001928
 8008d4c:	e000ed04 	.word	0xe000ed04

08008d50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b08a      	sub	sp, #40	; 0x28
 8008d54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008d56:	2300      	movs	r3, #0
 8008d58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008d5e:	463a      	mov	r2, r7
 8008d60:	1d39      	adds	r1, r7, #4
 8008d62:	f107 0308 	add.w	r3, r7, #8
 8008d66:	4618      	mov	r0, r3
 8008d68:	f7fe faaa 	bl	80072c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008d6c:	6839      	ldr	r1, [r7, #0]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	68ba      	ldr	r2, [r7, #8]
 8008d72:	9202      	str	r2, [sp, #8]
 8008d74:	9301      	str	r3, [sp, #4]
 8008d76:	2300      	movs	r3, #0
 8008d78:	9300      	str	r3, [sp, #0]
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	460a      	mov	r2, r1
 8008d7e:	4925      	ldr	r1, [pc, #148]	; (8008e14 <vTaskStartScheduler+0xc4>)
 8008d80:	4825      	ldr	r0, [pc, #148]	; (8008e18 <vTaskStartScheduler+0xc8>)
 8008d82:	f7ff fdf3 	bl	800896c <xTaskCreateStatic>
 8008d86:	4603      	mov	r3, r0
 8008d88:	4a24      	ldr	r2, [pc, #144]	; (8008e1c <vTaskStartScheduler+0xcc>)
 8008d8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008d8c:	4b23      	ldr	r3, [pc, #140]	; (8008e1c <vTaskStartScheduler+0xcc>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d002      	beq.n	8008d9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008d94:	2301      	movs	r3, #1
 8008d96:	617b      	str	r3, [r7, #20]
 8008d98:	e001      	b.n	8008d9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d102      	bne.n	8008daa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008da4:	f000 fef2 	bl	8009b8c <xTimerCreateTimerTask>
 8008da8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d11d      	bne.n	8008dec <vTaskStartScheduler+0x9c>
	__asm volatile
 8008db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db4:	f383 8811 	msr	BASEPRI, r3
 8008db8:	f3bf 8f6f 	isb	sy
 8008dbc:	f3bf 8f4f 	dsb	sy
 8008dc0:	613b      	str	r3, [r7, #16]
}
 8008dc2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008dc4:	4b16      	ldr	r3, [pc, #88]	; (8008e20 <vTaskStartScheduler+0xd0>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	335c      	adds	r3, #92	; 0x5c
 8008dca:	4a16      	ldr	r2, [pc, #88]	; (8008e24 <vTaskStartScheduler+0xd4>)
 8008dcc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008dce:	4b16      	ldr	r3, [pc, #88]	; (8008e28 <vTaskStartScheduler+0xd8>)
 8008dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8008dd4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008dd6:	4b15      	ldr	r3, [pc, #84]	; (8008e2c <vTaskStartScheduler+0xdc>)
 8008dd8:	2201      	movs	r2, #1
 8008dda:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008ddc:	4b14      	ldr	r3, [pc, #80]	; (8008e30 <vTaskStartScheduler+0xe0>)
 8008dde:	2200      	movs	r2, #0
 8008de0:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8008de2:	f7fb f973 	bl	80040cc <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008de6:	f001 fbab 	bl	800a540 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008dea:	e00e      	b.n	8008e0a <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008df2:	d10a      	bne.n	8008e0a <vTaskStartScheduler+0xba>
	__asm volatile
 8008df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df8:	f383 8811 	msr	BASEPRI, r3
 8008dfc:	f3bf 8f6f 	isb	sy
 8008e00:	f3bf 8f4f 	dsb	sy
 8008e04:	60fb      	str	r3, [r7, #12]
}
 8008e06:	bf00      	nop
 8008e08:	e7fe      	b.n	8008e08 <vTaskStartScheduler+0xb8>
}
 8008e0a:	bf00      	nop
 8008e0c:	3718      	adds	r7, #24
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	0800e8f0 	.word	0x0800e8f0
 8008e18:	080095cd 	.word	0x080095cd
 8008e1c:	20001924 	.word	0x20001924
 8008e20:	2000142c 	.word	0x2000142c
 8008e24:	200001f4 	.word	0x200001f4
 8008e28:	20001920 	.word	0x20001920
 8008e2c:	2000190c 	.word	0x2000190c
 8008e30:	20001904 	.word	0x20001904

08008e34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008e34:	b480      	push	{r7}
 8008e36:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008e38:	4b04      	ldr	r3, [pc, #16]	; (8008e4c <vTaskSuspendAll+0x18>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	4a03      	ldr	r2, [pc, #12]	; (8008e4c <vTaskSuspendAll+0x18>)
 8008e40:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008e42:	bf00      	nop
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr
 8008e4c:	20001928 	.word	0x20001928

08008e50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008e56:	2300      	movs	r3, #0
 8008e58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008e5e:	4b42      	ldr	r3, [pc, #264]	; (8008f68 <xTaskResumeAll+0x118>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d10a      	bne.n	8008e7c <xTaskResumeAll+0x2c>
	__asm volatile
 8008e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e6a:	f383 8811 	msr	BASEPRI, r3
 8008e6e:	f3bf 8f6f 	isb	sy
 8008e72:	f3bf 8f4f 	dsb	sy
 8008e76:	603b      	str	r3, [r7, #0]
}
 8008e78:	bf00      	nop
 8008e7a:	e7fe      	b.n	8008e7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008e7c:	f001 fc02 	bl	800a684 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008e80:	4b39      	ldr	r3, [pc, #228]	; (8008f68 <xTaskResumeAll+0x118>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	3b01      	subs	r3, #1
 8008e86:	4a38      	ldr	r2, [pc, #224]	; (8008f68 <xTaskResumeAll+0x118>)
 8008e88:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e8a:	4b37      	ldr	r3, [pc, #220]	; (8008f68 <xTaskResumeAll+0x118>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d162      	bne.n	8008f58 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008e92:	4b36      	ldr	r3, [pc, #216]	; (8008f6c <xTaskResumeAll+0x11c>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d05e      	beq.n	8008f58 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e9a:	e02f      	b.n	8008efc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e9c:	4b34      	ldr	r3, [pc, #208]	; (8008f70 <xTaskResumeAll+0x120>)
 8008e9e:	68db      	ldr	r3, [r3, #12]
 8008ea0:	68db      	ldr	r3, [r3, #12]
 8008ea2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	3318      	adds	r3, #24
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f7fe fd67 	bl	800797c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	3304      	adds	r3, #4
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7fe fd62 	bl	800797c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ebc:	4b2d      	ldr	r3, [pc, #180]	; (8008f74 <xTaskResumeAll+0x124>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d903      	bls.n	8008ecc <xTaskResumeAll+0x7c>
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec8:	4a2a      	ldr	r2, [pc, #168]	; (8008f74 <xTaskResumeAll+0x124>)
 8008eca:	6013      	str	r3, [r2, #0]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ed0:	4613      	mov	r3, r2
 8008ed2:	009b      	lsls	r3, r3, #2
 8008ed4:	4413      	add	r3, r2
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	4a27      	ldr	r2, [pc, #156]	; (8008f78 <xTaskResumeAll+0x128>)
 8008eda:	441a      	add	r2, r3
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	3304      	adds	r3, #4
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	4610      	mov	r0, r2
 8008ee4:	f7fe fced 	bl	80078c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eec:	4b23      	ldr	r3, [pc, #140]	; (8008f7c <xTaskResumeAll+0x12c>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d302      	bcc.n	8008efc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008ef6:	4b22      	ldr	r3, [pc, #136]	; (8008f80 <xTaskResumeAll+0x130>)
 8008ef8:	2201      	movs	r2, #1
 8008efa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008efc:	4b1c      	ldr	r3, [pc, #112]	; (8008f70 <xTaskResumeAll+0x120>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d1cb      	bne.n	8008e9c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d001      	beq.n	8008f0e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008f0a:	f000 fc19 	bl	8009740 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008f0e:	4b1d      	ldr	r3, [pc, #116]	; (8008f84 <xTaskResumeAll+0x134>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d010      	beq.n	8008f3c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008f1a:	f000 f847 	bl	8008fac <xTaskIncrementTick>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d002      	beq.n	8008f2a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008f24:	4b16      	ldr	r3, [pc, #88]	; (8008f80 <xTaskResumeAll+0x130>)
 8008f26:	2201      	movs	r2, #1
 8008f28:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	3b01      	subs	r3, #1
 8008f2e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d1f1      	bne.n	8008f1a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008f36:	4b13      	ldr	r3, [pc, #76]	; (8008f84 <xTaskResumeAll+0x134>)
 8008f38:	2200      	movs	r2, #0
 8008f3a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008f3c:	4b10      	ldr	r3, [pc, #64]	; (8008f80 <xTaskResumeAll+0x130>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d009      	beq.n	8008f58 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008f44:	2301      	movs	r3, #1
 8008f46:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008f48:	4b0f      	ldr	r3, [pc, #60]	; (8008f88 <xTaskResumeAll+0x138>)
 8008f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f4e:	601a      	str	r2, [r3, #0]
 8008f50:	f3bf 8f4f 	dsb	sy
 8008f54:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f58:	f001 fbc4 	bl	800a6e4 <vPortExitCritical>

	return xAlreadyYielded;
 8008f5c:	68bb      	ldr	r3, [r7, #8]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3710      	adds	r7, #16
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
 8008f68:	20001928 	.word	0x20001928
 8008f6c:	20001900 	.word	0x20001900
 8008f70:	200018c0 	.word	0x200018c0
 8008f74:	20001908 	.word	0x20001908
 8008f78:	20001430 	.word	0x20001430
 8008f7c:	2000142c 	.word	0x2000142c
 8008f80:	20001914 	.word	0x20001914
 8008f84:	20001910 	.word	0x20001910
 8008f88:	e000ed04 	.word	0xe000ed04

08008f8c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008f92:	4b05      	ldr	r3, [pc, #20]	; (8008fa8 <xTaskGetTickCount+0x1c>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008f98:	687b      	ldr	r3, [r7, #4]
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	370c      	adds	r7, #12
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa4:	4770      	bx	lr
 8008fa6:	bf00      	nop
 8008fa8:	20001904 	.word	0x20001904

08008fac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b086      	sub	sp, #24
 8008fb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fb6:	4b4f      	ldr	r3, [pc, #316]	; (80090f4 <xTaskIncrementTick+0x148>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	f040 808f 	bne.w	80090de <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008fc0:	4b4d      	ldr	r3, [pc, #308]	; (80090f8 <xTaskIncrementTick+0x14c>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008fc8:	4a4b      	ldr	r2, [pc, #300]	; (80090f8 <xTaskIncrementTick+0x14c>)
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d120      	bne.n	8009016 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008fd4:	4b49      	ldr	r3, [pc, #292]	; (80090fc <xTaskIncrementTick+0x150>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00a      	beq.n	8008ff4 <xTaskIncrementTick+0x48>
	__asm volatile
 8008fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe2:	f383 8811 	msr	BASEPRI, r3
 8008fe6:	f3bf 8f6f 	isb	sy
 8008fea:	f3bf 8f4f 	dsb	sy
 8008fee:	603b      	str	r3, [r7, #0]
}
 8008ff0:	bf00      	nop
 8008ff2:	e7fe      	b.n	8008ff2 <xTaskIncrementTick+0x46>
 8008ff4:	4b41      	ldr	r3, [pc, #260]	; (80090fc <xTaskIncrementTick+0x150>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	60fb      	str	r3, [r7, #12]
 8008ffa:	4b41      	ldr	r3, [pc, #260]	; (8009100 <xTaskIncrementTick+0x154>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a3f      	ldr	r2, [pc, #252]	; (80090fc <xTaskIncrementTick+0x150>)
 8009000:	6013      	str	r3, [r2, #0]
 8009002:	4a3f      	ldr	r2, [pc, #252]	; (8009100 <xTaskIncrementTick+0x154>)
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	6013      	str	r3, [r2, #0]
 8009008:	4b3e      	ldr	r3, [pc, #248]	; (8009104 <xTaskIncrementTick+0x158>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	3301      	adds	r3, #1
 800900e:	4a3d      	ldr	r2, [pc, #244]	; (8009104 <xTaskIncrementTick+0x158>)
 8009010:	6013      	str	r3, [r2, #0]
 8009012:	f000 fb95 	bl	8009740 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009016:	4b3c      	ldr	r3, [pc, #240]	; (8009108 <xTaskIncrementTick+0x15c>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	693a      	ldr	r2, [r7, #16]
 800901c:	429a      	cmp	r2, r3
 800901e:	d349      	bcc.n	80090b4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009020:	4b36      	ldr	r3, [pc, #216]	; (80090fc <xTaskIncrementTick+0x150>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d104      	bne.n	8009034 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800902a:	4b37      	ldr	r3, [pc, #220]	; (8009108 <xTaskIncrementTick+0x15c>)
 800902c:	f04f 32ff 	mov.w	r2, #4294967295
 8009030:	601a      	str	r2, [r3, #0]
					break;
 8009032:	e03f      	b.n	80090b4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009034:	4b31      	ldr	r3, [pc, #196]	; (80090fc <xTaskIncrementTick+0x150>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	68db      	ldr	r3, [r3, #12]
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009044:	693a      	ldr	r2, [r7, #16]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	429a      	cmp	r2, r3
 800904a:	d203      	bcs.n	8009054 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800904c:	4a2e      	ldr	r2, [pc, #184]	; (8009108 <xTaskIncrementTick+0x15c>)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009052:	e02f      	b.n	80090b4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	3304      	adds	r3, #4
 8009058:	4618      	mov	r0, r3
 800905a:	f7fe fc8f 	bl	800797c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009062:	2b00      	cmp	r3, #0
 8009064:	d004      	beq.n	8009070 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	3318      	adds	r3, #24
 800906a:	4618      	mov	r0, r3
 800906c:	f7fe fc86 	bl	800797c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009074:	4b25      	ldr	r3, [pc, #148]	; (800910c <xTaskIncrementTick+0x160>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	429a      	cmp	r2, r3
 800907a:	d903      	bls.n	8009084 <xTaskIncrementTick+0xd8>
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009080:	4a22      	ldr	r2, [pc, #136]	; (800910c <xTaskIncrementTick+0x160>)
 8009082:	6013      	str	r3, [r2, #0]
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009088:	4613      	mov	r3, r2
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	4413      	add	r3, r2
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	4a1f      	ldr	r2, [pc, #124]	; (8009110 <xTaskIncrementTick+0x164>)
 8009092:	441a      	add	r2, r3
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	3304      	adds	r3, #4
 8009098:	4619      	mov	r1, r3
 800909a:	4610      	mov	r0, r2
 800909c:	f7fe fc11 	bl	80078c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090a4:	4b1b      	ldr	r3, [pc, #108]	; (8009114 <xTaskIncrementTick+0x168>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d3b8      	bcc.n	8009020 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80090ae:	2301      	movs	r3, #1
 80090b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090b2:	e7b5      	b.n	8009020 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80090b4:	4b17      	ldr	r3, [pc, #92]	; (8009114 <xTaskIncrementTick+0x168>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090ba:	4915      	ldr	r1, [pc, #84]	; (8009110 <xTaskIncrementTick+0x164>)
 80090bc:	4613      	mov	r3, r2
 80090be:	009b      	lsls	r3, r3, #2
 80090c0:	4413      	add	r3, r2
 80090c2:	009b      	lsls	r3, r3, #2
 80090c4:	440b      	add	r3, r1
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d901      	bls.n	80090d0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80090cc:	2301      	movs	r3, #1
 80090ce:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80090d0:	4b11      	ldr	r3, [pc, #68]	; (8009118 <xTaskIncrementTick+0x16c>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d007      	beq.n	80090e8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80090d8:	2301      	movs	r3, #1
 80090da:	617b      	str	r3, [r7, #20]
 80090dc:	e004      	b.n	80090e8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80090de:	4b0f      	ldr	r3, [pc, #60]	; (800911c <xTaskIncrementTick+0x170>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	3301      	adds	r3, #1
 80090e4:	4a0d      	ldr	r2, [pc, #52]	; (800911c <xTaskIncrementTick+0x170>)
 80090e6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80090e8:	697b      	ldr	r3, [r7, #20]
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3718      	adds	r7, #24
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}
 80090f2:	bf00      	nop
 80090f4:	20001928 	.word	0x20001928
 80090f8:	20001904 	.word	0x20001904
 80090fc:	200018b8 	.word	0x200018b8
 8009100:	200018bc 	.word	0x200018bc
 8009104:	20001918 	.word	0x20001918
 8009108:	20001920 	.word	0x20001920
 800910c:	20001908 	.word	0x20001908
 8009110:	20001430 	.word	0x20001430
 8009114:	2000142c 	.word	0x2000142c
 8009118:	20001914 	.word	0x20001914
 800911c:	20001910 	.word	0x20001910

08009120 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009126:	4b36      	ldr	r3, [pc, #216]	; (8009200 <vTaskSwitchContext+0xe0>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d003      	beq.n	8009136 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800912e:	4b35      	ldr	r3, [pc, #212]	; (8009204 <vTaskSwitchContext+0xe4>)
 8009130:	2201      	movs	r2, #1
 8009132:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009134:	e060      	b.n	80091f8 <vTaskSwitchContext+0xd8>
		xYieldPending = pdFALSE;
 8009136:	4b33      	ldr	r3, [pc, #204]	; (8009204 <vTaskSwitchContext+0xe4>)
 8009138:	2200      	movs	r2, #0
 800913a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800913c:	f7fa ffd8 	bl	80040f0 <getRunTimeCounterValue>
 8009140:	4603      	mov	r3, r0
 8009142:	461a      	mov	r2, r3
 8009144:	4b30      	ldr	r3, [pc, #192]	; (8009208 <vTaskSwitchContext+0xe8>)
 8009146:	601a      	str	r2, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8009148:	4b2f      	ldr	r3, [pc, #188]	; (8009208 <vTaskSwitchContext+0xe8>)
 800914a:	681a      	ldr	r2, [r3, #0]
 800914c:	4b2f      	ldr	r3, [pc, #188]	; (800920c <vTaskSwitchContext+0xec>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	429a      	cmp	r2, r3
 8009152:	d909      	bls.n	8009168 <vTaskSwitchContext+0x48>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8009154:	4b2e      	ldr	r3, [pc, #184]	; (8009210 <vTaskSwitchContext+0xf0>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800915a:	4a2b      	ldr	r2, [pc, #172]	; (8009208 <vTaskSwitchContext+0xe8>)
 800915c:	6810      	ldr	r0, [r2, #0]
 800915e:	4a2b      	ldr	r2, [pc, #172]	; (800920c <vTaskSwitchContext+0xec>)
 8009160:	6812      	ldr	r2, [r2, #0]
 8009162:	1a82      	subs	r2, r0, r2
 8009164:	440a      	add	r2, r1
 8009166:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8009168:	4b27      	ldr	r3, [pc, #156]	; (8009208 <vTaskSwitchContext+0xe8>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a27      	ldr	r2, [pc, #156]	; (800920c <vTaskSwitchContext+0xec>)
 800916e:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009170:	4b28      	ldr	r3, [pc, #160]	; (8009214 <vTaskSwitchContext+0xf4>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	60fb      	str	r3, [r7, #12]
 8009176:	e010      	b.n	800919a <vTaskSwitchContext+0x7a>
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d10a      	bne.n	8009194 <vTaskSwitchContext+0x74>
	__asm volatile
 800917e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009182:	f383 8811 	msr	BASEPRI, r3
 8009186:	f3bf 8f6f 	isb	sy
 800918a:	f3bf 8f4f 	dsb	sy
 800918e:	607b      	str	r3, [r7, #4]
}
 8009190:	bf00      	nop
 8009192:	e7fe      	b.n	8009192 <vTaskSwitchContext+0x72>
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	3b01      	subs	r3, #1
 8009198:	60fb      	str	r3, [r7, #12]
 800919a:	491f      	ldr	r1, [pc, #124]	; (8009218 <vTaskSwitchContext+0xf8>)
 800919c:	68fa      	ldr	r2, [r7, #12]
 800919e:	4613      	mov	r3, r2
 80091a0:	009b      	lsls	r3, r3, #2
 80091a2:	4413      	add	r3, r2
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	440b      	add	r3, r1
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d0e4      	beq.n	8009178 <vTaskSwitchContext+0x58>
 80091ae:	68fa      	ldr	r2, [r7, #12]
 80091b0:	4613      	mov	r3, r2
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	4413      	add	r3, r2
 80091b6:	009b      	lsls	r3, r3, #2
 80091b8:	4a17      	ldr	r2, [pc, #92]	; (8009218 <vTaskSwitchContext+0xf8>)
 80091ba:	4413      	add	r3, r2
 80091bc:	60bb      	str	r3, [r7, #8]
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	685a      	ldr	r2, [r3, #4]
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	605a      	str	r2, [r3, #4]
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	685a      	ldr	r2, [r3, #4]
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	3308      	adds	r3, #8
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d104      	bne.n	80091de <vTaskSwitchContext+0xbe>
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	685a      	ldr	r2, [r3, #4]
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	605a      	str	r2, [r3, #4]
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	68db      	ldr	r3, [r3, #12]
 80091e4:	4a0a      	ldr	r2, [pc, #40]	; (8009210 <vTaskSwitchContext+0xf0>)
 80091e6:	6013      	str	r3, [r2, #0]
 80091e8:	4a0a      	ldr	r2, [pc, #40]	; (8009214 <vTaskSwitchContext+0xf4>)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80091ee:	4b08      	ldr	r3, [pc, #32]	; (8009210 <vTaskSwitchContext+0xf0>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	335c      	adds	r3, #92	; 0x5c
 80091f4:	4a09      	ldr	r2, [pc, #36]	; (800921c <vTaskSwitchContext+0xfc>)
 80091f6:	6013      	str	r3, [r2, #0]
}
 80091f8:	bf00      	nop
 80091fa:	3710      	adds	r7, #16
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	20001928 	.word	0x20001928
 8009204:	20001914 	.word	0x20001914
 8009208:	20001930 	.word	0x20001930
 800920c:	2000192c 	.word	0x2000192c
 8009210:	2000142c 	.word	0x2000142c
 8009214:	20001908 	.word	0x20001908
 8009218:	20001430 	.word	0x20001430
 800921c:	200001f4 	.word	0x200001f4

08009220 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d10a      	bne.n	8009246 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009234:	f383 8811 	msr	BASEPRI, r3
 8009238:	f3bf 8f6f 	isb	sy
 800923c:	f3bf 8f4f 	dsb	sy
 8009240:	60fb      	str	r3, [r7, #12]
}
 8009242:	bf00      	nop
 8009244:	e7fe      	b.n	8009244 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009246:	4b07      	ldr	r3, [pc, #28]	; (8009264 <vTaskPlaceOnEventList+0x44>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	3318      	adds	r3, #24
 800924c:	4619      	mov	r1, r3
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f7fe fb5b 	bl	800790a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009254:	2101      	movs	r1, #1
 8009256:	6838      	ldr	r0, [r7, #0]
 8009258:	f000 fc44 	bl	8009ae4 <prvAddCurrentTaskToDelayedList>
}
 800925c:	bf00      	nop
 800925e:	3710      	adds	r7, #16
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}
 8009264:	2000142c 	.word	0x2000142c

08009268 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b086      	sub	sp, #24
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d10a      	bne.n	8009290 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800927a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800927e:	f383 8811 	msr	BASEPRI, r3
 8009282:	f3bf 8f6f 	isb	sy
 8009286:	f3bf 8f4f 	dsb	sy
 800928a:	617b      	str	r3, [r7, #20]
}
 800928c:	bf00      	nop
 800928e:	e7fe      	b.n	800928e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8009290:	4b11      	ldr	r3, [pc, #68]	; (80092d8 <vTaskPlaceOnUnorderedEventList+0x70>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d10a      	bne.n	80092ae <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8009298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800929c:	f383 8811 	msr	BASEPRI, r3
 80092a0:	f3bf 8f6f 	isb	sy
 80092a4:	f3bf 8f4f 	dsb	sy
 80092a8:	613b      	str	r3, [r7, #16]
}
 80092aa:	bf00      	nop
 80092ac:	e7fe      	b.n	80092ac <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80092ae:	4b0b      	ldr	r3, [pc, #44]	; (80092dc <vTaskPlaceOnUnorderedEventList+0x74>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	68ba      	ldr	r2, [r7, #8]
 80092b4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80092b8:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80092ba:	4b08      	ldr	r3, [pc, #32]	; (80092dc <vTaskPlaceOnUnorderedEventList+0x74>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	3318      	adds	r3, #24
 80092c0:	4619      	mov	r1, r3
 80092c2:	68f8      	ldr	r0, [r7, #12]
 80092c4:	f7fe fafd 	bl	80078c2 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80092c8:	2101      	movs	r1, #1
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 fc0a 	bl	8009ae4 <prvAddCurrentTaskToDelayedList>
}
 80092d0:	bf00      	nop
 80092d2:	3718      	adds	r7, #24
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}
 80092d8:	20001928 	.word	0x20001928
 80092dc:	2000142c 	.word	0x2000142c

080092e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b086      	sub	sp, #24
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	60f8      	str	r0, [r7, #12]
 80092e8:	60b9      	str	r1, [r7, #8]
 80092ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d10a      	bne.n	8009308 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80092f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f6:	f383 8811 	msr	BASEPRI, r3
 80092fa:	f3bf 8f6f 	isb	sy
 80092fe:	f3bf 8f4f 	dsb	sy
 8009302:	617b      	str	r3, [r7, #20]
}
 8009304:	bf00      	nop
 8009306:	e7fe      	b.n	8009306 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009308:	4b0a      	ldr	r3, [pc, #40]	; (8009334 <vTaskPlaceOnEventListRestricted+0x54>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	3318      	adds	r3, #24
 800930e:	4619      	mov	r1, r3
 8009310:	68f8      	ldr	r0, [r7, #12]
 8009312:	f7fe fad6 	bl	80078c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d002      	beq.n	8009322 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800931c:	f04f 33ff 	mov.w	r3, #4294967295
 8009320:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009322:	6879      	ldr	r1, [r7, #4]
 8009324:	68b8      	ldr	r0, [r7, #8]
 8009326:	f000 fbdd 	bl	8009ae4 <prvAddCurrentTaskToDelayedList>
	}
 800932a:	bf00      	nop
 800932c:	3718      	adds	r7, #24
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	2000142c 	.word	0x2000142c

08009338 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b086      	sub	sp, #24
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	68db      	ldr	r3, [r3, #12]
 8009344:	68db      	ldr	r3, [r3, #12]
 8009346:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d10a      	bne.n	8009364 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800934e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009352:	f383 8811 	msr	BASEPRI, r3
 8009356:	f3bf 8f6f 	isb	sy
 800935a:	f3bf 8f4f 	dsb	sy
 800935e:	60fb      	str	r3, [r7, #12]
}
 8009360:	bf00      	nop
 8009362:	e7fe      	b.n	8009362 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	3318      	adds	r3, #24
 8009368:	4618      	mov	r0, r3
 800936a:	f7fe fb07 	bl	800797c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800936e:	4b1e      	ldr	r3, [pc, #120]	; (80093e8 <xTaskRemoveFromEventList+0xb0>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d11d      	bne.n	80093b2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	3304      	adds	r3, #4
 800937a:	4618      	mov	r0, r3
 800937c:	f7fe fafe 	bl	800797c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009384:	4b19      	ldr	r3, [pc, #100]	; (80093ec <xTaskRemoveFromEventList+0xb4>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	429a      	cmp	r2, r3
 800938a:	d903      	bls.n	8009394 <xTaskRemoveFromEventList+0x5c>
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009390:	4a16      	ldr	r2, [pc, #88]	; (80093ec <xTaskRemoveFromEventList+0xb4>)
 8009392:	6013      	str	r3, [r2, #0]
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009398:	4613      	mov	r3, r2
 800939a:	009b      	lsls	r3, r3, #2
 800939c:	4413      	add	r3, r2
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	4a13      	ldr	r2, [pc, #76]	; (80093f0 <xTaskRemoveFromEventList+0xb8>)
 80093a2:	441a      	add	r2, r3
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	3304      	adds	r3, #4
 80093a8:	4619      	mov	r1, r3
 80093aa:	4610      	mov	r0, r2
 80093ac:	f7fe fa89 	bl	80078c2 <vListInsertEnd>
 80093b0:	e005      	b.n	80093be <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	3318      	adds	r3, #24
 80093b6:	4619      	mov	r1, r3
 80093b8:	480e      	ldr	r0, [pc, #56]	; (80093f4 <xTaskRemoveFromEventList+0xbc>)
 80093ba:	f7fe fa82 	bl	80078c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093c2:	4b0d      	ldr	r3, [pc, #52]	; (80093f8 <xTaskRemoveFromEventList+0xc0>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d905      	bls.n	80093d8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80093cc:	2301      	movs	r3, #1
 80093ce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80093d0:	4b0a      	ldr	r3, [pc, #40]	; (80093fc <xTaskRemoveFromEventList+0xc4>)
 80093d2:	2201      	movs	r2, #1
 80093d4:	601a      	str	r2, [r3, #0]
 80093d6:	e001      	b.n	80093dc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80093d8:	2300      	movs	r3, #0
 80093da:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80093dc:	697b      	ldr	r3, [r7, #20]
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3718      	adds	r7, #24
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	20001928 	.word	0x20001928
 80093ec:	20001908 	.word	0x20001908
 80093f0:	20001430 	.word	0x20001430
 80093f4:	200018c0 	.word	0x200018c0
 80093f8:	2000142c 	.word	0x2000142c
 80093fc:	20001914 	.word	0x20001914

08009400 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b086      	sub	sp, #24
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800940a:	4b29      	ldr	r3, [pc, #164]	; (80094b0 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d10a      	bne.n	8009428 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8009412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009416:	f383 8811 	msr	BASEPRI, r3
 800941a:	f3bf 8f6f 	isb	sy
 800941e:	f3bf 8f4f 	dsb	sy
 8009422:	613b      	str	r3, [r7, #16]
}
 8009424:	bf00      	nop
 8009426:	e7fe      	b.n	8009426 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	68db      	ldr	r3, [r3, #12]
 8009436:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d10a      	bne.n	8009454 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800943e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009442:	f383 8811 	msr	BASEPRI, r3
 8009446:	f3bf 8f6f 	isb	sy
 800944a:	f3bf 8f4f 	dsb	sy
 800944e:	60fb      	str	r3, [r7, #12]
}
 8009450:	bf00      	nop
 8009452:	e7fe      	b.n	8009452 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f7fe fa91 	bl	800797c <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	3304      	adds	r3, #4
 800945e:	4618      	mov	r0, r3
 8009460:	f7fe fa8c 	bl	800797c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009468:	4b12      	ldr	r3, [pc, #72]	; (80094b4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	429a      	cmp	r2, r3
 800946e:	d903      	bls.n	8009478 <vTaskRemoveFromUnorderedEventList+0x78>
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009474:	4a0f      	ldr	r2, [pc, #60]	; (80094b4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8009476:	6013      	str	r3, [r2, #0]
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800947c:	4613      	mov	r3, r2
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	4413      	add	r3, r2
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	4a0c      	ldr	r2, [pc, #48]	; (80094b8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8009486:	441a      	add	r2, r3
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	3304      	adds	r3, #4
 800948c:	4619      	mov	r1, r3
 800948e:	4610      	mov	r0, r2
 8009490:	f7fe fa17 	bl	80078c2 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009498:	4b08      	ldr	r3, [pc, #32]	; (80094bc <vTaskRemoveFromUnorderedEventList+0xbc>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800949e:	429a      	cmp	r2, r3
 80094a0:	d902      	bls.n	80094a8 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80094a2:	4b07      	ldr	r3, [pc, #28]	; (80094c0 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80094a4:	2201      	movs	r2, #1
 80094a6:	601a      	str	r2, [r3, #0]
	}
}
 80094a8:	bf00      	nop
 80094aa:	3718      	adds	r7, #24
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}
 80094b0:	20001928 	.word	0x20001928
 80094b4:	20001908 	.word	0x20001908
 80094b8:	20001430 	.word	0x20001430
 80094bc:	2000142c 	.word	0x2000142c
 80094c0:	20001914 	.word	0x20001914

080094c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80094c4:	b480      	push	{r7}
 80094c6:	b083      	sub	sp, #12
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80094cc:	4b06      	ldr	r3, [pc, #24]	; (80094e8 <vTaskInternalSetTimeOutState+0x24>)
 80094ce:	681a      	ldr	r2, [r3, #0]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80094d4:	4b05      	ldr	r3, [pc, #20]	; (80094ec <vTaskInternalSetTimeOutState+0x28>)
 80094d6:	681a      	ldr	r2, [r3, #0]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	605a      	str	r2, [r3, #4]
}
 80094dc:	bf00      	nop
 80094de:	370c      	adds	r7, #12
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr
 80094e8:	20001918 	.word	0x20001918
 80094ec:	20001904 	.word	0x20001904

080094f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b088      	sub	sp, #32
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d10a      	bne.n	8009516 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009504:	f383 8811 	msr	BASEPRI, r3
 8009508:	f3bf 8f6f 	isb	sy
 800950c:	f3bf 8f4f 	dsb	sy
 8009510:	613b      	str	r3, [r7, #16]
}
 8009512:	bf00      	nop
 8009514:	e7fe      	b.n	8009514 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d10a      	bne.n	8009532 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800951c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009520:	f383 8811 	msr	BASEPRI, r3
 8009524:	f3bf 8f6f 	isb	sy
 8009528:	f3bf 8f4f 	dsb	sy
 800952c:	60fb      	str	r3, [r7, #12]
}
 800952e:	bf00      	nop
 8009530:	e7fe      	b.n	8009530 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009532:	f001 f8a7 	bl	800a684 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009536:	4b1d      	ldr	r3, [pc, #116]	; (80095ac <xTaskCheckForTimeOut+0xbc>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	69ba      	ldr	r2, [r7, #24]
 8009542:	1ad3      	subs	r3, r2, r3
 8009544:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800954e:	d102      	bne.n	8009556 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009550:	2300      	movs	r3, #0
 8009552:	61fb      	str	r3, [r7, #28]
 8009554:	e023      	b.n	800959e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	4b15      	ldr	r3, [pc, #84]	; (80095b0 <xTaskCheckForTimeOut+0xc0>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	429a      	cmp	r2, r3
 8009560:	d007      	beq.n	8009572 <xTaskCheckForTimeOut+0x82>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	69ba      	ldr	r2, [r7, #24]
 8009568:	429a      	cmp	r2, r3
 800956a:	d302      	bcc.n	8009572 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800956c:	2301      	movs	r3, #1
 800956e:	61fb      	str	r3, [r7, #28]
 8009570:	e015      	b.n	800959e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	697a      	ldr	r2, [r7, #20]
 8009578:	429a      	cmp	r2, r3
 800957a:	d20b      	bcs.n	8009594 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	681a      	ldr	r2, [r3, #0]
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	1ad2      	subs	r2, r2, r3
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f7ff ff9b 	bl	80094c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800958e:	2300      	movs	r3, #0
 8009590:	61fb      	str	r3, [r7, #28]
 8009592:	e004      	b.n	800959e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	2200      	movs	r2, #0
 8009598:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800959a:	2301      	movs	r3, #1
 800959c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800959e:	f001 f8a1 	bl	800a6e4 <vPortExitCritical>

	return xReturn;
 80095a2:	69fb      	ldr	r3, [r7, #28]
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3720      	adds	r7, #32
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}
 80095ac:	20001904 	.word	0x20001904
 80095b0:	20001918 	.word	0x20001918

080095b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80095b4:	b480      	push	{r7}
 80095b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80095b8:	4b03      	ldr	r3, [pc, #12]	; (80095c8 <vTaskMissedYield+0x14>)
 80095ba:	2201      	movs	r2, #1
 80095bc:	601a      	str	r2, [r3, #0]
}
 80095be:	bf00      	nop
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr
 80095c8:	20001914 	.word	0x20001914

080095cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b082      	sub	sp, #8
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80095d4:	f000 f852 	bl	800967c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80095d8:	4b06      	ldr	r3, [pc, #24]	; (80095f4 <prvIdleTask+0x28>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d9f9      	bls.n	80095d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80095e0:	4b05      	ldr	r3, [pc, #20]	; (80095f8 <prvIdleTask+0x2c>)
 80095e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095e6:	601a      	str	r2, [r3, #0]
 80095e8:	f3bf 8f4f 	dsb	sy
 80095ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80095f0:	e7f0      	b.n	80095d4 <prvIdleTask+0x8>
 80095f2:	bf00      	nop
 80095f4:	20001430 	.word	0x20001430
 80095f8:	e000ed04 	.word	0xe000ed04

080095fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b082      	sub	sp, #8
 8009600:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009602:	2300      	movs	r3, #0
 8009604:	607b      	str	r3, [r7, #4]
 8009606:	e00c      	b.n	8009622 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009608:	687a      	ldr	r2, [r7, #4]
 800960a:	4613      	mov	r3, r2
 800960c:	009b      	lsls	r3, r3, #2
 800960e:	4413      	add	r3, r2
 8009610:	009b      	lsls	r3, r3, #2
 8009612:	4a12      	ldr	r2, [pc, #72]	; (800965c <prvInitialiseTaskLists+0x60>)
 8009614:	4413      	add	r3, r2
 8009616:	4618      	mov	r0, r3
 8009618:	f7fe f926 	bl	8007868 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	3301      	adds	r3, #1
 8009620:	607b      	str	r3, [r7, #4]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2b37      	cmp	r3, #55	; 0x37
 8009626:	d9ef      	bls.n	8009608 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009628:	480d      	ldr	r0, [pc, #52]	; (8009660 <prvInitialiseTaskLists+0x64>)
 800962a:	f7fe f91d 	bl	8007868 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800962e:	480d      	ldr	r0, [pc, #52]	; (8009664 <prvInitialiseTaskLists+0x68>)
 8009630:	f7fe f91a 	bl	8007868 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009634:	480c      	ldr	r0, [pc, #48]	; (8009668 <prvInitialiseTaskLists+0x6c>)
 8009636:	f7fe f917 	bl	8007868 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800963a:	480c      	ldr	r0, [pc, #48]	; (800966c <prvInitialiseTaskLists+0x70>)
 800963c:	f7fe f914 	bl	8007868 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009640:	480b      	ldr	r0, [pc, #44]	; (8009670 <prvInitialiseTaskLists+0x74>)
 8009642:	f7fe f911 	bl	8007868 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009646:	4b0b      	ldr	r3, [pc, #44]	; (8009674 <prvInitialiseTaskLists+0x78>)
 8009648:	4a05      	ldr	r2, [pc, #20]	; (8009660 <prvInitialiseTaskLists+0x64>)
 800964a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800964c:	4b0a      	ldr	r3, [pc, #40]	; (8009678 <prvInitialiseTaskLists+0x7c>)
 800964e:	4a05      	ldr	r2, [pc, #20]	; (8009664 <prvInitialiseTaskLists+0x68>)
 8009650:	601a      	str	r2, [r3, #0]
}
 8009652:	bf00      	nop
 8009654:	3708      	adds	r7, #8
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
 800965a:	bf00      	nop
 800965c:	20001430 	.word	0x20001430
 8009660:	20001890 	.word	0x20001890
 8009664:	200018a4 	.word	0x200018a4
 8009668:	200018c0 	.word	0x200018c0
 800966c:	200018d4 	.word	0x200018d4
 8009670:	200018ec 	.word	0x200018ec
 8009674:	200018b8 	.word	0x200018b8
 8009678:	200018bc 	.word	0x200018bc

0800967c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009682:	e019      	b.n	80096b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009684:	f000 fffe 	bl	800a684 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009688:	4b10      	ldr	r3, [pc, #64]	; (80096cc <prvCheckTasksWaitingTermination+0x50>)
 800968a:	68db      	ldr	r3, [r3, #12]
 800968c:	68db      	ldr	r3, [r3, #12]
 800968e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	3304      	adds	r3, #4
 8009694:	4618      	mov	r0, r3
 8009696:	f7fe f971 	bl	800797c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800969a:	4b0d      	ldr	r3, [pc, #52]	; (80096d0 <prvCheckTasksWaitingTermination+0x54>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	3b01      	subs	r3, #1
 80096a0:	4a0b      	ldr	r2, [pc, #44]	; (80096d0 <prvCheckTasksWaitingTermination+0x54>)
 80096a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80096a4:	4b0b      	ldr	r3, [pc, #44]	; (80096d4 <prvCheckTasksWaitingTermination+0x58>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	3b01      	subs	r3, #1
 80096aa:	4a0a      	ldr	r2, [pc, #40]	; (80096d4 <prvCheckTasksWaitingTermination+0x58>)
 80096ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80096ae:	f001 f819 	bl	800a6e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 f810 	bl	80096d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80096b8:	4b06      	ldr	r3, [pc, #24]	; (80096d4 <prvCheckTasksWaitingTermination+0x58>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d1e1      	bne.n	8009684 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80096c0:	bf00      	nop
 80096c2:	bf00      	nop
 80096c4:	3708      	adds	r7, #8
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
 80096ca:	bf00      	nop
 80096cc:	200018d4 	.word	0x200018d4
 80096d0:	20001900 	.word	0x20001900
 80096d4:	200018e8 	.word	0x200018e8

080096d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	335c      	adds	r3, #92	; 0x5c
 80096e4:	4618      	mov	r0, r3
 80096e6:	f002 fa25 	bl	800bb34 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d108      	bne.n	8009706 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096f8:	4618      	mov	r0, r3
 80096fa:	f001 f9b1 	bl	800aa60 <vPortFree>
				vPortFree( pxTCB );
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f001 f9ae 	bl	800aa60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009704:	e018      	b.n	8009738 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800970c:	2b01      	cmp	r3, #1
 800970e:	d103      	bne.n	8009718 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f001 f9a5 	bl	800aa60 <vPortFree>
	}
 8009716:	e00f      	b.n	8009738 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800971e:	2b02      	cmp	r3, #2
 8009720:	d00a      	beq.n	8009738 <prvDeleteTCB+0x60>
	__asm volatile
 8009722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009726:	f383 8811 	msr	BASEPRI, r3
 800972a:	f3bf 8f6f 	isb	sy
 800972e:	f3bf 8f4f 	dsb	sy
 8009732:	60fb      	str	r3, [r7, #12]
}
 8009734:	bf00      	nop
 8009736:	e7fe      	b.n	8009736 <prvDeleteTCB+0x5e>
	}
 8009738:	bf00      	nop
 800973a:	3710      	adds	r7, #16
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009740:	b480      	push	{r7}
 8009742:	b083      	sub	sp, #12
 8009744:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009746:	4b0c      	ldr	r3, [pc, #48]	; (8009778 <prvResetNextTaskUnblockTime+0x38>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d104      	bne.n	800975a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009750:	4b0a      	ldr	r3, [pc, #40]	; (800977c <prvResetNextTaskUnblockTime+0x3c>)
 8009752:	f04f 32ff 	mov.w	r2, #4294967295
 8009756:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009758:	e008      	b.n	800976c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800975a:	4b07      	ldr	r3, [pc, #28]	; (8009778 <prvResetNextTaskUnblockTime+0x38>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	68db      	ldr	r3, [r3, #12]
 8009760:	68db      	ldr	r3, [r3, #12]
 8009762:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	4a04      	ldr	r2, [pc, #16]	; (800977c <prvResetNextTaskUnblockTime+0x3c>)
 800976a:	6013      	str	r3, [r2, #0]
}
 800976c:	bf00      	nop
 800976e:	370c      	adds	r7, #12
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr
 8009778:	200018b8 	.word	0x200018b8
 800977c:	20001920 	.word	0x20001920

08009780 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009780:	b480      	push	{r7}
 8009782:	b083      	sub	sp, #12
 8009784:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009786:	4b05      	ldr	r3, [pc, #20]	; (800979c <xTaskGetCurrentTaskHandle+0x1c>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800978c:	687b      	ldr	r3, [r7, #4]
	}
 800978e:	4618      	mov	r0, r3
 8009790:	370c      	adds	r7, #12
 8009792:	46bd      	mov	sp, r7
 8009794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009798:	4770      	bx	lr
 800979a:	bf00      	nop
 800979c:	2000142c 	.word	0x2000142c

080097a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80097a0:	b480      	push	{r7}
 80097a2:	b083      	sub	sp, #12
 80097a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80097a6:	4b0b      	ldr	r3, [pc, #44]	; (80097d4 <xTaskGetSchedulerState+0x34>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d102      	bne.n	80097b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80097ae:	2301      	movs	r3, #1
 80097b0:	607b      	str	r3, [r7, #4]
 80097b2:	e008      	b.n	80097c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097b4:	4b08      	ldr	r3, [pc, #32]	; (80097d8 <xTaskGetSchedulerState+0x38>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d102      	bne.n	80097c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80097bc:	2302      	movs	r3, #2
 80097be:	607b      	str	r3, [r7, #4]
 80097c0:	e001      	b.n	80097c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80097c2:	2300      	movs	r3, #0
 80097c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80097c6:	687b      	ldr	r3, [r7, #4]
	}
 80097c8:	4618      	mov	r0, r3
 80097ca:	370c      	adds	r7, #12
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr
 80097d4:	2000190c 	.word	0x2000190c
 80097d8:	20001928 	.word	0x20001928

080097dc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80097e8:	2300      	movs	r3, #0
 80097ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d051      	beq.n	8009896 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097f6:	4b2a      	ldr	r3, [pc, #168]	; (80098a0 <xTaskPriorityInherit+0xc4>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d241      	bcs.n	8009884 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	699b      	ldr	r3, [r3, #24]
 8009804:	2b00      	cmp	r3, #0
 8009806:	db06      	blt.n	8009816 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009808:	4b25      	ldr	r3, [pc, #148]	; (80098a0 <xTaskPriorityInherit+0xc4>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800980e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	6959      	ldr	r1, [r3, #20]
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800981e:	4613      	mov	r3, r2
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	4413      	add	r3, r2
 8009824:	009b      	lsls	r3, r3, #2
 8009826:	4a1f      	ldr	r2, [pc, #124]	; (80098a4 <xTaskPriorityInherit+0xc8>)
 8009828:	4413      	add	r3, r2
 800982a:	4299      	cmp	r1, r3
 800982c:	d122      	bne.n	8009874 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	3304      	adds	r3, #4
 8009832:	4618      	mov	r0, r3
 8009834:	f7fe f8a2 	bl	800797c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009838:	4b19      	ldr	r3, [pc, #100]	; (80098a0 <xTaskPriorityInherit+0xc4>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009846:	4b18      	ldr	r3, [pc, #96]	; (80098a8 <xTaskPriorityInherit+0xcc>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	429a      	cmp	r2, r3
 800984c:	d903      	bls.n	8009856 <xTaskPriorityInherit+0x7a>
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009852:	4a15      	ldr	r2, [pc, #84]	; (80098a8 <xTaskPriorityInherit+0xcc>)
 8009854:	6013      	str	r3, [r2, #0]
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800985a:	4613      	mov	r3, r2
 800985c:	009b      	lsls	r3, r3, #2
 800985e:	4413      	add	r3, r2
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	4a10      	ldr	r2, [pc, #64]	; (80098a4 <xTaskPriorityInherit+0xc8>)
 8009864:	441a      	add	r2, r3
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	3304      	adds	r3, #4
 800986a:	4619      	mov	r1, r3
 800986c:	4610      	mov	r0, r2
 800986e:	f7fe f828 	bl	80078c2 <vListInsertEnd>
 8009872:	e004      	b.n	800987e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009874:	4b0a      	ldr	r3, [pc, #40]	; (80098a0 <xTaskPriorityInherit+0xc4>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800987e:	2301      	movs	r3, #1
 8009880:	60fb      	str	r3, [r7, #12]
 8009882:	e008      	b.n	8009896 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009888:	4b05      	ldr	r3, [pc, #20]	; (80098a0 <xTaskPriorityInherit+0xc4>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800988e:	429a      	cmp	r2, r3
 8009890:	d201      	bcs.n	8009896 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009892:	2301      	movs	r3, #1
 8009894:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009896:	68fb      	ldr	r3, [r7, #12]
	}
 8009898:	4618      	mov	r0, r3
 800989a:	3710      	adds	r7, #16
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}
 80098a0:	2000142c 	.word	0x2000142c
 80098a4:	20001430 	.word	0x20001430
 80098a8:	20001908 	.word	0x20001908

080098ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b086      	sub	sp, #24
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80098b8:	2300      	movs	r3, #0
 80098ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d056      	beq.n	8009970 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80098c2:	4b2e      	ldr	r3, [pc, #184]	; (800997c <xTaskPriorityDisinherit+0xd0>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	693a      	ldr	r2, [r7, #16]
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d00a      	beq.n	80098e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80098cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d0:	f383 8811 	msr	BASEPRI, r3
 80098d4:	f3bf 8f6f 	isb	sy
 80098d8:	f3bf 8f4f 	dsb	sy
 80098dc:	60fb      	str	r3, [r7, #12]
}
 80098de:	bf00      	nop
 80098e0:	e7fe      	b.n	80098e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d10a      	bne.n	8009900 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80098ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ee:	f383 8811 	msr	BASEPRI, r3
 80098f2:	f3bf 8f6f 	isb	sy
 80098f6:	f3bf 8f4f 	dsb	sy
 80098fa:	60bb      	str	r3, [r7, #8]
}
 80098fc:	bf00      	nop
 80098fe:	e7fe      	b.n	80098fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009904:	1e5a      	subs	r2, r3, #1
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009912:	429a      	cmp	r2, r3
 8009914:	d02c      	beq.n	8009970 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800991a:	2b00      	cmp	r3, #0
 800991c:	d128      	bne.n	8009970 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	3304      	adds	r3, #4
 8009922:	4618      	mov	r0, r3
 8009924:	f7fe f82a 	bl	800797c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009934:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009940:	4b0f      	ldr	r3, [pc, #60]	; (8009980 <xTaskPriorityDisinherit+0xd4>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	429a      	cmp	r2, r3
 8009946:	d903      	bls.n	8009950 <xTaskPriorityDisinherit+0xa4>
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800994c:	4a0c      	ldr	r2, [pc, #48]	; (8009980 <xTaskPriorityDisinherit+0xd4>)
 800994e:	6013      	str	r3, [r2, #0]
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009954:	4613      	mov	r3, r2
 8009956:	009b      	lsls	r3, r3, #2
 8009958:	4413      	add	r3, r2
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	4a09      	ldr	r2, [pc, #36]	; (8009984 <xTaskPriorityDisinherit+0xd8>)
 800995e:	441a      	add	r2, r3
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	3304      	adds	r3, #4
 8009964:	4619      	mov	r1, r3
 8009966:	4610      	mov	r0, r2
 8009968:	f7fd ffab 	bl	80078c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800996c:	2301      	movs	r3, #1
 800996e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009970:	697b      	ldr	r3, [r7, #20]
	}
 8009972:	4618      	mov	r0, r3
 8009974:	3718      	adds	r7, #24
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
 800997a:	bf00      	nop
 800997c:	2000142c 	.word	0x2000142c
 8009980:	20001908 	.word	0x20001908
 8009984:	20001430 	.word	0x20001430

08009988 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009988:	b580      	push	{r7, lr}
 800998a:	b088      	sub	sp, #32
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009996:	2301      	movs	r3, #1
 8009998:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d06a      	beq.n	8009a76 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80099a0:	69bb      	ldr	r3, [r7, #24]
 80099a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d10a      	bne.n	80099be <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80099a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ac:	f383 8811 	msr	BASEPRI, r3
 80099b0:	f3bf 8f6f 	isb	sy
 80099b4:	f3bf 8f4f 	dsb	sy
 80099b8:	60fb      	str	r3, [r7, #12]
}
 80099ba:	bf00      	nop
 80099bc:	e7fe      	b.n	80099bc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80099be:	69bb      	ldr	r3, [r7, #24]
 80099c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099c2:	683a      	ldr	r2, [r7, #0]
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d902      	bls.n	80099ce <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	61fb      	str	r3, [r7, #28]
 80099cc:	e002      	b.n	80099d4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80099ce:	69bb      	ldr	r3, [r7, #24]
 80099d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099d2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80099d4:	69bb      	ldr	r3, [r7, #24]
 80099d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d8:	69fa      	ldr	r2, [r7, #28]
 80099da:	429a      	cmp	r2, r3
 80099dc:	d04b      	beq.n	8009a76 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80099de:	69bb      	ldr	r3, [r7, #24]
 80099e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099e2:	697a      	ldr	r2, [r7, #20]
 80099e4:	429a      	cmp	r2, r3
 80099e6:	d146      	bne.n	8009a76 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80099e8:	4b25      	ldr	r3, [pc, #148]	; (8009a80 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	69ba      	ldr	r2, [r7, #24]
 80099ee:	429a      	cmp	r2, r3
 80099f0:	d10a      	bne.n	8009a08 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80099f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f6:	f383 8811 	msr	BASEPRI, r3
 80099fa:	f3bf 8f6f 	isb	sy
 80099fe:	f3bf 8f4f 	dsb	sy
 8009a02:	60bb      	str	r3, [r7, #8]
}
 8009a04:	bf00      	nop
 8009a06:	e7fe      	b.n	8009a06 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009a08:	69bb      	ldr	r3, [r7, #24]
 8009a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a0c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009a0e:	69bb      	ldr	r3, [r7, #24]
 8009a10:	69fa      	ldr	r2, [r7, #28]
 8009a12:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009a14:	69bb      	ldr	r3, [r7, #24]
 8009a16:	699b      	ldr	r3, [r3, #24]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	db04      	blt.n	8009a26 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a1c:	69fb      	ldr	r3, [r7, #28]
 8009a1e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009a22:	69bb      	ldr	r3, [r7, #24]
 8009a24:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009a26:	69bb      	ldr	r3, [r7, #24]
 8009a28:	6959      	ldr	r1, [r3, #20]
 8009a2a:	693a      	ldr	r2, [r7, #16]
 8009a2c:	4613      	mov	r3, r2
 8009a2e:	009b      	lsls	r3, r3, #2
 8009a30:	4413      	add	r3, r2
 8009a32:	009b      	lsls	r3, r3, #2
 8009a34:	4a13      	ldr	r2, [pc, #76]	; (8009a84 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009a36:	4413      	add	r3, r2
 8009a38:	4299      	cmp	r1, r3
 8009a3a:	d11c      	bne.n	8009a76 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a3c:	69bb      	ldr	r3, [r7, #24]
 8009a3e:	3304      	adds	r3, #4
 8009a40:	4618      	mov	r0, r3
 8009a42:	f7fd ff9b 	bl	800797c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009a46:	69bb      	ldr	r3, [r7, #24]
 8009a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a4a:	4b0f      	ldr	r3, [pc, #60]	; (8009a88 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d903      	bls.n	8009a5a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8009a52:	69bb      	ldr	r3, [r7, #24]
 8009a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a56:	4a0c      	ldr	r2, [pc, #48]	; (8009a88 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009a58:	6013      	str	r3, [r2, #0]
 8009a5a:	69bb      	ldr	r3, [r7, #24]
 8009a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a5e:	4613      	mov	r3, r2
 8009a60:	009b      	lsls	r3, r3, #2
 8009a62:	4413      	add	r3, r2
 8009a64:	009b      	lsls	r3, r3, #2
 8009a66:	4a07      	ldr	r2, [pc, #28]	; (8009a84 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009a68:	441a      	add	r2, r3
 8009a6a:	69bb      	ldr	r3, [r7, #24]
 8009a6c:	3304      	adds	r3, #4
 8009a6e:	4619      	mov	r1, r3
 8009a70:	4610      	mov	r0, r2
 8009a72:	f7fd ff26 	bl	80078c2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009a76:	bf00      	nop
 8009a78:	3720      	adds	r7, #32
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	2000142c 	.word	0x2000142c
 8009a84:	20001430 	.word	0x20001430
 8009a88:	20001908 	.word	0x20001908

08009a8c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b083      	sub	sp, #12
 8009a90:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8009a92:	4b09      	ldr	r3, [pc, #36]	; (8009ab8 <uxTaskResetEventItemValue+0x2c>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	699b      	ldr	r3, [r3, #24]
 8009a98:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a9a:	4b07      	ldr	r3, [pc, #28]	; (8009ab8 <uxTaskResetEventItemValue+0x2c>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aa0:	4b05      	ldr	r3, [pc, #20]	; (8009ab8 <uxTaskResetEventItemValue+0x2c>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8009aa8:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8009aaa:	687b      	ldr	r3, [r7, #4]
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	370c      	adds	r7, #12
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr
 8009ab8:	2000142c 	.word	0x2000142c

08009abc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009abc:	b480      	push	{r7}
 8009abe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009ac0:	4b07      	ldr	r3, [pc, #28]	; (8009ae0 <pvTaskIncrementMutexHeldCount+0x24>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d004      	beq.n	8009ad2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009ac8:	4b05      	ldr	r3, [pc, #20]	; (8009ae0 <pvTaskIncrementMutexHeldCount+0x24>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009ace:	3201      	adds	r2, #1
 8009ad0:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 8009ad2:	4b03      	ldr	r3, [pc, #12]	; (8009ae0 <pvTaskIncrementMutexHeldCount+0x24>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
	}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr
 8009ae0:	2000142c 	.word	0x2000142c

08009ae4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009aee:	4b21      	ldr	r3, [pc, #132]	; (8009b74 <prvAddCurrentTaskToDelayedList+0x90>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009af4:	4b20      	ldr	r3, [pc, #128]	; (8009b78 <prvAddCurrentTaskToDelayedList+0x94>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	3304      	adds	r3, #4
 8009afa:	4618      	mov	r0, r3
 8009afc:	f7fd ff3e 	bl	800797c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b06:	d10a      	bne.n	8009b1e <prvAddCurrentTaskToDelayedList+0x3a>
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d007      	beq.n	8009b1e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b0e:	4b1a      	ldr	r3, [pc, #104]	; (8009b78 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	3304      	adds	r3, #4
 8009b14:	4619      	mov	r1, r3
 8009b16:	4819      	ldr	r0, [pc, #100]	; (8009b7c <prvAddCurrentTaskToDelayedList+0x98>)
 8009b18:	f7fd fed3 	bl	80078c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009b1c:	e026      	b.n	8009b6c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009b1e:	68fa      	ldr	r2, [r7, #12]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	4413      	add	r3, r2
 8009b24:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009b26:	4b14      	ldr	r3, [pc, #80]	; (8009b78 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	68ba      	ldr	r2, [r7, #8]
 8009b2c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009b2e:	68ba      	ldr	r2, [r7, #8]
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	429a      	cmp	r2, r3
 8009b34:	d209      	bcs.n	8009b4a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b36:	4b12      	ldr	r3, [pc, #72]	; (8009b80 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	4b0f      	ldr	r3, [pc, #60]	; (8009b78 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	3304      	adds	r3, #4
 8009b40:	4619      	mov	r1, r3
 8009b42:	4610      	mov	r0, r2
 8009b44:	f7fd fee1 	bl	800790a <vListInsert>
}
 8009b48:	e010      	b.n	8009b6c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b4a:	4b0e      	ldr	r3, [pc, #56]	; (8009b84 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009b4c:	681a      	ldr	r2, [r3, #0]
 8009b4e:	4b0a      	ldr	r3, [pc, #40]	; (8009b78 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	3304      	adds	r3, #4
 8009b54:	4619      	mov	r1, r3
 8009b56:	4610      	mov	r0, r2
 8009b58:	f7fd fed7 	bl	800790a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009b5c:	4b0a      	ldr	r3, [pc, #40]	; (8009b88 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	68ba      	ldr	r2, [r7, #8]
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d202      	bcs.n	8009b6c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009b66:	4a08      	ldr	r2, [pc, #32]	; (8009b88 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	6013      	str	r3, [r2, #0]
}
 8009b6c:	bf00      	nop
 8009b6e:	3710      	adds	r7, #16
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}
 8009b74:	20001904 	.word	0x20001904
 8009b78:	2000142c 	.word	0x2000142c
 8009b7c:	200018ec 	.word	0x200018ec
 8009b80:	200018bc 	.word	0x200018bc
 8009b84:	200018b8 	.word	0x200018b8
 8009b88:	20001920 	.word	0x20001920

08009b8c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b08a      	sub	sp, #40	; 0x28
 8009b90:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009b92:	2300      	movs	r3, #0
 8009b94:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009b96:	f000 fba1 	bl	800a2dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009b9a:	4b1c      	ldr	r3, [pc, #112]	; (8009c0c <xTimerCreateTimerTask+0x80>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d021      	beq.n	8009be6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009baa:	1d3a      	adds	r2, r7, #4
 8009bac:	f107 0108 	add.w	r1, r7, #8
 8009bb0:	f107 030c 	add.w	r3, r7, #12
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f7fd fb9d 	bl	80072f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009bba:	6879      	ldr	r1, [r7, #4]
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	68fa      	ldr	r2, [r7, #12]
 8009bc0:	9202      	str	r2, [sp, #8]
 8009bc2:	9301      	str	r3, [sp, #4]
 8009bc4:	2318      	movs	r3, #24
 8009bc6:	9300      	str	r3, [sp, #0]
 8009bc8:	2300      	movs	r3, #0
 8009bca:	460a      	mov	r2, r1
 8009bcc:	4910      	ldr	r1, [pc, #64]	; (8009c10 <xTimerCreateTimerTask+0x84>)
 8009bce:	4811      	ldr	r0, [pc, #68]	; (8009c14 <xTimerCreateTimerTask+0x88>)
 8009bd0:	f7fe fecc 	bl	800896c <xTaskCreateStatic>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	4a10      	ldr	r2, [pc, #64]	; (8009c18 <xTimerCreateTimerTask+0x8c>)
 8009bd8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009bda:	4b0f      	ldr	r3, [pc, #60]	; (8009c18 <xTimerCreateTimerTask+0x8c>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d001      	beq.n	8009be6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009be2:	2301      	movs	r3, #1
 8009be4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d10a      	bne.n	8009c02 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf0:	f383 8811 	msr	BASEPRI, r3
 8009bf4:	f3bf 8f6f 	isb	sy
 8009bf8:	f3bf 8f4f 	dsb	sy
 8009bfc:	613b      	str	r3, [r7, #16]
}
 8009bfe:	bf00      	nop
 8009c00:	e7fe      	b.n	8009c00 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009c02:	697b      	ldr	r3, [r7, #20]
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3718      	adds	r7, #24
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	20001964 	.word	0x20001964
 8009c10:	0800e8f8 	.word	0x0800e8f8
 8009c14:	08009e85 	.word	0x08009e85
 8009c18:	20001968 	.word	0x20001968

08009c1c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b088      	sub	sp, #32
 8009c20:	af02      	add	r7, sp, #8
 8009c22:	60f8      	str	r0, [r7, #12]
 8009c24:	60b9      	str	r1, [r7, #8]
 8009c26:	607a      	str	r2, [r7, #4]
 8009c28:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8009c2a:	202c      	movs	r0, #44	; 0x2c
 8009c2c:	f000 fe4c 	bl	800a8c8 <pvPortMalloc>
 8009c30:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d00d      	beq.n	8009c54 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	9301      	str	r3, [sp, #4]
 8009c44:	6a3b      	ldr	r3, [r7, #32]
 8009c46:	9300      	str	r3, [sp, #0]
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	687a      	ldr	r2, [r7, #4]
 8009c4c:	68b9      	ldr	r1, [r7, #8]
 8009c4e:	68f8      	ldr	r0, [r7, #12]
 8009c50:	f000 f843 	bl	8009cda <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009c54:	697b      	ldr	r3, [r7, #20]
	}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3718      	adds	r7, #24
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}

08009c5e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8009c5e:	b580      	push	{r7, lr}
 8009c60:	b08a      	sub	sp, #40	; 0x28
 8009c62:	af02      	add	r7, sp, #8
 8009c64:	60f8      	str	r0, [r7, #12]
 8009c66:	60b9      	str	r1, [r7, #8]
 8009c68:	607a      	str	r2, [r7, #4]
 8009c6a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8009c6c:	232c      	movs	r3, #44	; 0x2c
 8009c6e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	2b2c      	cmp	r3, #44	; 0x2c
 8009c74:	d00a      	beq.n	8009c8c <xTimerCreateStatic+0x2e>
	__asm volatile
 8009c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c7a:	f383 8811 	msr	BASEPRI, r3
 8009c7e:	f3bf 8f6f 	isb	sy
 8009c82:	f3bf 8f4f 	dsb	sy
 8009c86:	61bb      	str	r3, [r7, #24]
}
 8009c88:	bf00      	nop
 8009c8a:	e7fe      	b.n	8009c8a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009c8c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8009c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d10a      	bne.n	8009caa <xTimerCreateStatic+0x4c>
	__asm volatile
 8009c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c98:	f383 8811 	msr	BASEPRI, r3
 8009c9c:	f3bf 8f6f 	isb	sy
 8009ca0:	f3bf 8f4f 	dsb	sy
 8009ca4:	617b      	str	r3, [r7, #20]
}
 8009ca6:	bf00      	nop
 8009ca8:	e7fe      	b.n	8009ca8 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8009caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cac:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8009cae:	69fb      	ldr	r3, [r7, #28]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d00d      	beq.n	8009cd0 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8009cb4:	69fb      	ldr	r3, [r7, #28]
 8009cb6:	2202      	movs	r2, #2
 8009cb8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009cbc:	69fb      	ldr	r3, [r7, #28]
 8009cbe:	9301      	str	r3, [sp, #4]
 8009cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc2:	9300      	str	r3, [sp, #0]
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	68b9      	ldr	r1, [r7, #8]
 8009cca:	68f8      	ldr	r0, [r7, #12]
 8009ccc:	f000 f805 	bl	8009cda <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009cd0:	69fb      	ldr	r3, [r7, #28]
	}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3720      	adds	r7, #32
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}

08009cda <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8009cda:	b580      	push	{r7, lr}
 8009cdc:	b086      	sub	sp, #24
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	60f8      	str	r0, [r7, #12]
 8009ce2:	60b9      	str	r1, [r7, #8]
 8009ce4:	607a      	str	r2, [r7, #4]
 8009ce6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d10a      	bne.n	8009d04 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8009cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf2:	f383 8811 	msr	BASEPRI, r3
 8009cf6:	f3bf 8f6f 	isb	sy
 8009cfa:	f3bf 8f4f 	dsb	sy
 8009cfe:	617b      	str	r3, [r7, #20]
}
 8009d00:	bf00      	nop
 8009d02:	e7fe      	b.n	8009d02 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8009d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d01e      	beq.n	8009d48 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8009d0a:	f000 fae7 	bl	800a2dc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8009d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d10:	68fa      	ldr	r2, [r7, #12]
 8009d12:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8009d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d16:	68ba      	ldr	r2, [r7, #8]
 8009d18:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8009d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1c:	683a      	ldr	r2, [r7, #0]
 8009d1e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d22:	6a3a      	ldr	r2, [r7, #32]
 8009d24:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d28:	3304      	adds	r3, #4
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f7fd fdbc 	bl	80078a8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d008      	beq.n	8009d48 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8009d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d3c:	f043 0304 	orr.w	r3, r3, #4
 8009d40:	b2da      	uxtb	r2, r3
 8009d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8009d48:	bf00      	nop
 8009d4a:	3718      	adds	r7, #24
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b08a      	sub	sp, #40	; 0x28
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	60f8      	str	r0, [r7, #12]
 8009d58:	60b9      	str	r1, [r7, #8]
 8009d5a:	607a      	str	r2, [r7, #4]
 8009d5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d10a      	bne.n	8009d7e <xTimerGenericCommand+0x2e>
	__asm volatile
 8009d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d6c:	f383 8811 	msr	BASEPRI, r3
 8009d70:	f3bf 8f6f 	isb	sy
 8009d74:	f3bf 8f4f 	dsb	sy
 8009d78:	623b      	str	r3, [r7, #32]
}
 8009d7a:	bf00      	nop
 8009d7c:	e7fe      	b.n	8009d7c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009d7e:	4b1a      	ldr	r3, [pc, #104]	; (8009de8 <xTimerGenericCommand+0x98>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d02a      	beq.n	8009ddc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	2b05      	cmp	r3, #5
 8009d96:	dc18      	bgt.n	8009dca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009d98:	f7ff fd02 	bl	80097a0 <xTaskGetSchedulerState>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	2b02      	cmp	r3, #2
 8009da0:	d109      	bne.n	8009db6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009da2:	4b11      	ldr	r3, [pc, #68]	; (8009de8 <xTimerGenericCommand+0x98>)
 8009da4:	6818      	ldr	r0, [r3, #0]
 8009da6:	f107 0110 	add.w	r1, r7, #16
 8009daa:	2300      	movs	r3, #0
 8009dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009dae:	f7fe f803 	bl	8007db8 <xQueueGenericSend>
 8009db2:	6278      	str	r0, [r7, #36]	; 0x24
 8009db4:	e012      	b.n	8009ddc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009db6:	4b0c      	ldr	r3, [pc, #48]	; (8009de8 <xTimerGenericCommand+0x98>)
 8009db8:	6818      	ldr	r0, [r3, #0]
 8009dba:	f107 0110 	add.w	r1, r7, #16
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	f7fd fff9 	bl	8007db8 <xQueueGenericSend>
 8009dc6:	6278      	str	r0, [r7, #36]	; 0x24
 8009dc8:	e008      	b.n	8009ddc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009dca:	4b07      	ldr	r3, [pc, #28]	; (8009de8 <xTimerGenericCommand+0x98>)
 8009dcc:	6818      	ldr	r0, [r3, #0]
 8009dce:	f107 0110 	add.w	r1, r7, #16
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	683a      	ldr	r2, [r7, #0]
 8009dd6:	f7fe f8ed 	bl	8007fb4 <xQueueGenericSendFromISR>
 8009dda:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3728      	adds	r7, #40	; 0x28
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}
 8009de6:	bf00      	nop
 8009de8:	20001964 	.word	0x20001964

08009dec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b088      	sub	sp, #32
 8009df0:	af02      	add	r7, sp, #8
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009df6:	4b22      	ldr	r3, [pc, #136]	; (8009e80 <prvProcessExpiredTimer+0x94>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	68db      	ldr	r3, [r3, #12]
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	3304      	adds	r3, #4
 8009e04:	4618      	mov	r0, r3
 8009e06:	f7fd fdb9 	bl	800797c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e10:	f003 0304 	and.w	r3, r3, #4
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d022      	beq.n	8009e5e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	699a      	ldr	r2, [r3, #24]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	18d1      	adds	r1, r2, r3
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	683a      	ldr	r2, [r7, #0]
 8009e24:	6978      	ldr	r0, [r7, #20]
 8009e26:	f000 f8d1 	bl	8009fcc <prvInsertTimerInActiveList>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d01f      	beq.n	8009e70 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009e30:	2300      	movs	r3, #0
 8009e32:	9300      	str	r3, [sp, #0]
 8009e34:	2300      	movs	r3, #0
 8009e36:	687a      	ldr	r2, [r7, #4]
 8009e38:	2100      	movs	r1, #0
 8009e3a:	6978      	ldr	r0, [r7, #20]
 8009e3c:	f7ff ff88 	bl	8009d50 <xTimerGenericCommand>
 8009e40:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d113      	bne.n	8009e70 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e4c:	f383 8811 	msr	BASEPRI, r3
 8009e50:	f3bf 8f6f 	isb	sy
 8009e54:	f3bf 8f4f 	dsb	sy
 8009e58:	60fb      	str	r3, [r7, #12]
}
 8009e5a:	bf00      	nop
 8009e5c:	e7fe      	b.n	8009e5c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e64:	f023 0301 	bic.w	r3, r3, #1
 8009e68:	b2da      	uxtb	r2, r3
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	6a1b      	ldr	r3, [r3, #32]
 8009e74:	6978      	ldr	r0, [r7, #20]
 8009e76:	4798      	blx	r3
}
 8009e78:	bf00      	nop
 8009e7a:	3718      	adds	r7, #24
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}
 8009e80:	2000195c 	.word	0x2000195c

08009e84 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009e8c:	f107 0308 	add.w	r3, r7, #8
 8009e90:	4618      	mov	r0, r3
 8009e92:	f000 f857 	bl	8009f44 <prvGetNextExpireTime>
 8009e96:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	68f8      	ldr	r0, [r7, #12]
 8009e9e:	f000 f803 	bl	8009ea8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009ea2:	f000 f8d5 	bl	800a050 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009ea6:	e7f1      	b.n	8009e8c <prvTimerTask+0x8>

08009ea8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009eb2:	f7fe ffbf 	bl	8008e34 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009eb6:	f107 0308 	add.w	r3, r7, #8
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f000 f866 	bl	8009f8c <prvSampleTimeNow>
 8009ec0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d130      	bne.n	8009f2a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d10a      	bne.n	8009ee4 <prvProcessTimerOrBlockTask+0x3c>
 8009ece:	687a      	ldr	r2, [r7, #4]
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d806      	bhi.n	8009ee4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009ed6:	f7fe ffbb 	bl	8008e50 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009eda:	68f9      	ldr	r1, [r7, #12]
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f7ff ff85 	bl	8009dec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009ee2:	e024      	b.n	8009f2e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d008      	beq.n	8009efc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009eea:	4b13      	ldr	r3, [pc, #76]	; (8009f38 <prvProcessTimerOrBlockTask+0x90>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d101      	bne.n	8009ef8 <prvProcessTimerOrBlockTask+0x50>
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	e000      	b.n	8009efa <prvProcessTimerOrBlockTask+0x52>
 8009ef8:	2300      	movs	r3, #0
 8009efa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009efc:	4b0f      	ldr	r3, [pc, #60]	; (8009f3c <prvProcessTimerOrBlockTask+0x94>)
 8009efe:	6818      	ldr	r0, [r3, #0]
 8009f00:	687a      	ldr	r2, [r7, #4]
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	1ad3      	subs	r3, r2, r3
 8009f06:	683a      	ldr	r2, [r7, #0]
 8009f08:	4619      	mov	r1, r3
 8009f0a:	f7fe fcfb 	bl	8008904 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009f0e:	f7fe ff9f 	bl	8008e50 <xTaskResumeAll>
 8009f12:	4603      	mov	r3, r0
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d10a      	bne.n	8009f2e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009f18:	4b09      	ldr	r3, [pc, #36]	; (8009f40 <prvProcessTimerOrBlockTask+0x98>)
 8009f1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f1e:	601a      	str	r2, [r3, #0]
 8009f20:	f3bf 8f4f 	dsb	sy
 8009f24:	f3bf 8f6f 	isb	sy
}
 8009f28:	e001      	b.n	8009f2e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009f2a:	f7fe ff91 	bl	8008e50 <xTaskResumeAll>
}
 8009f2e:	bf00      	nop
 8009f30:	3710      	adds	r7, #16
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop
 8009f38:	20001960 	.word	0x20001960
 8009f3c:	20001964 	.word	0x20001964
 8009f40:	e000ed04 	.word	0xe000ed04

08009f44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009f44:	b480      	push	{r7}
 8009f46:	b085      	sub	sp, #20
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009f4c:	4b0e      	ldr	r3, [pc, #56]	; (8009f88 <prvGetNextExpireTime+0x44>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d101      	bne.n	8009f5a <prvGetNextExpireTime+0x16>
 8009f56:	2201      	movs	r2, #1
 8009f58:	e000      	b.n	8009f5c <prvGetNextExpireTime+0x18>
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d105      	bne.n	8009f74 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f68:	4b07      	ldr	r3, [pc, #28]	; (8009f88 <prvGetNextExpireTime+0x44>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	68db      	ldr	r3, [r3, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	60fb      	str	r3, [r7, #12]
 8009f72:	e001      	b.n	8009f78 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009f74:	2300      	movs	r3, #0
 8009f76:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009f78:	68fb      	ldr	r3, [r7, #12]
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3714      	adds	r7, #20
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f84:	4770      	bx	lr
 8009f86:	bf00      	nop
 8009f88:	2000195c 	.word	0x2000195c

08009f8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b084      	sub	sp, #16
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009f94:	f7fe fffa 	bl	8008f8c <xTaskGetTickCount>
 8009f98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009f9a:	4b0b      	ldr	r3, [pc, #44]	; (8009fc8 <prvSampleTimeNow+0x3c>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	68fa      	ldr	r2, [r7, #12]
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d205      	bcs.n	8009fb0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009fa4:	f000 f936 	bl	800a214 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2201      	movs	r2, #1
 8009fac:	601a      	str	r2, [r3, #0]
 8009fae:	e002      	b.n	8009fb6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009fb6:	4a04      	ldr	r2, [pc, #16]	; (8009fc8 <prvSampleTimeNow+0x3c>)
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3710      	adds	r7, #16
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
 8009fc6:	bf00      	nop
 8009fc8:	2000196c 	.word	0x2000196c

08009fcc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b086      	sub	sp, #24
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	60f8      	str	r0, [r7, #12]
 8009fd4:	60b9      	str	r1, [r7, #8]
 8009fd6:	607a      	str	r2, [r7, #4]
 8009fd8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	68ba      	ldr	r2, [r7, #8]
 8009fe2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	68fa      	ldr	r2, [r7, #12]
 8009fe8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009fea:	68ba      	ldr	r2, [r7, #8]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d812      	bhi.n	800a018 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	1ad2      	subs	r2, r2, r3
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	699b      	ldr	r3, [r3, #24]
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	d302      	bcc.n	800a006 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a000:	2301      	movs	r3, #1
 800a002:	617b      	str	r3, [r7, #20]
 800a004:	e01b      	b.n	800a03e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a006:	4b10      	ldr	r3, [pc, #64]	; (800a048 <prvInsertTimerInActiveList+0x7c>)
 800a008:	681a      	ldr	r2, [r3, #0]
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	3304      	adds	r3, #4
 800a00e:	4619      	mov	r1, r3
 800a010:	4610      	mov	r0, r2
 800a012:	f7fd fc7a 	bl	800790a <vListInsert>
 800a016:	e012      	b.n	800a03e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d206      	bcs.n	800a02e <prvInsertTimerInActiveList+0x62>
 800a020:	68ba      	ldr	r2, [r7, #8]
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	429a      	cmp	r2, r3
 800a026:	d302      	bcc.n	800a02e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a028:	2301      	movs	r3, #1
 800a02a:	617b      	str	r3, [r7, #20]
 800a02c:	e007      	b.n	800a03e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a02e:	4b07      	ldr	r3, [pc, #28]	; (800a04c <prvInsertTimerInActiveList+0x80>)
 800a030:	681a      	ldr	r2, [r3, #0]
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	3304      	adds	r3, #4
 800a036:	4619      	mov	r1, r3
 800a038:	4610      	mov	r0, r2
 800a03a:	f7fd fc66 	bl	800790a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a03e:	697b      	ldr	r3, [r7, #20]
}
 800a040:	4618      	mov	r0, r3
 800a042:	3718      	adds	r7, #24
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}
 800a048:	20001960 	.word	0x20001960
 800a04c:	2000195c 	.word	0x2000195c

0800a050 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b08e      	sub	sp, #56	; 0x38
 800a054:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a056:	e0ca      	b.n	800a1ee <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	da18      	bge.n	800a090 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a05e:	1d3b      	adds	r3, r7, #4
 800a060:	3304      	adds	r3, #4
 800a062:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a066:	2b00      	cmp	r3, #0
 800a068:	d10a      	bne.n	800a080 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a06e:	f383 8811 	msr	BASEPRI, r3
 800a072:	f3bf 8f6f 	isb	sy
 800a076:	f3bf 8f4f 	dsb	sy
 800a07a:	61fb      	str	r3, [r7, #28]
}
 800a07c:	bf00      	nop
 800a07e:	e7fe      	b.n	800a07e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a086:	6850      	ldr	r0, [r2, #4]
 800a088:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a08a:	6892      	ldr	r2, [r2, #8]
 800a08c:	4611      	mov	r1, r2
 800a08e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2b00      	cmp	r3, #0
 800a094:	f2c0 80aa 	blt.w	800a1ec <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a09e:	695b      	ldr	r3, [r3, #20]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d004      	beq.n	800a0ae <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a6:	3304      	adds	r3, #4
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f7fd fc67 	bl	800797c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a0ae:	463b      	mov	r3, r7
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f7ff ff6b 	bl	8009f8c <prvSampleTimeNow>
 800a0b6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2b09      	cmp	r3, #9
 800a0bc:	f200 8097 	bhi.w	800a1ee <prvProcessReceivedCommands+0x19e>
 800a0c0:	a201      	add	r2, pc, #4	; (adr r2, 800a0c8 <prvProcessReceivedCommands+0x78>)
 800a0c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c6:	bf00      	nop
 800a0c8:	0800a0f1 	.word	0x0800a0f1
 800a0cc:	0800a0f1 	.word	0x0800a0f1
 800a0d0:	0800a0f1 	.word	0x0800a0f1
 800a0d4:	0800a165 	.word	0x0800a165
 800a0d8:	0800a179 	.word	0x0800a179
 800a0dc:	0800a1c3 	.word	0x0800a1c3
 800a0e0:	0800a0f1 	.word	0x0800a0f1
 800a0e4:	0800a0f1 	.word	0x0800a0f1
 800a0e8:	0800a165 	.word	0x0800a165
 800a0ec:	0800a179 	.word	0x0800a179
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0f6:	f043 0301 	orr.w	r3, r3, #1
 800a0fa:	b2da      	uxtb	r2, r3
 800a0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a102:	68ba      	ldr	r2, [r7, #8]
 800a104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a106:	699b      	ldr	r3, [r3, #24]
 800a108:	18d1      	adds	r1, r2, r3
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a10e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a110:	f7ff ff5c 	bl	8009fcc <prvInsertTimerInActiveList>
 800a114:	4603      	mov	r3, r0
 800a116:	2b00      	cmp	r3, #0
 800a118:	d069      	beq.n	800a1ee <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a11c:	6a1b      	ldr	r3, [r3, #32]
 800a11e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a120:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a124:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a128:	f003 0304 	and.w	r3, r3, #4
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d05e      	beq.n	800a1ee <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a130:	68ba      	ldr	r2, [r7, #8]
 800a132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a134:	699b      	ldr	r3, [r3, #24]
 800a136:	441a      	add	r2, r3
 800a138:	2300      	movs	r3, #0
 800a13a:	9300      	str	r3, [sp, #0]
 800a13c:	2300      	movs	r3, #0
 800a13e:	2100      	movs	r1, #0
 800a140:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a142:	f7ff fe05 	bl	8009d50 <xTimerGenericCommand>
 800a146:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a148:	6a3b      	ldr	r3, [r7, #32]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d14f      	bne.n	800a1ee <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a152:	f383 8811 	msr	BASEPRI, r3
 800a156:	f3bf 8f6f 	isb	sy
 800a15a:	f3bf 8f4f 	dsb	sy
 800a15e:	61bb      	str	r3, [r7, #24]
}
 800a160:	bf00      	nop
 800a162:	e7fe      	b.n	800a162 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a166:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a16a:	f023 0301 	bic.w	r3, r3, #1
 800a16e:	b2da      	uxtb	r2, r3
 800a170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a172:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a176:	e03a      	b.n	800a1ee <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a17a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a17e:	f043 0301 	orr.w	r3, r3, #1
 800a182:	b2da      	uxtb	r2, r3
 800a184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a186:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a18a:	68ba      	ldr	r2, [r7, #8]
 800a18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a18e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a192:	699b      	ldr	r3, [r3, #24]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d10a      	bne.n	800a1ae <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a19c:	f383 8811 	msr	BASEPRI, r3
 800a1a0:	f3bf 8f6f 	isb	sy
 800a1a4:	f3bf 8f4f 	dsb	sy
 800a1a8:	617b      	str	r3, [r7, #20]
}
 800a1aa:	bf00      	nop
 800a1ac:	e7fe      	b.n	800a1ac <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b0:	699a      	ldr	r2, [r3, #24]
 800a1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b4:	18d1      	adds	r1, r2, r3
 800a1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1bc:	f7ff ff06 	bl	8009fcc <prvInsertTimerInActiveList>
					break;
 800a1c0:	e015      	b.n	800a1ee <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1c8:	f003 0302 	and.w	r3, r3, #2
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d103      	bne.n	800a1d8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a1d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1d2:	f000 fc45 	bl	800aa60 <vPortFree>
 800a1d6:	e00a      	b.n	800a1ee <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1de:	f023 0301 	bic.w	r3, r3, #1
 800a1e2:	b2da      	uxtb	r2, r3
 800a1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a1ea:	e000      	b.n	800a1ee <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a1ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a1ee:	4b08      	ldr	r3, [pc, #32]	; (800a210 <prvProcessReceivedCommands+0x1c0>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	1d39      	adds	r1, r7, #4
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7fd ff78 	bl	80080ec <xQueueReceive>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	f47f af2a 	bne.w	800a058 <prvProcessReceivedCommands+0x8>
	}
}
 800a204:	bf00      	nop
 800a206:	bf00      	nop
 800a208:	3730      	adds	r7, #48	; 0x30
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
 800a20e:	bf00      	nop
 800a210:	20001964 	.word	0x20001964

0800a214 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b088      	sub	sp, #32
 800a218:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a21a:	e048      	b.n	800a2ae <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a21c:	4b2d      	ldr	r3, [pc, #180]	; (800a2d4 <prvSwitchTimerLists+0xc0>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	68db      	ldr	r3, [r3, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a226:	4b2b      	ldr	r3, [pc, #172]	; (800a2d4 <prvSwitchTimerLists+0xc0>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	68db      	ldr	r3, [r3, #12]
 800a22c:	68db      	ldr	r3, [r3, #12]
 800a22e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	3304      	adds	r3, #4
 800a234:	4618      	mov	r0, r3
 800a236:	f7fd fba1 	bl	800797c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	6a1b      	ldr	r3, [r3, #32]
 800a23e:	68f8      	ldr	r0, [r7, #12]
 800a240:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a248:	f003 0304 	and.w	r3, r3, #4
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d02e      	beq.n	800a2ae <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	699b      	ldr	r3, [r3, #24]
 800a254:	693a      	ldr	r2, [r7, #16]
 800a256:	4413      	add	r3, r2
 800a258:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a25a:	68ba      	ldr	r2, [r7, #8]
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	429a      	cmp	r2, r3
 800a260:	d90e      	bls.n	800a280 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	68ba      	ldr	r2, [r7, #8]
 800a266:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	68fa      	ldr	r2, [r7, #12]
 800a26c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a26e:	4b19      	ldr	r3, [pc, #100]	; (800a2d4 <prvSwitchTimerLists+0xc0>)
 800a270:	681a      	ldr	r2, [r3, #0]
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	3304      	adds	r3, #4
 800a276:	4619      	mov	r1, r3
 800a278:	4610      	mov	r0, r2
 800a27a:	f7fd fb46 	bl	800790a <vListInsert>
 800a27e:	e016      	b.n	800a2ae <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a280:	2300      	movs	r3, #0
 800a282:	9300      	str	r3, [sp, #0]
 800a284:	2300      	movs	r3, #0
 800a286:	693a      	ldr	r2, [r7, #16]
 800a288:	2100      	movs	r1, #0
 800a28a:	68f8      	ldr	r0, [r7, #12]
 800a28c:	f7ff fd60 	bl	8009d50 <xTimerGenericCommand>
 800a290:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d10a      	bne.n	800a2ae <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a29c:	f383 8811 	msr	BASEPRI, r3
 800a2a0:	f3bf 8f6f 	isb	sy
 800a2a4:	f3bf 8f4f 	dsb	sy
 800a2a8:	603b      	str	r3, [r7, #0]
}
 800a2aa:	bf00      	nop
 800a2ac:	e7fe      	b.n	800a2ac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a2ae:	4b09      	ldr	r3, [pc, #36]	; (800a2d4 <prvSwitchTimerLists+0xc0>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d1b1      	bne.n	800a21c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a2b8:	4b06      	ldr	r3, [pc, #24]	; (800a2d4 <prvSwitchTimerLists+0xc0>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a2be:	4b06      	ldr	r3, [pc, #24]	; (800a2d8 <prvSwitchTimerLists+0xc4>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4a04      	ldr	r2, [pc, #16]	; (800a2d4 <prvSwitchTimerLists+0xc0>)
 800a2c4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a2c6:	4a04      	ldr	r2, [pc, #16]	; (800a2d8 <prvSwitchTimerLists+0xc4>)
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	6013      	str	r3, [r2, #0]
}
 800a2cc:	bf00      	nop
 800a2ce:	3718      	adds	r7, #24
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}
 800a2d4:	2000195c 	.word	0x2000195c
 800a2d8:	20001960 	.word	0x20001960

0800a2dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b082      	sub	sp, #8
 800a2e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a2e2:	f000 f9cf 	bl	800a684 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a2e6:	4b15      	ldr	r3, [pc, #84]	; (800a33c <prvCheckForValidListAndQueue+0x60>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d120      	bne.n	800a330 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a2ee:	4814      	ldr	r0, [pc, #80]	; (800a340 <prvCheckForValidListAndQueue+0x64>)
 800a2f0:	f7fd faba 	bl	8007868 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a2f4:	4813      	ldr	r0, [pc, #76]	; (800a344 <prvCheckForValidListAndQueue+0x68>)
 800a2f6:	f7fd fab7 	bl	8007868 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a2fa:	4b13      	ldr	r3, [pc, #76]	; (800a348 <prvCheckForValidListAndQueue+0x6c>)
 800a2fc:	4a10      	ldr	r2, [pc, #64]	; (800a340 <prvCheckForValidListAndQueue+0x64>)
 800a2fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a300:	4b12      	ldr	r3, [pc, #72]	; (800a34c <prvCheckForValidListAndQueue+0x70>)
 800a302:	4a10      	ldr	r2, [pc, #64]	; (800a344 <prvCheckForValidListAndQueue+0x68>)
 800a304:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a306:	2300      	movs	r3, #0
 800a308:	9300      	str	r3, [sp, #0]
 800a30a:	4b11      	ldr	r3, [pc, #68]	; (800a350 <prvCheckForValidListAndQueue+0x74>)
 800a30c:	4a11      	ldr	r2, [pc, #68]	; (800a354 <prvCheckForValidListAndQueue+0x78>)
 800a30e:	2110      	movs	r1, #16
 800a310:	200a      	movs	r0, #10
 800a312:	f7fd fbc5 	bl	8007aa0 <xQueueGenericCreateStatic>
 800a316:	4603      	mov	r3, r0
 800a318:	4a08      	ldr	r2, [pc, #32]	; (800a33c <prvCheckForValidListAndQueue+0x60>)
 800a31a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a31c:	4b07      	ldr	r3, [pc, #28]	; (800a33c <prvCheckForValidListAndQueue+0x60>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d005      	beq.n	800a330 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a324:	4b05      	ldr	r3, [pc, #20]	; (800a33c <prvCheckForValidListAndQueue+0x60>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	490b      	ldr	r1, [pc, #44]	; (800a358 <prvCheckForValidListAndQueue+0x7c>)
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7fe fa96 	bl	800885c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a330:	f000 f9d8 	bl	800a6e4 <vPortExitCritical>
}
 800a334:	bf00      	nop
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop
 800a33c:	20001964 	.word	0x20001964
 800a340:	20001934 	.word	0x20001934
 800a344:	20001948 	.word	0x20001948
 800a348:	2000195c 	.word	0x2000195c
 800a34c:	20001960 	.word	0x20001960
 800a350:	20001a10 	.word	0x20001a10
 800a354:	20001970 	.word	0x20001970
 800a358:	0800e900 	.word	0x0800e900

0800a35c <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b086      	sub	sp, #24
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d10a      	bne.n	800a384 <xTimerIsTimerActive+0x28>
	__asm volatile
 800a36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a372:	f383 8811 	msr	BASEPRI, r3
 800a376:	f3bf 8f6f 	isb	sy
 800a37a:	f3bf 8f4f 	dsb	sy
 800a37e:	60fb      	str	r3, [r7, #12]
}
 800a380:	bf00      	nop
 800a382:	e7fe      	b.n	800a382 <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800a384:	f000 f97e 	bl	800a684 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a38e:	f003 0301 	and.w	r3, r3, #1
 800a392:	2b00      	cmp	r3, #0
 800a394:	d102      	bne.n	800a39c <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 800a396:	2300      	movs	r3, #0
 800a398:	617b      	str	r3, [r7, #20]
 800a39a:	e001      	b.n	800a3a0 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 800a39c:	2301      	movs	r3, #1
 800a39e:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800a3a0:	f000 f9a0 	bl	800a6e4 <vPortExitCritical>

	return xReturn;
 800a3a4:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3718      	adds	r7, #24
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}

0800a3ae <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800a3ae:	b580      	push	{r7, lr}
 800a3b0:	b086      	sub	sp, #24
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d10a      	bne.n	800a3d6 <pvTimerGetTimerID+0x28>
	__asm volatile
 800a3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c4:	f383 8811 	msr	BASEPRI, r3
 800a3c8:	f3bf 8f6f 	isb	sy
 800a3cc:	f3bf 8f4f 	dsb	sy
 800a3d0:	60fb      	str	r3, [r7, #12]
}
 800a3d2:	bf00      	nop
 800a3d4:	e7fe      	b.n	800a3d4 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800a3d6:	f000 f955 	bl	800a684 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	69db      	ldr	r3, [r3, #28]
 800a3de:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800a3e0:	f000 f980 	bl	800a6e4 <vPortExitCritical>

	return pvReturn;
 800a3e4:	693b      	ldr	r3, [r7, #16]
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3718      	adds	r7, #24
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
	...

0800a3f0 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b08a      	sub	sp, #40	; 0x28
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	60f8      	str	r0, [r7, #12]
 800a3f8:	60b9      	str	r1, [r7, #8]
 800a3fa:	607a      	str	r2, [r7, #4]
 800a3fc:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800a3fe:	f06f 0301 	mvn.w	r3, #1
 800a402:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a410:	4b06      	ldr	r3, [pc, #24]	; (800a42c <xTimerPendFunctionCallFromISR+0x3c>)
 800a412:	6818      	ldr	r0, [r3, #0]
 800a414:	f107 0114 	add.w	r1, r7, #20
 800a418:	2300      	movs	r3, #0
 800a41a:	683a      	ldr	r2, [r7, #0]
 800a41c:	f7fd fdca 	bl	8007fb4 <xQueueGenericSendFromISR>
 800a420:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800a422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a424:	4618      	mov	r0, r3
 800a426:	3728      	adds	r7, #40	; 0x28
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}
 800a42c:	20001964 	.word	0x20001964

0800a430 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a430:	b480      	push	{r7}
 800a432:	b085      	sub	sp, #20
 800a434:	af00      	add	r7, sp, #0
 800a436:	60f8      	str	r0, [r7, #12]
 800a438:	60b9      	str	r1, [r7, #8]
 800a43a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	3b04      	subs	r3, #4
 800a440:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a448:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	3b04      	subs	r3, #4
 800a44e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	f023 0201 	bic.w	r2, r3, #1
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	3b04      	subs	r3, #4
 800a45e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a460:	4a0c      	ldr	r2, [pc, #48]	; (800a494 <pxPortInitialiseStack+0x64>)
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	3b14      	subs	r3, #20
 800a46a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	3b04      	subs	r3, #4
 800a476:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f06f 0202 	mvn.w	r2, #2
 800a47e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	3b20      	subs	r3, #32
 800a484:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a486:	68fb      	ldr	r3, [r7, #12]
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3714      	adds	r7, #20
 800a48c:	46bd      	mov	sp, r7
 800a48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a492:	4770      	bx	lr
 800a494:	0800a499 	.word	0x0800a499

0800a498 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a498:	b480      	push	{r7}
 800a49a:	b085      	sub	sp, #20
 800a49c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a4a2:	4b12      	ldr	r3, [pc, #72]	; (800a4ec <prvTaskExitError+0x54>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4aa:	d00a      	beq.n	800a4c2 <prvTaskExitError+0x2a>
	__asm volatile
 800a4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b0:	f383 8811 	msr	BASEPRI, r3
 800a4b4:	f3bf 8f6f 	isb	sy
 800a4b8:	f3bf 8f4f 	dsb	sy
 800a4bc:	60fb      	str	r3, [r7, #12]
}
 800a4be:	bf00      	nop
 800a4c0:	e7fe      	b.n	800a4c0 <prvTaskExitError+0x28>
	__asm volatile
 800a4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c6:	f383 8811 	msr	BASEPRI, r3
 800a4ca:	f3bf 8f6f 	isb	sy
 800a4ce:	f3bf 8f4f 	dsb	sy
 800a4d2:	60bb      	str	r3, [r7, #8]
}
 800a4d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a4d6:	bf00      	nop
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d0fc      	beq.n	800a4d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a4de:	bf00      	nop
 800a4e0:	bf00      	nop
 800a4e2:	3714      	adds	r7, #20
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr
 800a4ec:	200001f0 	.word	0x200001f0

0800a4f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a4f0:	4b07      	ldr	r3, [pc, #28]	; (800a510 <pxCurrentTCBConst2>)
 800a4f2:	6819      	ldr	r1, [r3, #0]
 800a4f4:	6808      	ldr	r0, [r1, #0]
 800a4f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4fa:	f380 8809 	msr	PSP, r0
 800a4fe:	f3bf 8f6f 	isb	sy
 800a502:	f04f 0000 	mov.w	r0, #0
 800a506:	f380 8811 	msr	BASEPRI, r0
 800a50a:	4770      	bx	lr
 800a50c:	f3af 8000 	nop.w

0800a510 <pxCurrentTCBConst2>:
 800a510:	2000142c 	.word	0x2000142c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a514:	bf00      	nop
 800a516:	bf00      	nop

0800a518 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a518:	4808      	ldr	r0, [pc, #32]	; (800a53c <prvPortStartFirstTask+0x24>)
 800a51a:	6800      	ldr	r0, [r0, #0]
 800a51c:	6800      	ldr	r0, [r0, #0]
 800a51e:	f380 8808 	msr	MSP, r0
 800a522:	f04f 0000 	mov.w	r0, #0
 800a526:	f380 8814 	msr	CONTROL, r0
 800a52a:	b662      	cpsie	i
 800a52c:	b661      	cpsie	f
 800a52e:	f3bf 8f4f 	dsb	sy
 800a532:	f3bf 8f6f 	isb	sy
 800a536:	df00      	svc	0
 800a538:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a53a:	bf00      	nop
 800a53c:	e000ed08 	.word	0xe000ed08

0800a540 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b086      	sub	sp, #24
 800a544:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a546:	4b46      	ldr	r3, [pc, #280]	; (800a660 <xPortStartScheduler+0x120>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4a46      	ldr	r2, [pc, #280]	; (800a664 <xPortStartScheduler+0x124>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d10a      	bne.n	800a566 <xPortStartScheduler+0x26>
	__asm volatile
 800a550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a554:	f383 8811 	msr	BASEPRI, r3
 800a558:	f3bf 8f6f 	isb	sy
 800a55c:	f3bf 8f4f 	dsb	sy
 800a560:	613b      	str	r3, [r7, #16]
}
 800a562:	bf00      	nop
 800a564:	e7fe      	b.n	800a564 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a566:	4b3e      	ldr	r3, [pc, #248]	; (800a660 <xPortStartScheduler+0x120>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4a3f      	ldr	r2, [pc, #252]	; (800a668 <xPortStartScheduler+0x128>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d10a      	bne.n	800a586 <xPortStartScheduler+0x46>
	__asm volatile
 800a570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a574:	f383 8811 	msr	BASEPRI, r3
 800a578:	f3bf 8f6f 	isb	sy
 800a57c:	f3bf 8f4f 	dsb	sy
 800a580:	60fb      	str	r3, [r7, #12]
}
 800a582:	bf00      	nop
 800a584:	e7fe      	b.n	800a584 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a586:	4b39      	ldr	r3, [pc, #228]	; (800a66c <xPortStartScheduler+0x12c>)
 800a588:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	781b      	ldrb	r3, [r3, #0]
 800a58e:	b2db      	uxtb	r3, r3
 800a590:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	22ff      	movs	r2, #255	; 0xff
 800a596:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	b2db      	uxtb	r3, r3
 800a59e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a5a0:	78fb      	ldrb	r3, [r7, #3]
 800a5a2:	b2db      	uxtb	r3, r3
 800a5a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a5a8:	b2da      	uxtb	r2, r3
 800a5aa:	4b31      	ldr	r3, [pc, #196]	; (800a670 <xPortStartScheduler+0x130>)
 800a5ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a5ae:	4b31      	ldr	r3, [pc, #196]	; (800a674 <xPortStartScheduler+0x134>)
 800a5b0:	2207      	movs	r2, #7
 800a5b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a5b4:	e009      	b.n	800a5ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a5b6:	4b2f      	ldr	r3, [pc, #188]	; (800a674 <xPortStartScheduler+0x134>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	3b01      	subs	r3, #1
 800a5bc:	4a2d      	ldr	r2, [pc, #180]	; (800a674 <xPortStartScheduler+0x134>)
 800a5be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a5c0:	78fb      	ldrb	r3, [r7, #3]
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	005b      	lsls	r3, r3, #1
 800a5c6:	b2db      	uxtb	r3, r3
 800a5c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a5ca:	78fb      	ldrb	r3, [r7, #3]
 800a5cc:	b2db      	uxtb	r3, r3
 800a5ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5d2:	2b80      	cmp	r3, #128	; 0x80
 800a5d4:	d0ef      	beq.n	800a5b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a5d6:	4b27      	ldr	r3, [pc, #156]	; (800a674 <xPortStartScheduler+0x134>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f1c3 0307 	rsb	r3, r3, #7
 800a5de:	2b04      	cmp	r3, #4
 800a5e0:	d00a      	beq.n	800a5f8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e6:	f383 8811 	msr	BASEPRI, r3
 800a5ea:	f3bf 8f6f 	isb	sy
 800a5ee:	f3bf 8f4f 	dsb	sy
 800a5f2:	60bb      	str	r3, [r7, #8]
}
 800a5f4:	bf00      	nop
 800a5f6:	e7fe      	b.n	800a5f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a5f8:	4b1e      	ldr	r3, [pc, #120]	; (800a674 <xPortStartScheduler+0x134>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	021b      	lsls	r3, r3, #8
 800a5fe:	4a1d      	ldr	r2, [pc, #116]	; (800a674 <xPortStartScheduler+0x134>)
 800a600:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a602:	4b1c      	ldr	r3, [pc, #112]	; (800a674 <xPortStartScheduler+0x134>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a60a:	4a1a      	ldr	r2, [pc, #104]	; (800a674 <xPortStartScheduler+0x134>)
 800a60c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	b2da      	uxtb	r2, r3
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a616:	4b18      	ldr	r3, [pc, #96]	; (800a678 <xPortStartScheduler+0x138>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4a17      	ldr	r2, [pc, #92]	; (800a678 <xPortStartScheduler+0x138>)
 800a61c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a620:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a622:	4b15      	ldr	r3, [pc, #84]	; (800a678 <xPortStartScheduler+0x138>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	4a14      	ldr	r2, [pc, #80]	; (800a678 <xPortStartScheduler+0x138>)
 800a628:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a62c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a62e:	f000 f8dd 	bl	800a7ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a632:	4b12      	ldr	r3, [pc, #72]	; (800a67c <xPortStartScheduler+0x13c>)
 800a634:	2200      	movs	r2, #0
 800a636:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a638:	f000 f8fc 	bl	800a834 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a63c:	4b10      	ldr	r3, [pc, #64]	; (800a680 <xPortStartScheduler+0x140>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4a0f      	ldr	r2, [pc, #60]	; (800a680 <xPortStartScheduler+0x140>)
 800a642:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a646:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a648:	f7ff ff66 	bl	800a518 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a64c:	f7fe fd68 	bl	8009120 <vTaskSwitchContext>
	prvTaskExitError();
 800a650:	f7ff ff22 	bl	800a498 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a654:	2300      	movs	r3, #0
}
 800a656:	4618      	mov	r0, r3
 800a658:	3718      	adds	r7, #24
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	e000ed00 	.word	0xe000ed00
 800a664:	410fc271 	.word	0x410fc271
 800a668:	410fc270 	.word	0x410fc270
 800a66c:	e000e400 	.word	0xe000e400
 800a670:	20001a60 	.word	0x20001a60
 800a674:	20001a64 	.word	0x20001a64
 800a678:	e000ed20 	.word	0xe000ed20
 800a67c:	200001f0 	.word	0x200001f0
 800a680:	e000ef34 	.word	0xe000ef34

0800a684 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a684:	b480      	push	{r7}
 800a686:	b083      	sub	sp, #12
 800a688:	af00      	add	r7, sp, #0
	__asm volatile
 800a68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a68e:	f383 8811 	msr	BASEPRI, r3
 800a692:	f3bf 8f6f 	isb	sy
 800a696:	f3bf 8f4f 	dsb	sy
 800a69a:	607b      	str	r3, [r7, #4]
}
 800a69c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a69e:	4b0f      	ldr	r3, [pc, #60]	; (800a6dc <vPortEnterCritical+0x58>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	3301      	adds	r3, #1
 800a6a4:	4a0d      	ldr	r2, [pc, #52]	; (800a6dc <vPortEnterCritical+0x58>)
 800a6a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a6a8:	4b0c      	ldr	r3, [pc, #48]	; (800a6dc <vPortEnterCritical+0x58>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	2b01      	cmp	r3, #1
 800a6ae:	d10f      	bne.n	800a6d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a6b0:	4b0b      	ldr	r3, [pc, #44]	; (800a6e0 <vPortEnterCritical+0x5c>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	b2db      	uxtb	r3, r3
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d00a      	beq.n	800a6d0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a6ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6be:	f383 8811 	msr	BASEPRI, r3
 800a6c2:	f3bf 8f6f 	isb	sy
 800a6c6:	f3bf 8f4f 	dsb	sy
 800a6ca:	603b      	str	r3, [r7, #0]
}
 800a6cc:	bf00      	nop
 800a6ce:	e7fe      	b.n	800a6ce <vPortEnterCritical+0x4a>
	}
}
 800a6d0:	bf00      	nop
 800a6d2:	370c      	adds	r7, #12
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr
 800a6dc:	200001f0 	.word	0x200001f0
 800a6e0:	e000ed04 	.word	0xe000ed04

0800a6e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b083      	sub	sp, #12
 800a6e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a6ea:	4b12      	ldr	r3, [pc, #72]	; (800a734 <vPortExitCritical+0x50>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d10a      	bne.n	800a708 <vPortExitCritical+0x24>
	__asm volatile
 800a6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f6:	f383 8811 	msr	BASEPRI, r3
 800a6fa:	f3bf 8f6f 	isb	sy
 800a6fe:	f3bf 8f4f 	dsb	sy
 800a702:	607b      	str	r3, [r7, #4]
}
 800a704:	bf00      	nop
 800a706:	e7fe      	b.n	800a706 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a708:	4b0a      	ldr	r3, [pc, #40]	; (800a734 <vPortExitCritical+0x50>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	3b01      	subs	r3, #1
 800a70e:	4a09      	ldr	r2, [pc, #36]	; (800a734 <vPortExitCritical+0x50>)
 800a710:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a712:	4b08      	ldr	r3, [pc, #32]	; (800a734 <vPortExitCritical+0x50>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d105      	bne.n	800a726 <vPortExitCritical+0x42>
 800a71a:	2300      	movs	r3, #0
 800a71c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	f383 8811 	msr	BASEPRI, r3
}
 800a724:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a726:	bf00      	nop
 800a728:	370c      	adds	r7, #12
 800a72a:	46bd      	mov	sp, r7
 800a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a730:	4770      	bx	lr
 800a732:	bf00      	nop
 800a734:	200001f0 	.word	0x200001f0
	...

0800a740 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a740:	f3ef 8009 	mrs	r0, PSP
 800a744:	f3bf 8f6f 	isb	sy
 800a748:	4b15      	ldr	r3, [pc, #84]	; (800a7a0 <pxCurrentTCBConst>)
 800a74a:	681a      	ldr	r2, [r3, #0]
 800a74c:	f01e 0f10 	tst.w	lr, #16
 800a750:	bf08      	it	eq
 800a752:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a756:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a75a:	6010      	str	r0, [r2, #0]
 800a75c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a760:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a764:	f380 8811 	msr	BASEPRI, r0
 800a768:	f3bf 8f4f 	dsb	sy
 800a76c:	f3bf 8f6f 	isb	sy
 800a770:	f7fe fcd6 	bl	8009120 <vTaskSwitchContext>
 800a774:	f04f 0000 	mov.w	r0, #0
 800a778:	f380 8811 	msr	BASEPRI, r0
 800a77c:	bc09      	pop	{r0, r3}
 800a77e:	6819      	ldr	r1, [r3, #0]
 800a780:	6808      	ldr	r0, [r1, #0]
 800a782:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a786:	f01e 0f10 	tst.w	lr, #16
 800a78a:	bf08      	it	eq
 800a78c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a790:	f380 8809 	msr	PSP, r0
 800a794:	f3bf 8f6f 	isb	sy
 800a798:	4770      	bx	lr
 800a79a:	bf00      	nop
 800a79c:	f3af 8000 	nop.w

0800a7a0 <pxCurrentTCBConst>:
 800a7a0:	2000142c 	.word	0x2000142c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a7a4:	bf00      	nop
 800a7a6:	bf00      	nop

0800a7a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b082      	sub	sp, #8
 800a7ac:	af00      	add	r7, sp, #0
	__asm volatile
 800a7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b2:	f383 8811 	msr	BASEPRI, r3
 800a7b6:	f3bf 8f6f 	isb	sy
 800a7ba:	f3bf 8f4f 	dsb	sy
 800a7be:	607b      	str	r3, [r7, #4]
}
 800a7c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a7c2:	f7fe fbf3 	bl	8008fac <xTaskIncrementTick>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d003      	beq.n	800a7d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a7cc:	4b06      	ldr	r3, [pc, #24]	; (800a7e8 <xPortSysTickHandler+0x40>)
 800a7ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7d2:	601a      	str	r2, [r3, #0]
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	f383 8811 	msr	BASEPRI, r3
}
 800a7de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a7e0:	bf00      	nop
 800a7e2:	3708      	adds	r7, #8
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}
 800a7e8:	e000ed04 	.word	0xe000ed04

0800a7ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a7f0:	4b0b      	ldr	r3, [pc, #44]	; (800a820 <vPortSetupTimerInterrupt+0x34>)
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a7f6:	4b0b      	ldr	r3, [pc, #44]	; (800a824 <vPortSetupTimerInterrupt+0x38>)
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a7fc:	4b0a      	ldr	r3, [pc, #40]	; (800a828 <vPortSetupTimerInterrupt+0x3c>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4a0a      	ldr	r2, [pc, #40]	; (800a82c <vPortSetupTimerInterrupt+0x40>)
 800a802:	fba2 2303 	umull	r2, r3, r2, r3
 800a806:	099b      	lsrs	r3, r3, #6
 800a808:	4a09      	ldr	r2, [pc, #36]	; (800a830 <vPortSetupTimerInterrupt+0x44>)
 800a80a:	3b01      	subs	r3, #1
 800a80c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a80e:	4b04      	ldr	r3, [pc, #16]	; (800a820 <vPortSetupTimerInterrupt+0x34>)
 800a810:	2207      	movs	r2, #7
 800a812:	601a      	str	r2, [r3, #0]
}
 800a814:	bf00      	nop
 800a816:	46bd      	mov	sp, r7
 800a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81c:	4770      	bx	lr
 800a81e:	bf00      	nop
 800a820:	e000e010 	.word	0xe000e010
 800a824:	e000e018 	.word	0xe000e018
 800a828:	200001e8 	.word	0x200001e8
 800a82c:	10624dd3 	.word	0x10624dd3
 800a830:	e000e014 	.word	0xe000e014

0800a834 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a834:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a844 <vPortEnableVFP+0x10>
 800a838:	6801      	ldr	r1, [r0, #0]
 800a83a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a83e:	6001      	str	r1, [r0, #0]
 800a840:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a842:	bf00      	nop
 800a844:	e000ed88 	.word	0xe000ed88

0800a848 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a848:	b480      	push	{r7}
 800a84a:	b085      	sub	sp, #20
 800a84c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a84e:	f3ef 8305 	mrs	r3, IPSR
 800a852:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2b0f      	cmp	r3, #15
 800a858:	d914      	bls.n	800a884 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a85a:	4a17      	ldr	r2, [pc, #92]	; (800a8b8 <vPortValidateInterruptPriority+0x70>)
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	4413      	add	r3, r2
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a864:	4b15      	ldr	r3, [pc, #84]	; (800a8bc <vPortValidateInterruptPriority+0x74>)
 800a866:	781b      	ldrb	r3, [r3, #0]
 800a868:	7afa      	ldrb	r2, [r7, #11]
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d20a      	bcs.n	800a884 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a872:	f383 8811 	msr	BASEPRI, r3
 800a876:	f3bf 8f6f 	isb	sy
 800a87a:	f3bf 8f4f 	dsb	sy
 800a87e:	607b      	str	r3, [r7, #4]
}
 800a880:	bf00      	nop
 800a882:	e7fe      	b.n	800a882 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a884:	4b0e      	ldr	r3, [pc, #56]	; (800a8c0 <vPortValidateInterruptPriority+0x78>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a88c:	4b0d      	ldr	r3, [pc, #52]	; (800a8c4 <vPortValidateInterruptPriority+0x7c>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	429a      	cmp	r2, r3
 800a892:	d90a      	bls.n	800a8aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a898:	f383 8811 	msr	BASEPRI, r3
 800a89c:	f3bf 8f6f 	isb	sy
 800a8a0:	f3bf 8f4f 	dsb	sy
 800a8a4:	603b      	str	r3, [r7, #0]
}
 800a8a6:	bf00      	nop
 800a8a8:	e7fe      	b.n	800a8a8 <vPortValidateInterruptPriority+0x60>
	}
 800a8aa:	bf00      	nop
 800a8ac:	3714      	adds	r7, #20
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b4:	4770      	bx	lr
 800a8b6:	bf00      	nop
 800a8b8:	e000e3f0 	.word	0xe000e3f0
 800a8bc:	20001a60 	.word	0x20001a60
 800a8c0:	e000ed0c 	.word	0xe000ed0c
 800a8c4:	20001a64 	.word	0x20001a64

0800a8c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b08a      	sub	sp, #40	; 0x28
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a8d4:	f7fe faae 	bl	8008e34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a8d8:	4b5b      	ldr	r3, [pc, #364]	; (800aa48 <pvPortMalloc+0x180>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d101      	bne.n	800a8e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a8e0:	f000 f920 	bl	800ab24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a8e4:	4b59      	ldr	r3, [pc, #356]	; (800aa4c <pvPortMalloc+0x184>)
 800a8e6:	681a      	ldr	r2, [r3, #0]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	4013      	ands	r3, r2
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	f040 8093 	bne.w	800aa18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d01d      	beq.n	800a934 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a8f8:	2208      	movs	r2, #8
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	4413      	add	r3, r2
 800a8fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f003 0307 	and.w	r3, r3, #7
 800a906:	2b00      	cmp	r3, #0
 800a908:	d014      	beq.n	800a934 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f023 0307 	bic.w	r3, r3, #7
 800a910:	3308      	adds	r3, #8
 800a912:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f003 0307 	and.w	r3, r3, #7
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d00a      	beq.n	800a934 <pvPortMalloc+0x6c>
	__asm volatile
 800a91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a922:	f383 8811 	msr	BASEPRI, r3
 800a926:	f3bf 8f6f 	isb	sy
 800a92a:	f3bf 8f4f 	dsb	sy
 800a92e:	617b      	str	r3, [r7, #20]
}
 800a930:	bf00      	nop
 800a932:	e7fe      	b.n	800a932 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d06e      	beq.n	800aa18 <pvPortMalloc+0x150>
 800a93a:	4b45      	ldr	r3, [pc, #276]	; (800aa50 <pvPortMalloc+0x188>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	687a      	ldr	r2, [r7, #4]
 800a940:	429a      	cmp	r2, r3
 800a942:	d869      	bhi.n	800aa18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a944:	4b43      	ldr	r3, [pc, #268]	; (800aa54 <pvPortMalloc+0x18c>)
 800a946:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a948:	4b42      	ldr	r3, [pc, #264]	; (800aa54 <pvPortMalloc+0x18c>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a94e:	e004      	b.n	800a95a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a952:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a95c:	685b      	ldr	r3, [r3, #4]
 800a95e:	687a      	ldr	r2, [r7, #4]
 800a960:	429a      	cmp	r2, r3
 800a962:	d903      	bls.n	800a96c <pvPortMalloc+0xa4>
 800a964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d1f1      	bne.n	800a950 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a96c:	4b36      	ldr	r3, [pc, #216]	; (800aa48 <pvPortMalloc+0x180>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a972:	429a      	cmp	r2, r3
 800a974:	d050      	beq.n	800aa18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a976:	6a3b      	ldr	r3, [r7, #32]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	2208      	movs	r2, #8
 800a97c:	4413      	add	r3, r2
 800a97e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a982:	681a      	ldr	r2, [r3, #0]
 800a984:	6a3b      	ldr	r3, [r7, #32]
 800a986:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a98a:	685a      	ldr	r2, [r3, #4]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	1ad2      	subs	r2, r2, r3
 800a990:	2308      	movs	r3, #8
 800a992:	005b      	lsls	r3, r3, #1
 800a994:	429a      	cmp	r2, r3
 800a996:	d91f      	bls.n	800a9d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	4413      	add	r3, r2
 800a99e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a9a0:	69bb      	ldr	r3, [r7, #24]
 800a9a2:	f003 0307 	and.w	r3, r3, #7
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d00a      	beq.n	800a9c0 <pvPortMalloc+0xf8>
	__asm volatile
 800a9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ae:	f383 8811 	msr	BASEPRI, r3
 800a9b2:	f3bf 8f6f 	isb	sy
 800a9b6:	f3bf 8f4f 	dsb	sy
 800a9ba:	613b      	str	r3, [r7, #16]
}
 800a9bc:	bf00      	nop
 800a9be:	e7fe      	b.n	800a9be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c2:	685a      	ldr	r2, [r3, #4]
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	1ad2      	subs	r2, r2, r3
 800a9c8:	69bb      	ldr	r3, [r7, #24]
 800a9ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a9d2:	69b8      	ldr	r0, [r7, #24]
 800a9d4:	f000 f908 	bl	800abe8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a9d8:	4b1d      	ldr	r3, [pc, #116]	; (800aa50 <pvPortMalloc+0x188>)
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9de:	685b      	ldr	r3, [r3, #4]
 800a9e0:	1ad3      	subs	r3, r2, r3
 800a9e2:	4a1b      	ldr	r2, [pc, #108]	; (800aa50 <pvPortMalloc+0x188>)
 800a9e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a9e6:	4b1a      	ldr	r3, [pc, #104]	; (800aa50 <pvPortMalloc+0x188>)
 800a9e8:	681a      	ldr	r2, [r3, #0]
 800a9ea:	4b1b      	ldr	r3, [pc, #108]	; (800aa58 <pvPortMalloc+0x190>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d203      	bcs.n	800a9fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a9f2:	4b17      	ldr	r3, [pc, #92]	; (800aa50 <pvPortMalloc+0x188>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	4a18      	ldr	r2, [pc, #96]	; (800aa58 <pvPortMalloc+0x190>)
 800a9f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9fc:	685a      	ldr	r2, [r3, #4]
 800a9fe:	4b13      	ldr	r3, [pc, #76]	; (800aa4c <pvPortMalloc+0x184>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	431a      	orrs	r2, r3
 800aa04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aa08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800aa0e:	4b13      	ldr	r3, [pc, #76]	; (800aa5c <pvPortMalloc+0x194>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	3301      	adds	r3, #1
 800aa14:	4a11      	ldr	r2, [pc, #68]	; (800aa5c <pvPortMalloc+0x194>)
 800aa16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aa18:	f7fe fa1a 	bl	8008e50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa1c:	69fb      	ldr	r3, [r7, #28]
 800aa1e:	f003 0307 	and.w	r3, r3, #7
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d00a      	beq.n	800aa3c <pvPortMalloc+0x174>
	__asm volatile
 800aa26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa2a:	f383 8811 	msr	BASEPRI, r3
 800aa2e:	f3bf 8f6f 	isb	sy
 800aa32:	f3bf 8f4f 	dsb	sy
 800aa36:	60fb      	str	r3, [r7, #12]
}
 800aa38:	bf00      	nop
 800aa3a:	e7fe      	b.n	800aa3a <pvPortMalloc+0x172>
	return pvReturn;
 800aa3c:	69fb      	ldr	r3, [r7, #28]
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3728      	adds	r7, #40	; 0x28
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}
 800aa46:	bf00      	nop
 800aa48:	20005670 	.word	0x20005670
 800aa4c:	20005684 	.word	0x20005684
 800aa50:	20005674 	.word	0x20005674
 800aa54:	20005668 	.word	0x20005668
 800aa58:	20005678 	.word	0x20005678
 800aa5c:	2000567c 	.word	0x2000567c

0800aa60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b086      	sub	sp, #24
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d04d      	beq.n	800ab0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aa72:	2308      	movs	r3, #8
 800aa74:	425b      	negs	r3, r3
 800aa76:	697a      	ldr	r2, [r7, #20]
 800aa78:	4413      	add	r3, r2
 800aa7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	685a      	ldr	r2, [r3, #4]
 800aa84:	4b24      	ldr	r3, [pc, #144]	; (800ab18 <vPortFree+0xb8>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	4013      	ands	r3, r2
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d10a      	bne.n	800aaa4 <vPortFree+0x44>
	__asm volatile
 800aa8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa92:	f383 8811 	msr	BASEPRI, r3
 800aa96:	f3bf 8f6f 	isb	sy
 800aa9a:	f3bf 8f4f 	dsb	sy
 800aa9e:	60fb      	str	r3, [r7, #12]
}
 800aaa0:	bf00      	nop
 800aaa2:	e7fe      	b.n	800aaa2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d00a      	beq.n	800aac2 <vPortFree+0x62>
	__asm volatile
 800aaac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab0:	f383 8811 	msr	BASEPRI, r3
 800aab4:	f3bf 8f6f 	isb	sy
 800aab8:	f3bf 8f4f 	dsb	sy
 800aabc:	60bb      	str	r3, [r7, #8]
}
 800aabe:	bf00      	nop
 800aac0:	e7fe      	b.n	800aac0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	685a      	ldr	r2, [r3, #4]
 800aac6:	4b14      	ldr	r3, [pc, #80]	; (800ab18 <vPortFree+0xb8>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	4013      	ands	r3, r2
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d01e      	beq.n	800ab0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d11a      	bne.n	800ab0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	685a      	ldr	r2, [r3, #4]
 800aadc:	4b0e      	ldr	r3, [pc, #56]	; (800ab18 <vPortFree+0xb8>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	43db      	mvns	r3, r3
 800aae2:	401a      	ands	r2, r3
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aae8:	f7fe f9a4 	bl	8008e34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	685a      	ldr	r2, [r3, #4]
 800aaf0:	4b0a      	ldr	r3, [pc, #40]	; (800ab1c <vPortFree+0xbc>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	4413      	add	r3, r2
 800aaf6:	4a09      	ldr	r2, [pc, #36]	; (800ab1c <vPortFree+0xbc>)
 800aaf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aafa:	6938      	ldr	r0, [r7, #16]
 800aafc:	f000 f874 	bl	800abe8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ab00:	4b07      	ldr	r3, [pc, #28]	; (800ab20 <vPortFree+0xc0>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	3301      	adds	r3, #1
 800ab06:	4a06      	ldr	r2, [pc, #24]	; (800ab20 <vPortFree+0xc0>)
 800ab08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ab0a:	f7fe f9a1 	bl	8008e50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ab0e:	bf00      	nop
 800ab10:	3718      	adds	r7, #24
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop
 800ab18:	20005684 	.word	0x20005684
 800ab1c:	20005674 	.word	0x20005674
 800ab20:	20005680 	.word	0x20005680

0800ab24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ab24:	b480      	push	{r7}
 800ab26:	b085      	sub	sp, #20
 800ab28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ab2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ab2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ab30:	4b27      	ldr	r3, [pc, #156]	; (800abd0 <prvHeapInit+0xac>)
 800ab32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	f003 0307 	and.w	r3, r3, #7
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d00c      	beq.n	800ab58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	3307      	adds	r3, #7
 800ab42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	f023 0307 	bic.w	r3, r3, #7
 800ab4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ab4c:	68ba      	ldr	r2, [r7, #8]
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	1ad3      	subs	r3, r2, r3
 800ab52:	4a1f      	ldr	r2, [pc, #124]	; (800abd0 <prvHeapInit+0xac>)
 800ab54:	4413      	add	r3, r2
 800ab56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ab5c:	4a1d      	ldr	r2, [pc, #116]	; (800abd4 <prvHeapInit+0xb0>)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ab62:	4b1c      	ldr	r3, [pc, #112]	; (800abd4 <prvHeapInit+0xb0>)
 800ab64:	2200      	movs	r2, #0
 800ab66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	68ba      	ldr	r2, [r7, #8]
 800ab6c:	4413      	add	r3, r2
 800ab6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ab70:	2208      	movs	r2, #8
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	1a9b      	subs	r3, r3, r2
 800ab76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	f023 0307 	bic.w	r3, r3, #7
 800ab7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	4a15      	ldr	r2, [pc, #84]	; (800abd8 <prvHeapInit+0xb4>)
 800ab84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ab86:	4b14      	ldr	r3, [pc, #80]	; (800abd8 <prvHeapInit+0xb4>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ab8e:	4b12      	ldr	r3, [pc, #72]	; (800abd8 <prvHeapInit+0xb4>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	2200      	movs	r2, #0
 800ab94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	68fa      	ldr	r2, [r7, #12]
 800ab9e:	1ad2      	subs	r2, r2, r3
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aba4:	4b0c      	ldr	r3, [pc, #48]	; (800abd8 <prvHeapInit+0xb4>)
 800aba6:	681a      	ldr	r2, [r3, #0]
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	4a0a      	ldr	r2, [pc, #40]	; (800abdc <prvHeapInit+0xb8>)
 800abb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	4a09      	ldr	r2, [pc, #36]	; (800abe0 <prvHeapInit+0xbc>)
 800abba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800abbc:	4b09      	ldr	r3, [pc, #36]	; (800abe4 <prvHeapInit+0xc0>)
 800abbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800abc2:	601a      	str	r2, [r3, #0]
}
 800abc4:	bf00      	nop
 800abc6:	3714      	adds	r7, #20
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr
 800abd0:	20001a68 	.word	0x20001a68
 800abd4:	20005668 	.word	0x20005668
 800abd8:	20005670 	.word	0x20005670
 800abdc:	20005678 	.word	0x20005678
 800abe0:	20005674 	.word	0x20005674
 800abe4:	20005684 	.word	0x20005684

0800abe8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800abe8:	b480      	push	{r7}
 800abea:	b085      	sub	sp, #20
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800abf0:	4b28      	ldr	r3, [pc, #160]	; (800ac94 <prvInsertBlockIntoFreeList+0xac>)
 800abf2:	60fb      	str	r3, [r7, #12]
 800abf4:	e002      	b.n	800abfc <prvInsertBlockIntoFreeList+0x14>
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	60fb      	str	r3, [r7, #12]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	687a      	ldr	r2, [r7, #4]
 800ac02:	429a      	cmp	r2, r3
 800ac04:	d8f7      	bhi.n	800abf6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	68ba      	ldr	r2, [r7, #8]
 800ac10:	4413      	add	r3, r2
 800ac12:	687a      	ldr	r2, [r7, #4]
 800ac14:	429a      	cmp	r2, r3
 800ac16:	d108      	bne.n	800ac2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	685a      	ldr	r2, [r3, #4]
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	685b      	ldr	r3, [r3, #4]
 800ac20:	441a      	add	r2, r3
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	685b      	ldr	r3, [r3, #4]
 800ac32:	68ba      	ldr	r2, [r7, #8]
 800ac34:	441a      	add	r2, r3
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	429a      	cmp	r2, r3
 800ac3c:	d118      	bne.n	800ac70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	681a      	ldr	r2, [r3, #0]
 800ac42:	4b15      	ldr	r3, [pc, #84]	; (800ac98 <prvInsertBlockIntoFreeList+0xb0>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d00d      	beq.n	800ac66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	685a      	ldr	r2, [r3, #4]
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	441a      	add	r2, r3
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	681a      	ldr	r2, [r3, #0]
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	601a      	str	r2, [r3, #0]
 800ac64:	e008      	b.n	800ac78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ac66:	4b0c      	ldr	r3, [pc, #48]	; (800ac98 <prvInsertBlockIntoFreeList+0xb0>)
 800ac68:	681a      	ldr	r2, [r3, #0]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	601a      	str	r2, [r3, #0]
 800ac6e:	e003      	b.n	800ac78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681a      	ldr	r2, [r3, #0]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ac78:	68fa      	ldr	r2, [r7, #12]
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	d002      	beq.n	800ac86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	687a      	ldr	r2, [r7, #4]
 800ac84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac86:	bf00      	nop
 800ac88:	3714      	adds	r7, #20
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac90:	4770      	bx	lr
 800ac92:	bf00      	nop
 800ac94:	20005668 	.word	0x20005668
 800ac98:	20005670 	.word	0x20005670

0800ac9c <Circ_Buffer_advance_pointer>:
static bool Circ_Buffer_advance_pointer (cbuf_handle_t cbuf_handle);
static bool CIRC_Buffer_retreat_pointer (cbuf_handle_t cbuf_handle);
/**********************************************************************************************************************
 * Definitions of private functions
 *********************************************************************************************************************/
static bool Circ_Buffer_advance_pointer (cbuf_handle_t cbuf_handle) {
 800ac9c:	b480      	push	{r7}
 800ac9e:	b083      	sub	sp, #12
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
    if (cbuf_handle == NULL) {
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d101      	bne.n	800acae <Circ_Buffer_advance_pointer+0x12>
        return false;
 800acaa:	2300      	movs	r3, #0
 800acac:	e02b      	b.n	800ad06 <Circ_Buffer_advance_pointer+0x6a>
    }

    if (cbuf_handle->full) {
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	7c1b      	ldrb	r3, [r3, #16]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d00d      	beq.n	800acd2 <Circ_Buffer_advance_pointer+0x36>
        if (++(cbuf_handle->tail) == cbuf_handle->size) {
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	689b      	ldr	r3, [r3, #8]
 800acba:	1c5a      	adds	r2, r3, #1
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	609a      	str	r2, [r3, #8]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	689a      	ldr	r2, [r3, #8]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	68db      	ldr	r3, [r3, #12]
 800acc8:	429a      	cmp	r2, r3
 800acca:	d102      	bne.n	800acd2 <Circ_Buffer_advance_pointer+0x36>
            cbuf_handle->tail = 0;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2200      	movs	r2, #0
 800acd0:	609a      	str	r2, [r3, #8]
        }
    }

    if (++(cbuf_handle->head) == cbuf_handle->size) {
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	685b      	ldr	r3, [r3, #4]
 800acd6:	1c5a      	adds	r2, r3, #1
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	605a      	str	r2, [r3, #4]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	685a      	ldr	r2, [r3, #4]
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	68db      	ldr	r3, [r3, #12]
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d102      	bne.n	800acee <Circ_Buffer_advance_pointer+0x52>
        cbuf_handle->head = 0;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2200      	movs	r2, #0
 800acec:	605a      	str	r2, [r3, #4]
    }
    cbuf_handle->full = (cbuf_handle->head == cbuf_handle->tail);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	685a      	ldr	r2, [r3, #4]
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	689b      	ldr	r3, [r3, #8]
 800acf6:	429a      	cmp	r2, r3
 800acf8:	bf0c      	ite	eq
 800acfa:	2301      	moveq	r3, #1
 800acfc:	2300      	movne	r3, #0
 800acfe:	b2da      	uxtb	r2, r3
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	741a      	strb	r2, [r3, #16]
    return true;
 800ad04:	2301      	movs	r3, #1
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	370c      	adds	r7, #12
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad10:	4770      	bx	lr

0800ad12 <CIRC_Buffer_retreat_pointer>:

static bool CIRC_Buffer_retreat_pointer (cbuf_handle_t cbuf_handle) {
 800ad12:	b480      	push	{r7}
 800ad14:	b083      	sub	sp, #12
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
    if (cbuf_handle == NULL) {
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d101      	bne.n	800ad24 <CIRC_Buffer_retreat_pointer+0x12>
        return false;
 800ad20:	2300      	movs	r3, #0
 800ad22:	e011      	b.n	800ad48 <CIRC_Buffer_retreat_pointer+0x36>
    }

    cbuf_handle->full = false;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2200      	movs	r2, #0
 800ad28:	741a      	strb	r2, [r3, #16]
    if (++(cbuf_handle->tail) == cbuf_handle->size)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	689b      	ldr	r3, [r3, #8]
 800ad2e:	1c5a      	adds	r2, r3, #1
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	609a      	str	r2, [r3, #8]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	689a      	ldr	r2, [r3, #8]
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	68db      	ldr	r3, [r3, #12]
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d102      	bne.n	800ad46 <CIRC_Buffer_retreat_pointer+0x34>
        {
        cbuf_handle->tail = 0;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2200      	movs	r2, #0
 800ad44:	609a      	str	r2, [r3, #8]
    }
    return true;
 800ad46:	2301      	movs	r3, #1
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	370c      	adds	r7, #12
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr

0800ad54 <CIRC_Buffer_init>:

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/
cbuf_handle_t CIRC_Buffer_init (size_t size) {
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b084      	sub	sp, #16
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
    cbuf_handle_t cbuf_handle = calloc(1, sizeof(circular_buf_t));
 800ad5c:	2114      	movs	r1, #20
 800ad5e:	2001      	movs	r0, #1
 800ad60:	f000 fb5c 	bl	800b41c <calloc>
 800ad64:	4603      	mov	r3, r0
 800ad66:	60fb      	str	r3, [r7, #12]
    if (cbuf_handle == NULL) {
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d101      	bne.n	800ad72 <CIRC_Buffer_init+0x1e>
        return NULL;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	e017      	b.n	800ada2 <CIRC_Buffer_init+0x4e>
    }

    cbuf_handle->buffer = calloc(size, sizeof(uint8_t));
 800ad72:	2101      	movs	r1, #1
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f000 fb51 	bl	800b41c <calloc>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	601a      	str	r2, [r3, #0]
    if (cbuf_handle->buffer == NULL) {
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d104      	bne.n	800ad94 <CIRC_Buffer_init+0x40>
        free(cbuf_handle);
 800ad8a:	68f8      	ldr	r0, [r7, #12]
 800ad8c:	f000 fd96 	bl	800b8bc <free>
        return NULL;
 800ad90:	2300      	movs	r3, #0
 800ad92:	e006      	b.n	800ada2 <CIRC_Buffer_init+0x4e>
    }
    cbuf_handle->size = size;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	687a      	ldr	r2, [r7, #4]
 800ad98:	60da      	str	r2, [r3, #12]
    CIRC_Buffer_reset(cbuf_handle);
 800ad9a:	68f8      	ldr	r0, [r7, #12]
 800ad9c:	f000 f805 	bl	800adaa <CIRC_Buffer_reset>

    return cbuf_handle;
 800ada0:	68fb      	ldr	r3, [r7, #12]
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3710      	adds	r7, #16
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}

0800adaa <CIRC_Buffer_reset>:

bool CIRC_Buffer_reset (cbuf_handle_t cbuf_handle) {
 800adaa:	b480      	push	{r7}
 800adac:	b083      	sub	sp, #12
 800adae:	af00      	add	r7, sp, #0
 800adb0:	6078      	str	r0, [r7, #4]
    if (cbuf_handle == NULL) {
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d101      	bne.n	800adbc <CIRC_Buffer_reset+0x12>
        return false;
 800adb8:	2300      	movs	r3, #0
 800adba:	e009      	b.n	800add0 <CIRC_Buffer_reset+0x26>
    }

    cbuf_handle->head = 0;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2200      	movs	r2, #0
 800adc0:	605a      	str	r2, [r3, #4]
    cbuf_handle->tail = 0;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2200      	movs	r2, #0
 800adc6:	609a      	str	r2, [r3, #8]
    cbuf_handle->full = false;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2200      	movs	r2, #0
 800adcc:	741a      	strb	r2, [r3, #16]

    return true;
 800adce:	2301      	movs	r3, #1
}
 800add0:	4618      	mov	r0, r3
 800add2:	370c      	adds	r7, #12
 800add4:	46bd      	mov	sp, r7
 800add6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adda:	4770      	bx	lr

0800addc <CIRC_Buffer_empty>:
        return false;
    }
    return cbuf_handle->full;
}

bool CIRC_Buffer_empty (cbuf_handle_t cbuf_handle) {
 800addc:	b480      	push	{r7}
 800adde:	b083      	sub	sp, #12
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
    if (cbuf_handle == NULL) {
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d101      	bne.n	800adee <CIRC_Buffer_empty+0x12>
        return false;
 800adea:	2300      	movs	r3, #0
 800adec:	e012      	b.n	800ae14 <CIRC_Buffer_empty+0x38>
    }
    return (!cbuf_handle->full && (cbuf_handle->head == cbuf_handle->tail));
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	7c1b      	ldrb	r3, [r3, #16]
 800adf2:	f083 0301 	eor.w	r3, r3, #1
 800adf6:	b2db      	uxtb	r3, r3
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d007      	beq.n	800ae0c <CIRC_Buffer_empty+0x30>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	685a      	ldr	r2, [r3, #4]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	689b      	ldr	r3, [r3, #8]
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d101      	bne.n	800ae0c <CIRC_Buffer_empty+0x30>
 800ae08:	2301      	movs	r3, #1
 800ae0a:	e000      	b.n	800ae0e <CIRC_Buffer_empty+0x32>
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	f003 0301 	and.w	r3, r3, #1
 800ae12:	b2db      	uxtb	r3, r3
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	370c      	adds	r7, #12
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1e:	4770      	bx	lr

0800ae20 <CIRC_Buffer_put>:
    }

    return size;
}

bool CIRC_Buffer_put (cbuf_handle_t cbuf_handle, uint8_t data) {
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b082      	sub	sp, #8
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	460b      	mov	r3, r1
 800ae2a:	70fb      	strb	r3, [r7, #3]
    if (cbuf_handle == NULL) {
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d101      	bne.n	800ae36 <CIRC_Buffer_put+0x16>
        return false;
 800ae32:	2300      	movs	r3, #0
 800ae34:	e00a      	b.n	800ae4c <CIRC_Buffer_put+0x2c>
    }
    cbuf_handle->buffer[cbuf_handle->head] = data;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681a      	ldr	r2, [r3, #0]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	685b      	ldr	r3, [r3, #4]
 800ae3e:	4413      	add	r3, r2
 800ae40:	78fa      	ldrb	r2, [r7, #3]
 800ae42:	701a      	strb	r2, [r3, #0]
    return Circ_Buffer_advance_pointer(cbuf_handle);
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f7ff ff29 	bl	800ac9c <Circ_Buffer_advance_pointer>
 800ae4a:	4603      	mov	r3, r0
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3708      	adds	r7, #8
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <CIRC_Buffer_get>:
    }

    return r;
}

bool CIRC_Buffer_get (cbuf_handle_t cbuf_handle, uint8_t *data) {
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b084      	sub	sp, #16
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	6039      	str	r1, [r7, #0]
    bool ret = false;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	73fb      	strb	r3, [r7, #15]
    if (cbuf_handle == NULL || data == NULL) {
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d002      	beq.n	800ae6e <CIRC_Buffer_get+0x1a>
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d101      	bne.n	800ae72 <CIRC_Buffer_get+0x1e>
        return ret;
 800ae6e:	7bfb      	ldrb	r3, [r7, #15]
 800ae70:	e016      	b.n	800aea0 <CIRC_Buffer_get+0x4c>
    }

    if (!CIRC_Buffer_empty(cbuf_handle)) {
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f7ff ffb2 	bl	800addc <CIRC_Buffer_empty>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	f083 0301 	eor.w	r3, r3, #1
 800ae7e:	b2db      	uxtb	r3, r3
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d00c      	beq.n	800ae9e <CIRC_Buffer_get+0x4a>
        *data = cbuf_handle->buffer[cbuf_handle->tail];
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681a      	ldr	r2, [r3, #0]
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	689b      	ldr	r3, [r3, #8]
 800ae8c:	4413      	add	r3, r2
 800ae8e:	781a      	ldrb	r2, [r3, #0]
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	701a      	strb	r2, [r3, #0]
        ret = CIRC_Buffer_retreat_pointer(cbuf_handle);
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f7ff ff3c 	bl	800ad12 <CIRC_Buffer_retreat_pointer>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	73fb      	strb	r3, [r7, #15]
    }

    return ret;
 800ae9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3710      	adds	r7, #16
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}

0800aea8 <StrContains>:
 *********************************************************************************************************************/

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/
bool StrContains (const char *string, size_t string_size, const char *chars) {
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b086      	sub	sp, #24
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	60f8      	str	r0, [r7, #12]
 800aeb0:	60b9      	str	r1, [r7, #8]
 800aeb2:	607a      	str	r2, [r7, #4]
    for (uint16_t i = 0; i < string_size; i++) {
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	82fb      	strh	r3, [r7, #22]
 800aeb8:	e00f      	b.n	800aeda <StrContains+0x32>
        if (strchr(chars, string[i]) != NULL) {
 800aeba:	8afb      	ldrh	r3, [r7, #22]
 800aebc:	68fa      	ldr	r2, [r7, #12]
 800aebe:	4413      	add	r3, r2
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	4619      	mov	r1, r3
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f000 ff49 	bl	800bd5c <strchr>
 800aeca:	4603      	mov	r3, r0
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d001      	beq.n	800aed4 <StrContains+0x2c>
            return true;
 800aed0:	2301      	movs	r3, #1
 800aed2:	e007      	b.n	800aee4 <StrContains+0x3c>
    for (uint16_t i = 0; i < string_size; i++) {
 800aed4:	8afb      	ldrh	r3, [r7, #22]
 800aed6:	3301      	adds	r3, #1
 800aed8:	82fb      	strh	r3, [r7, #22]
 800aeda:	8afb      	ldrh	r3, [r7, #22]
 800aedc:	68ba      	ldr	r2, [r7, #8]
 800aede:	429a      	cmp	r2, r3
 800aee0:	d8eb      	bhi.n	800aeba <StrContains+0x12>
        }
    }
    return false;
 800aee2:	2300      	movs	r3, #0
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3718      	adds	r7, #24
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <StrCountChars>:
int StrCountChars (const char *string, size_t string_size, const char *chars) {
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b088      	sub	sp, #32
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	60f8      	str	r0, [r7, #12]
 800aef4:	60b9      	str	r1, [r7, #8]
 800aef6:	607a      	str	r2, [r7, #4]
    uint16_t chars_size = strlen(chars);
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f7f5 f99b 	bl	8000234 <strlen>
 800aefe:	4603      	mov	r3, r0
 800af00:	82fb      	strh	r3, [r7, #22]
    int count = 0;
 800af02:	2300      	movs	r3, #0
 800af04:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = 0; i < string_size; i++) {
 800af06:	2300      	movs	r3, #0
 800af08:	837b      	strh	r3, [r7, #26]
 800af0a:	e020      	b.n	800af4e <StrCountChars+0x62>
        if (string[i] == '\0') {
 800af0c:	8b7b      	ldrh	r3, [r7, #26]
 800af0e:	68fa      	ldr	r2, [r7, #12]
 800af10:	4413      	add	r3, r2
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d01f      	beq.n	800af58 <StrCountChars+0x6c>
            break;
        }
        for (uint16_t c = 0; c < chars_size; c++) {
 800af18:	2300      	movs	r3, #0
 800af1a:	833b      	strh	r3, [r7, #24]
 800af1c:	e010      	b.n	800af40 <StrCountChars+0x54>
            if (string[i] == chars[c]) {
 800af1e:	8b7b      	ldrh	r3, [r7, #26]
 800af20:	68fa      	ldr	r2, [r7, #12]
 800af22:	4413      	add	r3, r2
 800af24:	781a      	ldrb	r2, [r3, #0]
 800af26:	8b3b      	ldrh	r3, [r7, #24]
 800af28:	6879      	ldr	r1, [r7, #4]
 800af2a:	440b      	add	r3, r1
 800af2c:	781b      	ldrb	r3, [r3, #0]
 800af2e:	429a      	cmp	r2, r3
 800af30:	d103      	bne.n	800af3a <StrCountChars+0x4e>
                count++;
 800af32:	69fb      	ldr	r3, [r7, #28]
 800af34:	3301      	adds	r3, #1
 800af36:	61fb      	str	r3, [r7, #28]
                break;
 800af38:	e006      	b.n	800af48 <StrCountChars+0x5c>
        for (uint16_t c = 0; c < chars_size; c++) {
 800af3a:	8b3b      	ldrh	r3, [r7, #24]
 800af3c:	3301      	adds	r3, #1
 800af3e:	833b      	strh	r3, [r7, #24]
 800af40:	8b3a      	ldrh	r2, [r7, #24]
 800af42:	8afb      	ldrh	r3, [r7, #22]
 800af44:	429a      	cmp	r2, r3
 800af46:	d3ea      	bcc.n	800af1e <StrCountChars+0x32>
    for (uint16_t i = 0; i < string_size; i++) {
 800af48:	8b7b      	ldrh	r3, [r7, #26]
 800af4a:	3301      	adds	r3, #1
 800af4c:	837b      	strh	r3, [r7, #26]
 800af4e:	8b7b      	ldrh	r3, [r7, #26]
 800af50:	68ba      	ldr	r2, [r7, #8]
 800af52:	429a      	cmp	r2, r3
 800af54:	d8da      	bhi.n	800af0c <StrCountChars+0x20>
 800af56:	e000      	b.n	800af5a <StrCountChars+0x6e>
            break;
 800af58:	bf00      	nop
            }
        }
    }
    return count;
 800af5a:	69fb      	ldr	r3, [r7, #28]
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3720      	adds	r7, #32
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <StrRemChar>:

bool StrRemChar (char *source, const char *chars) {
 800af64:	b5b0      	push	{r4, r5, r7, lr}
 800af66:	b086      	sub	sp, #24
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
 800af6c:	6039      	str	r1, [r7, #0]
    char *char_ptr;
    int index = -1;
 800af6e:	f04f 33ff 	mov.w	r3, #4294967295
 800af72:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < strlen(chars); i++) {
 800af74:	2300      	movs	r3, #0
 800af76:	60fb      	str	r3, [r7, #12]
 800af78:	e032      	b.n	800afe0 <StrRemChar+0x7c>
        char_ptr = strchr(source, chars[i]);
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	683a      	ldr	r2, [r7, #0]
 800af7e:	4413      	add	r3, r2
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	4619      	mov	r1, r3
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f000 fee9 	bl	800bd5c <strchr>
 800af8a:	6178      	str	r0, [r7, #20]
        index = (int) (char_ptr - source);
 800af8c:	697a      	ldr	r2, [r7, #20]
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	1ad3      	subs	r3, r2, r3
 800af92:	613b      	str	r3, [r7, #16]
        while (char_ptr != NULL) {
 800af94:	e01e      	b.n	800afd4 <StrRemChar+0x70>
            memmove(&source[index], &source[index + 1], strlen(source) - index);
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	687a      	ldr	r2, [r7, #4]
 800af9a:	18d4      	adds	r4, r2, r3
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	3301      	adds	r3, #1
 800afa0:	687a      	ldr	r2, [r7, #4]
 800afa2:	18d5      	adds	r5, r2, r3
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f7f5 f945 	bl	8000234 <strlen>
 800afaa:	4602      	mov	r2, r0
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	1ad3      	subs	r3, r2, r3
 800afb0:	461a      	mov	r2, r3
 800afb2:	4629      	mov	r1, r5
 800afb4:	4620      	mov	r0, r4
 800afb6:	f000 fc97 	bl	800b8e8 <memmove>
            char_ptr = strchr(source, chars[i]);
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	683a      	ldr	r2, [r7, #0]
 800afbe:	4413      	add	r3, r2
 800afc0:	781b      	ldrb	r3, [r3, #0]
 800afc2:	4619      	mov	r1, r3
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f000 fec9 	bl	800bd5c <strchr>
 800afca:	6178      	str	r0, [r7, #20]
            index = (int) (char_ptr - source);
 800afcc:	697a      	ldr	r2, [r7, #20]
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	1ad3      	subs	r3, r2, r3
 800afd2:	613b      	str	r3, [r7, #16]
        while (char_ptr != NULL) {
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d1dd      	bne.n	800af96 <StrRemChar+0x32>
    for (int i = 0; i < strlen(chars); i++) {
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	3301      	adds	r3, #1
 800afde:	60fb      	str	r3, [r7, #12]
 800afe0:	6838      	ldr	r0, [r7, #0]
 800afe2:	f7f5 f927 	bl	8000234 <strlen>
 800afe6:	4602      	mov	r2, r0
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	429a      	cmp	r2, r3
 800afec:	d8c5      	bhi.n	800af7a <StrRemChar+0x16>
        }
    }
    return true;
 800afee:	2301      	movs	r3, #1
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	3718      	adds	r7, #24
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bdb0      	pop	{r4, r5, r7, pc}

0800aff8 <StrRemSubstring>:
bool StrRemSubstring (char *source, const char *substring) {
 800aff8:	b590      	push	{r4, r7, lr}
 800affa:	b087      	sub	sp, #28
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	6039      	str	r1, [r7, #0]
    size_t substring_length = strlen(substring);
 800b002:	6838      	ldr	r0, [r7, #0]
 800b004:	f7f5 f916 	bl	8000234 <strlen>
 800b008:	60f8      	str	r0, [r7, #12]
    if (substring_length > 0) {
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d037      	beq.n	800b080 <StrRemSubstring+0x88>
        char *substring_ptr = strstr(source, substring);
 800b010:	6839      	ldr	r1, [r7, #0]
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f000 feca 	bl	800bdac <strstr>
 800b018:	6178      	str	r0, [r7, #20]
        if (substring_ptr == NULL) {
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d101      	bne.n	800b024 <StrRemSubstring+0x2c>
            return false;
 800b020:	2300      	movs	r3, #0
 800b022:	e02e      	b.n	800b082 <StrRemSubstring+0x8a>
        }
        size_t remaining_length = strlen(substring_ptr) - substring_length;
 800b024:	6978      	ldr	r0, [r7, #20]
 800b026:	f7f5 f905 	bl	8000234 <strlen>
 800b02a:	4602      	mov	r2, r0
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	1ad3      	subs	r3, r2, r3
 800b030:	613b      	str	r3, [r7, #16]
        while (substring_ptr != NULL) {
 800b032:	e020      	b.n	800b076 <StrRemSubstring+0x7e>
            if (remaining_length > 0) {
 800b034:	693b      	ldr	r3, [r7, #16]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d00c      	beq.n	800b054 <StrRemSubstring+0x5c>
                memmove(substring_ptr, substring_ptr + substring_length, strlen(substring_ptr));
 800b03a:	697a      	ldr	r2, [r7, #20]
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	18d4      	adds	r4, r2, r3
 800b040:	6978      	ldr	r0, [r7, #20]
 800b042:	f7f5 f8f7 	bl	8000234 <strlen>
 800b046:	4603      	mov	r3, r0
 800b048:	461a      	mov	r2, r3
 800b04a:	4621      	mov	r1, r4
 800b04c:	6978      	ldr	r0, [r7, #20]
 800b04e:	f000 fc4b 	bl	800b8e8 <memmove>
 800b052:	e004      	b.n	800b05e <StrRemSubstring+0x66>
            } else {
                strncpy(substring_ptr, "\0", substring_length);
 800b054:	68fa      	ldr	r2, [r7, #12]
 800b056:	490d      	ldr	r1, [pc, #52]	; (800b08c <StrRemSubstring+0x94>)
 800b058:	6978      	ldr	r0, [r7, #20]
 800b05a:	f000 fe94 	bl	800bd86 <strncpy>
            }
            substring_ptr = strstr(substring_ptr, substring);
 800b05e:	6839      	ldr	r1, [r7, #0]
 800b060:	6978      	ldr	r0, [r7, #20]
 800b062:	f000 fea3 	bl	800bdac <strstr>
 800b066:	6178      	str	r0, [r7, #20]
            remaining_length = strlen(substring_ptr) - substring_length;
 800b068:	6978      	ldr	r0, [r7, #20]
 800b06a:	f7f5 f8e3 	bl	8000234 <strlen>
 800b06e:	4602      	mov	r2, r0
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	1ad3      	subs	r3, r2, r3
 800b074:	613b      	str	r3, [r7, #16]
        while (substring_ptr != NULL) {
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d1db      	bne.n	800b034 <StrRemSubstring+0x3c>
        }
        return true;
 800b07c:	2301      	movs	r3, #1
 800b07e:	e000      	b.n	800b082 <StrRemSubstring+0x8a>
    }
    return false;
 800b080:	2300      	movs	r3, #0
}
 800b082:	4618      	mov	r0, r3
 800b084:	371c      	adds	r7, #28
 800b086:	46bd      	mov	sp, r7
 800b088:	bd90      	pop	{r4, r7, pc}
 800b08a:	bf00      	nop
 800b08c:	0800e908 	.word	0x0800e908

0800b090 <StrCompare>:
bool StrCompare (const char *string1, const char *string2) {
 800b090:	b590      	push	{r4, r7, lr}
 800b092:	b083      	sub	sp, #12
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	6039      	str	r1, [r7, #0]
    if (strlen(string1) == strlen(string2)) {
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f7f5 f8ca 	bl	8000234 <strlen>
 800b0a0:	4604      	mov	r4, r0
 800b0a2:	6838      	ldr	r0, [r7, #0]
 800b0a4:	f7f5 f8c6 	bl	8000234 <strlen>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	429c      	cmp	r4, r3
 800b0ac:	d108      	bne.n	800b0c0 <StrCompare+0x30>
        if (strcmp(string1, string2) == 0) {
 800b0ae:	6839      	ldr	r1, [r7, #0]
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f7f5 f8b5 	bl	8000220 <strcmp>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d101      	bne.n	800b0c0 <StrCompare+0x30>
            return true;
 800b0bc:	2301      	movs	r3, #1
 800b0be:	e000      	b.n	800b0c2 <StrCompare+0x32>
        }
    }
    return false;
 800b0c0:	2300      	movs	r3, #0
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	370c      	adds	r7, #12
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd90      	pop	{r4, r7, pc}

0800b0ca <StrToUint>:
            return false;
        }
    }
    return true;
}
bool StrToUint (const char *string, uint16_t *value) {
 800b0ca:	b580      	push	{r7, lr}
 800b0cc:	b084      	sub	sp, #16
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	6078      	str	r0, [r7, #4]
 800b0d2:	6039      	str	r1, [r7, #0]
    if (string == NULL) {
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d101      	bne.n	800b0de <StrToUint+0x14>
        return false;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	e011      	b.n	800b102 <StrToUint+0x38>
    }
    char *end_ptr;
    *value = strtol(string, &end_ptr, 10);
 800b0de:	f107 030c 	add.w	r3, r7, #12
 800b0e2:	220a      	movs	r2, #10
 800b0e4:	4619      	mov	r1, r3
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f000 ff56 	bl	800bf98 <strtol>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	b29a      	uxth	r2, r3
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	801a      	strh	r2, [r3, #0]
    if (end_ptr == string) {
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	687a      	ldr	r2, [r7, #4]
 800b0f8:	429a      	cmp	r2, r3
 800b0fa:	d101      	bne.n	800b100 <StrToUint+0x36>
        return false;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	e000      	b.n	800b102 <StrToUint+0x38>
    }
    return true;
 800b100:	2301      	movs	r3, #1
}
 800b102:	4618      	mov	r0, r3
 800b104:	3710      	adds	r7, #16
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}
	...

0800b10c <StrToHex>:
bool StrToHex (const char *string, uint16_t string_length, char **hex_string) {
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b086      	sub	sp, #24
 800b110:	af00      	add	r7, sp, #0
 800b112:	60f8      	str	r0, [r7, #12]
 800b114:	460b      	mov	r3, r1
 800b116:	607a      	str	r2, [r7, #4]
 800b118:	817b      	strh	r3, [r7, #10]
    /* Uses dynamically allocated memory. Use Heap_Api_Free(hex_string). */
    if (string == NULL || hex_string == NULL) {
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d002      	beq.n	800b126 <StrToHex+0x1a>
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d101      	bne.n	800b12a <StrToHex+0x1e>
        return false;
 800b126:	2300      	movs	r3, #0
 800b128:	e029      	b.n	800b17e <StrToHex+0x72>
    }
    if (string_length == 0) {
 800b12a:	897b      	ldrh	r3, [r7, #10]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d104      	bne.n	800b13a <StrToHex+0x2e>
        string_length = strlen(string);
 800b130:	68f8      	ldr	r0, [r7, #12]
 800b132:	f7f5 f87f 	bl	8000234 <strlen>
 800b136:	4603      	mov	r3, r0
 800b138:	817b      	strh	r3, [r7, #10]
    }
    *hex_string = Heap_API_Allocate(string_length * 2 + 1, sizeof(char));
 800b13a:	897b      	ldrh	r3, [r7, #10]
 800b13c:	005b      	lsls	r3, r3, #1
 800b13e:	3301      	adds	r3, #1
 800b140:	2101      	movs	r1, #1
 800b142:	4618      	mov	r0, r3
 800b144:	f7f5 fe10 	bl	8000d68 <Heap_API_Allocate>
 800b148:	4602      	mov	r2, r0
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < string_length; i++) {
 800b14e:	2300      	movs	r3, #0
 800b150:	82fb      	strh	r3, [r7, #22]
 800b152:	e00f      	b.n	800b174 <StrToHex+0x68>
        sprintf(*hex_string + i * 2, "%02X", string[i]); // write my own code instead of sprintf
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	8afa      	ldrh	r2, [r7, #22]
 800b15a:	0052      	lsls	r2, r2, #1
 800b15c:	1898      	adds	r0, r3, r2
 800b15e:	8afb      	ldrh	r3, [r7, #22]
 800b160:	68fa      	ldr	r2, [r7, #12]
 800b162:	4413      	add	r3, r2
 800b164:	781b      	ldrb	r3, [r3, #0]
 800b166:	461a      	mov	r2, r3
 800b168:	4907      	ldr	r1, [pc, #28]	; (800b188 <StrToHex+0x7c>)
 800b16a:	f000 fd83 	bl	800bc74 <siprintf>
    for (uint16_t i = 0; i < string_length; i++) {
 800b16e:	8afb      	ldrh	r3, [r7, #22]
 800b170:	3301      	adds	r3, #1
 800b172:	82fb      	strh	r3, [r7, #22]
 800b174:	8afa      	ldrh	r2, [r7, #22]
 800b176:	897b      	ldrh	r3, [r7, #10]
 800b178:	429a      	cmp	r2, r3
 800b17a:	d3eb      	bcc.n	800b154 <StrToHex+0x48>
    }
    return true;
 800b17c:	2301      	movs	r3, #1
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3718      	adds	r7, #24
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}
 800b186:	bf00      	nop
 800b188:	0800e90c 	.word	0x0800e90c

0800b18c <StrHexToStr>:
bool StrHexToStr (const char *hex_string, uint16_t hex_string_length, char **string) {
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b086      	sub	sp, #24
 800b190:	af00      	add	r7, sp, #0
 800b192:	60f8      	str	r0, [r7, #12]
 800b194:	460b      	mov	r3, r1
 800b196:	607a      	str	r2, [r7, #4]
 800b198:	817b      	strh	r3, [r7, #10]
    /* Uses dynamically allocated memory. Use Heap_Api_Free(string). */
    if (string == NULL || hex_string == NULL) {
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d002      	beq.n	800b1a6 <StrHexToStr+0x1a>
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d101      	bne.n	800b1aa <StrHexToStr+0x1e>
        return false;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	e03c      	b.n	800b224 <StrHexToStr+0x98>
    }
    if (hex_string_length == 0) {
 800b1aa:	897b      	ldrh	r3, [r7, #10]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d104      	bne.n	800b1ba <StrHexToStr+0x2e>
        hex_string_length = strlen(hex_string);
 800b1b0:	68f8      	ldr	r0, [r7, #12]
 800b1b2:	f7f5 f83f 	bl	8000234 <strlen>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	817b      	strh	r3, [r7, #10]
    }
    uint16_t string_length = hex_string_length / 2;
 800b1ba:	897b      	ldrh	r3, [r7, #10]
 800b1bc:	085b      	lsrs	r3, r3, #1
 800b1be:	82bb      	strh	r3, [r7, #20]

    *string = Heap_API_Allocate(string_length + 1, sizeof(char));
 800b1c0:	8abb      	ldrh	r3, [r7, #20]
 800b1c2:	3301      	adds	r3, #1
 800b1c4:	2101      	movs	r1, #1
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f7f5 fdce 	bl	8000d68 <Heap_API_Allocate>
 800b1cc:	4602      	mov	r2, r0
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	601a      	str	r2, [r3, #0]
    char buffer[3] = {0};
 800b1d2:	4b16      	ldr	r3, [pc, #88]	; (800b22c <StrHexToStr+0xa0>)
 800b1d4:	881b      	ldrh	r3, [r3, #0]
 800b1d6:	823b      	strh	r3, [r7, #16]
 800b1d8:	2300      	movs	r3, #0
 800b1da:	74bb      	strb	r3, [r7, #18]
    for (uint16_t i = 0; i < string_length; i++) {
 800b1dc:	2300      	movs	r3, #0
 800b1de:	82fb      	strh	r3, [r7, #22]
 800b1e0:	e01b      	b.n	800b21a <StrHexToStr+0x8e>
        strncpy(buffer, hex_string + 2 * i, 2);
 800b1e2:	8afb      	ldrh	r3, [r7, #22]
 800b1e4:	005b      	lsls	r3, r3, #1
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	1899      	adds	r1, r3, r2
 800b1ec:	f107 0310 	add.w	r3, r7, #16
 800b1f0:	2202      	movs	r2, #2
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f000 fdc7 	bl	800bd86 <strncpy>
        *(*string+i) = (char) strtol(buffer, NULL, 16);
 800b1f8:	f107 0310 	add.w	r3, r7, #16
 800b1fc:	2210      	movs	r2, #16
 800b1fe:	2100      	movs	r1, #0
 800b200:	4618      	mov	r0, r3
 800b202:	f000 fec9 	bl	800bf98 <strtol>
 800b206:	4601      	mov	r1, r0
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681a      	ldr	r2, [r3, #0]
 800b20c:	8afb      	ldrh	r3, [r7, #22]
 800b20e:	4413      	add	r3, r2
 800b210:	b2ca      	uxtb	r2, r1
 800b212:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < string_length; i++) {
 800b214:	8afb      	ldrh	r3, [r7, #22]
 800b216:	3301      	adds	r3, #1
 800b218:	82fb      	strh	r3, [r7, #22]
 800b21a:	8afa      	ldrh	r2, [r7, #22]
 800b21c:	8abb      	ldrh	r3, [r7, #20]
 800b21e:	429a      	cmp	r2, r3
 800b220:	d3df      	bcc.n	800b1e2 <StrHexToStr+0x56>
    }
    return true;
 800b222:	2301      	movs	r3, #1
}
 800b224:	4618      	mov	r0, r3
 800b226:	3718      	adds	r7, #24
 800b228:	46bd      	mov	sp, r7
 800b22a:	bd80      	pop	{r7, pc}
 800b22c:	0800e914 	.word	0x0800e914

0800b230 <StrLastLine>:
            return &string[i];
        }
    }
    return false;
}
char* StrLastLine (char *string) {
 800b230:	b580      	push	{r7, lr}
 800b232:	b084      	sub	sp, #16
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
    uint16_t string_size = strlen(string);
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f7f4 fffb 	bl	8000234 <strlen>
 800b23e:	4603      	mov	r3, r0
 800b240:	817b      	strh	r3, [r7, #10]
    uint16_t last_line_index = 0;
 800b242:	2300      	movs	r3, #0
 800b244:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < string_size; i++) {
 800b246:	2300      	movs	r3, #0
 800b248:	81bb      	strh	r3, [r7, #12]
 800b24a:	e012      	b.n	800b272 <StrLastLine+0x42>
        if (string[i] == '\n' && string[i + 1] != '\0') {
 800b24c:	89bb      	ldrh	r3, [r7, #12]
 800b24e:	687a      	ldr	r2, [r7, #4]
 800b250:	4413      	add	r3, r2
 800b252:	781b      	ldrb	r3, [r3, #0]
 800b254:	2b0a      	cmp	r3, #10
 800b256:	d109      	bne.n	800b26c <StrLastLine+0x3c>
 800b258:	89bb      	ldrh	r3, [r7, #12]
 800b25a:	3301      	adds	r3, #1
 800b25c:	687a      	ldr	r2, [r7, #4]
 800b25e:	4413      	add	r3, r2
 800b260:	781b      	ldrb	r3, [r3, #0]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d002      	beq.n	800b26c <StrLastLine+0x3c>
            last_line_index = i + 1;
 800b266:	89bb      	ldrh	r3, [r7, #12]
 800b268:	3301      	adds	r3, #1
 800b26a:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < string_size; i++) {
 800b26c:	89bb      	ldrh	r3, [r7, #12]
 800b26e:	3301      	adds	r3, #1
 800b270:	81bb      	strh	r3, [r7, #12]
 800b272:	89ba      	ldrh	r2, [r7, #12]
 800b274:	897b      	ldrh	r3, [r7, #10]
 800b276:	429a      	cmp	r2, r3
 800b278:	d3e8      	bcc.n	800b24c <StrLastLine+0x1c>
        }
    }
    return &string[last_line_index];
 800b27a:	89fb      	ldrh	r3, [r7, #14]
 800b27c:	687a      	ldr	r2, [r7, #4]
 800b27e:	4413      	add	r3, r2
}
 800b280:	4618      	mov	r0, r3
 800b282:	3710      	adds	r7, #16
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}

0800b288 <StrUint32ToUint8>:

bool StrUint32ToUint8 (uint32_t u32, uint8_t *u8, bool little_endian) {
 800b288:	b480      	push	{r7}
 800b28a:	b085      	sub	sp, #20
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	60f8      	str	r0, [r7, #12]
 800b290:	60b9      	str	r1, [r7, #8]
 800b292:	4613      	mov	r3, r2
 800b294:	71fb      	strb	r3, [r7, #7]
    if (u8 == NULL) {
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d101      	bne.n	800b2a0 <StrUint32ToUint8+0x18>
        return false;
 800b29c:	2300      	movs	r3, #0
 800b29e:	e03c      	b.n	800b31a <StrUint32ToUint8+0x92>
    }

    if (little_endian == true) {
 800b2a0:	79fb      	ldrb	r3, [r7, #7]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d01c      	beq.n	800b2e0 <StrUint32ToUint8+0x58>
        u8[0] = (uint8_t) u32;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	b2da      	uxtb	r2, r3
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	701a      	strb	r2, [r3, #0]
        u8[1] = (uint8_t) (u32 >>= 8);
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	0a1b      	lsrs	r3, r3, #8
 800b2b2:	60fb      	str	r3, [r7, #12]
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	68fa      	ldr	r2, [r7, #12]
 800b2ba:	b2d2      	uxtb	r2, r2
 800b2bc:	701a      	strb	r2, [r3, #0]
        u8[2] = (uint8_t) (u32 >>= 8);
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	0a1b      	lsrs	r3, r3, #8
 800b2c2:	60fb      	str	r3, [r7, #12]
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	3302      	adds	r3, #2
 800b2c8:	68fa      	ldr	r2, [r7, #12]
 800b2ca:	b2d2      	uxtb	r2, r2
 800b2cc:	701a      	strb	r2, [r3, #0]
        u8[3] = (uint8_t) (u32 >>= 8);
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	0a1b      	lsrs	r3, r3, #8
 800b2d2:	60fb      	str	r3, [r7, #12]
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	3303      	adds	r3, #3
 800b2d8:	68fa      	ldr	r2, [r7, #12]
 800b2da:	b2d2      	uxtb	r2, r2
 800b2dc:	701a      	strb	r2, [r3, #0]
 800b2de:	e01b      	b.n	800b318 <StrUint32ToUint8+0x90>
    } else {
        u8[3] = (uint8_t) u32;
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	3303      	adds	r3, #3
 800b2e4:	68fa      	ldr	r2, [r7, #12]
 800b2e6:	b2d2      	uxtb	r2, r2
 800b2e8:	701a      	strb	r2, [r3, #0]
        u8[2] = (uint8_t) (u32 >>= 8);
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	0a1b      	lsrs	r3, r3, #8
 800b2ee:	60fb      	str	r3, [r7, #12]
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	3302      	adds	r3, #2
 800b2f4:	68fa      	ldr	r2, [r7, #12]
 800b2f6:	b2d2      	uxtb	r2, r2
 800b2f8:	701a      	strb	r2, [r3, #0]
        u8[1] = (uint8_t) (u32 >>= 8);
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	0a1b      	lsrs	r3, r3, #8
 800b2fe:	60fb      	str	r3, [r7, #12]
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	3301      	adds	r3, #1
 800b304:	68fa      	ldr	r2, [r7, #12]
 800b306:	b2d2      	uxtb	r2, r2
 800b308:	701a      	strb	r2, [r3, #0]
        u8[0] = (uint8_t) (u32 >>= 8);
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	0a1b      	lsrs	r3, r3, #8
 800b30e:	60fb      	str	r3, [r7, #12]
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	b2da      	uxtb	r2, r3
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	701a      	strb	r2, [r3, #0]
    }
    return true;
 800b318:	2301      	movs	r3, #1
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3714      	adds	r7, #20
 800b31e:	46bd      	mov	sp, r7
 800b320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b324:	4770      	bx	lr

0800b326 <StrUint8ToUint32>:
bool StrUint8ToUint32 (uint8_t *u8, uint32_t *u32, bool little_endian) {
 800b326:	b480      	push	{r7}
 800b328:	b085      	sub	sp, #20
 800b32a:	af00      	add	r7, sp, #0
 800b32c:	60f8      	str	r0, [r7, #12]
 800b32e:	60b9      	str	r1, [r7, #8]
 800b330:	4613      	mov	r3, r2
 800b332:	71fb      	strb	r3, [r7, #7]
    if (u8 == NULL || u32 == NULL) {
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d002      	beq.n	800b340 <StrUint8ToUint32+0x1a>
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d101      	bne.n	800b344 <StrUint8ToUint32+0x1e>
        return false;
 800b340:	2300      	movs	r3, #0
 800b342:	e05c      	b.n	800b3fe <StrUint8ToUint32+0xd8>
    }

    if (little_endian == true) {
 800b344:	79fb      	ldrb	r3, [r7, #7]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d02c      	beq.n	800b3a4 <StrUint8ToUint32+0x7e>
        *u32 = (uint32_t) u8[3];
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	3303      	adds	r3, #3
 800b34e:	781b      	ldrb	r3, [r3, #0]
 800b350:	461a      	mov	r2, r3
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	601a      	str	r2, [r3, #0]
        *u32 <<= 8;
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	021a      	lsls	r2, r3, #8
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	601a      	str	r2, [r3, #0]
        *u32 += u8[2];
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	68fa      	ldr	r2, [r7, #12]
 800b366:	3202      	adds	r2, #2
 800b368:	7812      	ldrb	r2, [r2, #0]
 800b36a:	441a      	add	r2, r3
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	601a      	str	r2, [r3, #0]
        *u32 <<= 8;
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	021a      	lsls	r2, r3, #8
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	601a      	str	r2, [r3, #0]
        *u32 += u8[1];
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	68fa      	ldr	r2, [r7, #12]
 800b380:	3201      	adds	r2, #1
 800b382:	7812      	ldrb	r2, [r2, #0]
 800b384:	441a      	add	r2, r3
 800b386:	68bb      	ldr	r3, [r7, #8]
 800b388:	601a      	str	r2, [r3, #0]
        *u32 <<= 8;
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	021a      	lsls	r2, r3, #8
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	601a      	str	r2, [r3, #0]
        *u32 += u8[0];
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	68fa      	ldr	r2, [r7, #12]
 800b39a:	7812      	ldrb	r2, [r2, #0]
 800b39c:	441a      	add	r2, r3
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	601a      	str	r2, [r3, #0]
 800b3a2:	e02b      	b.n	800b3fc <StrUint8ToUint32+0xd6>
    } else {
        *u32 = (uint32_t) u8[0];
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	781b      	ldrb	r3, [r3, #0]
 800b3a8:	461a      	mov	r2, r3
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	601a      	str	r2, [r3, #0]
        *u32 <<= 8;
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	021a      	lsls	r2, r3, #8
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	601a      	str	r2, [r3, #0]
        *u32 += u8[1];
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	68fa      	ldr	r2, [r7, #12]
 800b3be:	3201      	adds	r2, #1
 800b3c0:	7812      	ldrb	r2, [r2, #0]
 800b3c2:	441a      	add	r2, r3
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	601a      	str	r2, [r3, #0]
        *u32 <<= 8;
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	021a      	lsls	r2, r3, #8
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	601a      	str	r2, [r3, #0]
        *u32 += u8[2];
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	68fa      	ldr	r2, [r7, #12]
 800b3d8:	3202      	adds	r2, #2
 800b3da:	7812      	ldrb	r2, [r2, #0]
 800b3dc:	441a      	add	r2, r3
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	601a      	str	r2, [r3, #0]
        *u32 <<= 8;
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	021a      	lsls	r2, r3, #8
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	601a      	str	r2, [r3, #0]
        *u32 += u8[3];
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	68fa      	ldr	r2, [r7, #12]
 800b3f2:	3203      	adds	r2, #3
 800b3f4:	7812      	ldrb	r2, [r2, #0]
 800b3f6:	441a      	add	r2, r3
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	601a      	str	r2, [r3, #0]
    }
    return true;
 800b3fc:	2301      	movs	r3, #1
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	3714      	adds	r7, #20
 800b402:	46bd      	mov	sp, r7
 800b404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b408:	4770      	bx	lr

0800b40a <atoi>:
 800b40a:	220a      	movs	r2, #10
 800b40c:	2100      	movs	r1, #0
 800b40e:	f000 bdc3 	b.w	800bf98 <strtol>

0800b412 <atol>:
 800b412:	220a      	movs	r2, #10
 800b414:	2100      	movs	r1, #0
 800b416:	f000 bdbf 	b.w	800bf98 <strtol>
	...

0800b41c <calloc>:
 800b41c:	4b02      	ldr	r3, [pc, #8]	; (800b428 <calloc+0xc>)
 800b41e:	460a      	mov	r2, r1
 800b420:	4601      	mov	r1, r0
 800b422:	6818      	ldr	r0, [r3, #0]
 800b424:	f000 ba82 	b.w	800b92c <_calloc_r>
 800b428:	200001f4 	.word	0x200001f4

0800b42c <ctime>:
 800b42c:	b508      	push	{r3, lr}
 800b42e:	f000 f925 	bl	800b67c <localtime>
 800b432:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b436:	f001 b841 	b.w	800c4bc <asctime>
	...

0800b43c <__errno>:
 800b43c:	4b01      	ldr	r3, [pc, #4]	; (800b444 <__errno+0x8>)
 800b43e:	6818      	ldr	r0, [r3, #0]
 800b440:	4770      	bx	lr
 800b442:	bf00      	nop
 800b444:	200001f4 	.word	0x200001f4

0800b448 <std>:
 800b448:	2300      	movs	r3, #0
 800b44a:	b510      	push	{r4, lr}
 800b44c:	4604      	mov	r4, r0
 800b44e:	e9c0 3300 	strd	r3, r3, [r0]
 800b452:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b456:	6083      	str	r3, [r0, #8]
 800b458:	8181      	strh	r1, [r0, #12]
 800b45a:	6643      	str	r3, [r0, #100]	; 0x64
 800b45c:	81c2      	strh	r2, [r0, #14]
 800b45e:	6183      	str	r3, [r0, #24]
 800b460:	4619      	mov	r1, r3
 800b462:	2208      	movs	r2, #8
 800b464:	305c      	adds	r0, #92	; 0x5c
 800b466:	f000 fa59 	bl	800b91c <memset>
 800b46a:	4b05      	ldr	r3, [pc, #20]	; (800b480 <std+0x38>)
 800b46c:	6263      	str	r3, [r4, #36]	; 0x24
 800b46e:	4b05      	ldr	r3, [pc, #20]	; (800b484 <std+0x3c>)
 800b470:	62a3      	str	r3, [r4, #40]	; 0x28
 800b472:	4b05      	ldr	r3, [pc, #20]	; (800b488 <std+0x40>)
 800b474:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b476:	4b05      	ldr	r3, [pc, #20]	; (800b48c <std+0x44>)
 800b478:	6224      	str	r4, [r4, #32]
 800b47a:	6323      	str	r3, [r4, #48]	; 0x30
 800b47c:	bd10      	pop	{r4, pc}
 800b47e:	bf00      	nop
 800b480:	0800bcb5 	.word	0x0800bcb5
 800b484:	0800bcdb 	.word	0x0800bcdb
 800b488:	0800bd13 	.word	0x0800bd13
 800b48c:	0800bd37 	.word	0x0800bd37

0800b490 <_cleanup_r>:
 800b490:	4901      	ldr	r1, [pc, #4]	; (800b498 <_cleanup_r+0x8>)
 800b492:	f000 b8af 	b.w	800b5f4 <_fwalk_reent>
 800b496:	bf00      	nop
 800b498:	0800c6b5 	.word	0x0800c6b5

0800b49c <__sfmoreglue>:
 800b49c:	b570      	push	{r4, r5, r6, lr}
 800b49e:	2268      	movs	r2, #104	; 0x68
 800b4a0:	1e4d      	subs	r5, r1, #1
 800b4a2:	4355      	muls	r5, r2
 800b4a4:	460e      	mov	r6, r1
 800b4a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b4aa:	f000 fac1 	bl	800ba30 <_malloc_r>
 800b4ae:	4604      	mov	r4, r0
 800b4b0:	b140      	cbz	r0, 800b4c4 <__sfmoreglue+0x28>
 800b4b2:	2100      	movs	r1, #0
 800b4b4:	e9c0 1600 	strd	r1, r6, [r0]
 800b4b8:	300c      	adds	r0, #12
 800b4ba:	60a0      	str	r0, [r4, #8]
 800b4bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b4c0:	f000 fa2c 	bl	800b91c <memset>
 800b4c4:	4620      	mov	r0, r4
 800b4c6:	bd70      	pop	{r4, r5, r6, pc}

0800b4c8 <__sfp_lock_acquire>:
 800b4c8:	4801      	ldr	r0, [pc, #4]	; (800b4d0 <__sfp_lock_acquire+0x8>)
 800b4ca:	f000 b9eb 	b.w	800b8a4 <__retarget_lock_acquire_recursive>
 800b4ce:	bf00      	nop
 800b4d0:	2000568a 	.word	0x2000568a

0800b4d4 <__sfp_lock_release>:
 800b4d4:	4801      	ldr	r0, [pc, #4]	; (800b4dc <__sfp_lock_release+0x8>)
 800b4d6:	f000 b9e7 	b.w	800b8a8 <__retarget_lock_release_recursive>
 800b4da:	bf00      	nop
 800b4dc:	2000568a 	.word	0x2000568a

0800b4e0 <__sinit_lock_acquire>:
 800b4e0:	4801      	ldr	r0, [pc, #4]	; (800b4e8 <__sinit_lock_acquire+0x8>)
 800b4e2:	f000 b9df 	b.w	800b8a4 <__retarget_lock_acquire_recursive>
 800b4e6:	bf00      	nop
 800b4e8:	2000568b 	.word	0x2000568b

0800b4ec <__sinit_lock_release>:
 800b4ec:	4801      	ldr	r0, [pc, #4]	; (800b4f4 <__sinit_lock_release+0x8>)
 800b4ee:	f000 b9db 	b.w	800b8a8 <__retarget_lock_release_recursive>
 800b4f2:	bf00      	nop
 800b4f4:	2000568b 	.word	0x2000568b

0800b4f8 <__sinit>:
 800b4f8:	b510      	push	{r4, lr}
 800b4fa:	4604      	mov	r4, r0
 800b4fc:	f7ff fff0 	bl	800b4e0 <__sinit_lock_acquire>
 800b500:	69a3      	ldr	r3, [r4, #24]
 800b502:	b11b      	cbz	r3, 800b50c <__sinit+0x14>
 800b504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b508:	f7ff bff0 	b.w	800b4ec <__sinit_lock_release>
 800b50c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b510:	6523      	str	r3, [r4, #80]	; 0x50
 800b512:	4b13      	ldr	r3, [pc, #76]	; (800b560 <__sinit+0x68>)
 800b514:	4a13      	ldr	r2, [pc, #76]	; (800b564 <__sinit+0x6c>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	62a2      	str	r2, [r4, #40]	; 0x28
 800b51a:	42a3      	cmp	r3, r4
 800b51c:	bf04      	itt	eq
 800b51e:	2301      	moveq	r3, #1
 800b520:	61a3      	streq	r3, [r4, #24]
 800b522:	4620      	mov	r0, r4
 800b524:	f000 f820 	bl	800b568 <__sfp>
 800b528:	6060      	str	r0, [r4, #4]
 800b52a:	4620      	mov	r0, r4
 800b52c:	f000 f81c 	bl	800b568 <__sfp>
 800b530:	60a0      	str	r0, [r4, #8]
 800b532:	4620      	mov	r0, r4
 800b534:	f000 f818 	bl	800b568 <__sfp>
 800b538:	2200      	movs	r2, #0
 800b53a:	60e0      	str	r0, [r4, #12]
 800b53c:	2104      	movs	r1, #4
 800b53e:	6860      	ldr	r0, [r4, #4]
 800b540:	f7ff ff82 	bl	800b448 <std>
 800b544:	68a0      	ldr	r0, [r4, #8]
 800b546:	2201      	movs	r2, #1
 800b548:	2109      	movs	r1, #9
 800b54a:	f7ff ff7d 	bl	800b448 <std>
 800b54e:	68e0      	ldr	r0, [r4, #12]
 800b550:	2202      	movs	r2, #2
 800b552:	2112      	movs	r1, #18
 800b554:	f7ff ff78 	bl	800b448 <std>
 800b558:	2301      	movs	r3, #1
 800b55a:	61a3      	str	r3, [r4, #24]
 800b55c:	e7d2      	b.n	800b504 <__sinit+0xc>
 800b55e:	bf00      	nop
 800b560:	0800eda0 	.word	0x0800eda0
 800b564:	0800b491 	.word	0x0800b491

0800b568 <__sfp>:
 800b568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b56a:	4607      	mov	r7, r0
 800b56c:	f7ff ffac 	bl	800b4c8 <__sfp_lock_acquire>
 800b570:	4b1e      	ldr	r3, [pc, #120]	; (800b5ec <__sfp+0x84>)
 800b572:	681e      	ldr	r6, [r3, #0]
 800b574:	69b3      	ldr	r3, [r6, #24]
 800b576:	b913      	cbnz	r3, 800b57e <__sfp+0x16>
 800b578:	4630      	mov	r0, r6
 800b57a:	f7ff ffbd 	bl	800b4f8 <__sinit>
 800b57e:	3648      	adds	r6, #72	; 0x48
 800b580:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b584:	3b01      	subs	r3, #1
 800b586:	d503      	bpl.n	800b590 <__sfp+0x28>
 800b588:	6833      	ldr	r3, [r6, #0]
 800b58a:	b30b      	cbz	r3, 800b5d0 <__sfp+0x68>
 800b58c:	6836      	ldr	r6, [r6, #0]
 800b58e:	e7f7      	b.n	800b580 <__sfp+0x18>
 800b590:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b594:	b9d5      	cbnz	r5, 800b5cc <__sfp+0x64>
 800b596:	4b16      	ldr	r3, [pc, #88]	; (800b5f0 <__sfp+0x88>)
 800b598:	60e3      	str	r3, [r4, #12]
 800b59a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b59e:	6665      	str	r5, [r4, #100]	; 0x64
 800b5a0:	f000 f97e 	bl	800b8a0 <__retarget_lock_init_recursive>
 800b5a4:	f7ff ff96 	bl	800b4d4 <__sfp_lock_release>
 800b5a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b5ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b5b0:	6025      	str	r5, [r4, #0]
 800b5b2:	61a5      	str	r5, [r4, #24]
 800b5b4:	2208      	movs	r2, #8
 800b5b6:	4629      	mov	r1, r5
 800b5b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b5bc:	f000 f9ae 	bl	800b91c <memset>
 800b5c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b5c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b5c8:	4620      	mov	r0, r4
 800b5ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5cc:	3468      	adds	r4, #104	; 0x68
 800b5ce:	e7d9      	b.n	800b584 <__sfp+0x1c>
 800b5d0:	2104      	movs	r1, #4
 800b5d2:	4638      	mov	r0, r7
 800b5d4:	f7ff ff62 	bl	800b49c <__sfmoreglue>
 800b5d8:	4604      	mov	r4, r0
 800b5da:	6030      	str	r0, [r6, #0]
 800b5dc:	2800      	cmp	r0, #0
 800b5de:	d1d5      	bne.n	800b58c <__sfp+0x24>
 800b5e0:	f7ff ff78 	bl	800b4d4 <__sfp_lock_release>
 800b5e4:	230c      	movs	r3, #12
 800b5e6:	603b      	str	r3, [r7, #0]
 800b5e8:	e7ee      	b.n	800b5c8 <__sfp+0x60>
 800b5ea:	bf00      	nop
 800b5ec:	0800eda0 	.word	0x0800eda0
 800b5f0:	ffff0001 	.word	0xffff0001

0800b5f4 <_fwalk_reent>:
 800b5f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5f8:	4606      	mov	r6, r0
 800b5fa:	4688      	mov	r8, r1
 800b5fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b600:	2700      	movs	r7, #0
 800b602:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b606:	f1b9 0901 	subs.w	r9, r9, #1
 800b60a:	d505      	bpl.n	800b618 <_fwalk_reent+0x24>
 800b60c:	6824      	ldr	r4, [r4, #0]
 800b60e:	2c00      	cmp	r4, #0
 800b610:	d1f7      	bne.n	800b602 <_fwalk_reent+0xe>
 800b612:	4638      	mov	r0, r7
 800b614:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b618:	89ab      	ldrh	r3, [r5, #12]
 800b61a:	2b01      	cmp	r3, #1
 800b61c:	d907      	bls.n	800b62e <_fwalk_reent+0x3a>
 800b61e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b622:	3301      	adds	r3, #1
 800b624:	d003      	beq.n	800b62e <_fwalk_reent+0x3a>
 800b626:	4629      	mov	r1, r5
 800b628:	4630      	mov	r0, r6
 800b62a:	47c0      	blx	r8
 800b62c:	4307      	orrs	r7, r0
 800b62e:	3568      	adds	r5, #104	; 0x68
 800b630:	e7e9      	b.n	800b606 <_fwalk_reent+0x12>
	...

0800b634 <__libc_init_array>:
 800b634:	b570      	push	{r4, r5, r6, lr}
 800b636:	4d0d      	ldr	r5, [pc, #52]	; (800b66c <__libc_init_array+0x38>)
 800b638:	4c0d      	ldr	r4, [pc, #52]	; (800b670 <__libc_init_array+0x3c>)
 800b63a:	1b64      	subs	r4, r4, r5
 800b63c:	10a4      	asrs	r4, r4, #2
 800b63e:	2600      	movs	r6, #0
 800b640:	42a6      	cmp	r6, r4
 800b642:	d109      	bne.n	800b658 <__libc_init_array+0x24>
 800b644:	4d0b      	ldr	r5, [pc, #44]	; (800b674 <__libc_init_array+0x40>)
 800b646:	4c0c      	ldr	r4, [pc, #48]	; (800b678 <__libc_init_array+0x44>)
 800b648:	f002 fc1c 	bl	800de84 <_init>
 800b64c:	1b64      	subs	r4, r4, r5
 800b64e:	10a4      	asrs	r4, r4, #2
 800b650:	2600      	movs	r6, #0
 800b652:	42a6      	cmp	r6, r4
 800b654:	d105      	bne.n	800b662 <__libc_init_array+0x2e>
 800b656:	bd70      	pop	{r4, r5, r6, pc}
 800b658:	f855 3b04 	ldr.w	r3, [r5], #4
 800b65c:	4798      	blx	r3
 800b65e:	3601      	adds	r6, #1
 800b660:	e7ee      	b.n	800b640 <__libc_init_array+0xc>
 800b662:	f855 3b04 	ldr.w	r3, [r5], #4
 800b666:	4798      	blx	r3
 800b668:	3601      	adds	r6, #1
 800b66a:	e7f2      	b.n	800b652 <__libc_init_array+0x1e>
 800b66c:	0800f15c 	.word	0x0800f15c
 800b670:	0800f15c 	.word	0x0800f15c
 800b674:	0800f15c 	.word	0x0800f15c
 800b678:	0800f160 	.word	0x0800f160

0800b67c <localtime>:
 800b67c:	b538      	push	{r3, r4, r5, lr}
 800b67e:	4b0b      	ldr	r3, [pc, #44]	; (800b6ac <localtime+0x30>)
 800b680:	681d      	ldr	r5, [r3, #0]
 800b682:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800b684:	4604      	mov	r4, r0
 800b686:	b953      	cbnz	r3, 800b69e <localtime+0x22>
 800b688:	2024      	movs	r0, #36	; 0x24
 800b68a:	f000 f90f 	bl	800b8ac <malloc>
 800b68e:	4602      	mov	r2, r0
 800b690:	63e8      	str	r0, [r5, #60]	; 0x3c
 800b692:	b920      	cbnz	r0, 800b69e <localtime+0x22>
 800b694:	4b06      	ldr	r3, [pc, #24]	; (800b6b0 <localtime+0x34>)
 800b696:	4807      	ldr	r0, [pc, #28]	; (800b6b4 <localtime+0x38>)
 800b698:	2132      	movs	r1, #50	; 0x32
 800b69a:	f000 ff57 	bl	800c54c <__assert_func>
 800b69e:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800b6a0:	4620      	mov	r0, r4
 800b6a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6a6:	f000 b807 	b.w	800b6b8 <localtime_r>
 800b6aa:	bf00      	nop
 800b6ac:	200001f4 	.word	0x200001f4
 800b6b0:	0800eda4 	.word	0x0800eda4
 800b6b4:	0800edbb 	.word	0x0800edbb

0800b6b8 <localtime_r>:
 800b6b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b6bc:	4680      	mov	r8, r0
 800b6be:	9101      	str	r1, [sp, #4]
 800b6c0:	f001 f88a 	bl	800c7d8 <__gettzinfo>
 800b6c4:	9901      	ldr	r1, [sp, #4]
 800b6c6:	4605      	mov	r5, r0
 800b6c8:	4640      	mov	r0, r8
 800b6ca:	f001 f889 	bl	800c7e0 <gmtime_r>
 800b6ce:	6943      	ldr	r3, [r0, #20]
 800b6d0:	0799      	lsls	r1, r3, #30
 800b6d2:	4604      	mov	r4, r0
 800b6d4:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 800b6d8:	d105      	bne.n	800b6e6 <localtime_r+0x2e>
 800b6da:	2264      	movs	r2, #100	; 0x64
 800b6dc:	fb97 f3f2 	sdiv	r3, r7, r2
 800b6e0:	fb02 7313 	mls	r3, r2, r3, r7
 800b6e4:	bb73      	cbnz	r3, 800b744 <localtime_r+0x8c>
 800b6e6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800b6ea:	fb97 f6f3 	sdiv	r6, r7, r3
 800b6ee:	fb03 7616 	mls	r6, r3, r6, r7
 800b6f2:	fab6 f386 	clz	r3, r6
 800b6f6:	095b      	lsrs	r3, r3, #5
 800b6f8:	4e67      	ldr	r6, [pc, #412]	; (800b898 <localtime_r+0x1e0>)
 800b6fa:	2230      	movs	r2, #48	; 0x30
 800b6fc:	fb02 6603 	mla	r6, r2, r3, r6
 800b700:	f000 fcfe 	bl	800c100 <__tz_lock>
 800b704:	f000 fd08 	bl	800c118 <_tzset_unlocked>
 800b708:	4b64      	ldr	r3, [pc, #400]	; (800b89c <localtime_r+0x1e4>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	b34b      	cbz	r3, 800b762 <localtime_r+0xaa>
 800b70e:	686b      	ldr	r3, [r5, #4]
 800b710:	42bb      	cmp	r3, r7
 800b712:	d119      	bne.n	800b748 <localtime_r+0x90>
 800b714:	682f      	ldr	r7, [r5, #0]
 800b716:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b71a:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 800b71e:	b9df      	cbnz	r7, 800b758 <localtime_r+0xa0>
 800b720:	4282      	cmp	r2, r0
 800b722:	eb73 0101 	sbcs.w	r1, r3, r1
 800b726:	da23      	bge.n	800b770 <localtime_r+0xb8>
 800b728:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 800b72c:	4282      	cmp	r2, r0
 800b72e:	eb73 0701 	sbcs.w	r7, r3, r1
 800b732:	bfb4      	ite	lt
 800b734:	2701      	movlt	r7, #1
 800b736:	2700      	movge	r7, #0
 800b738:	4282      	cmp	r2, r0
 800b73a:	418b      	sbcs	r3, r1
 800b73c:	6227      	str	r7, [r4, #32]
 800b73e:	db19      	blt.n	800b774 <localtime_r+0xbc>
 800b740:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800b742:	e018      	b.n	800b776 <localtime_r+0xbe>
 800b744:	2301      	movs	r3, #1
 800b746:	e7d7      	b.n	800b6f8 <localtime_r+0x40>
 800b748:	4638      	mov	r0, r7
 800b74a:	f000 fc2f 	bl	800bfac <__tzcalc_limits>
 800b74e:	2800      	cmp	r0, #0
 800b750:	d1e0      	bne.n	800b714 <localtime_r+0x5c>
 800b752:	f04f 33ff 	mov.w	r3, #4294967295
 800b756:	e004      	b.n	800b762 <localtime_r+0xaa>
 800b758:	4282      	cmp	r2, r0
 800b75a:	eb73 0101 	sbcs.w	r1, r3, r1
 800b75e:	da02      	bge.n	800b766 <localtime_r+0xae>
 800b760:	2300      	movs	r3, #0
 800b762:	6223      	str	r3, [r4, #32]
 800b764:	e7ec      	b.n	800b740 <localtime_r+0x88>
 800b766:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 800b76a:	4282      	cmp	r2, r0
 800b76c:	418b      	sbcs	r3, r1
 800b76e:	daf7      	bge.n	800b760 <localtime_r+0xa8>
 800b770:	2301      	movs	r3, #1
 800b772:	6223      	str	r3, [r4, #32]
 800b774:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800b776:	6861      	ldr	r1, [r4, #4]
 800b778:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800b77c:	203c      	movs	r0, #60	; 0x3c
 800b77e:	fb93 f5f2 	sdiv	r5, r3, r2
 800b782:	fb02 3315 	mls	r3, r2, r5, r3
 800b786:	fb93 f2f0 	sdiv	r2, r3, r0
 800b78a:	fb00 3012 	mls	r0, r0, r2, r3
 800b78e:	6823      	ldr	r3, [r4, #0]
 800b790:	1a89      	subs	r1, r1, r2
 800b792:	68a2      	ldr	r2, [r4, #8]
 800b794:	6061      	str	r1, [r4, #4]
 800b796:	1a1b      	subs	r3, r3, r0
 800b798:	1b52      	subs	r2, r2, r5
 800b79a:	2b3b      	cmp	r3, #59	; 0x3b
 800b79c:	6023      	str	r3, [r4, #0]
 800b79e:	60a2      	str	r2, [r4, #8]
 800b7a0:	dd35      	ble.n	800b80e <localtime_r+0x156>
 800b7a2:	3101      	adds	r1, #1
 800b7a4:	6061      	str	r1, [r4, #4]
 800b7a6:	3b3c      	subs	r3, #60	; 0x3c
 800b7a8:	6023      	str	r3, [r4, #0]
 800b7aa:	6863      	ldr	r3, [r4, #4]
 800b7ac:	2b3b      	cmp	r3, #59	; 0x3b
 800b7ae:	dd34      	ble.n	800b81a <localtime_r+0x162>
 800b7b0:	3201      	adds	r2, #1
 800b7b2:	60a2      	str	r2, [r4, #8]
 800b7b4:	3b3c      	subs	r3, #60	; 0x3c
 800b7b6:	6063      	str	r3, [r4, #4]
 800b7b8:	68a3      	ldr	r3, [r4, #8]
 800b7ba:	2b17      	cmp	r3, #23
 800b7bc:	dd33      	ble.n	800b826 <localtime_r+0x16e>
 800b7be:	69e2      	ldr	r2, [r4, #28]
 800b7c0:	3201      	adds	r2, #1
 800b7c2:	61e2      	str	r2, [r4, #28]
 800b7c4:	69a2      	ldr	r2, [r4, #24]
 800b7c6:	3201      	adds	r2, #1
 800b7c8:	2a06      	cmp	r2, #6
 800b7ca:	bfc8      	it	gt
 800b7cc:	2200      	movgt	r2, #0
 800b7ce:	61a2      	str	r2, [r4, #24]
 800b7d0:	68e2      	ldr	r2, [r4, #12]
 800b7d2:	3b18      	subs	r3, #24
 800b7d4:	3201      	adds	r2, #1
 800b7d6:	60a3      	str	r3, [r4, #8]
 800b7d8:	6923      	ldr	r3, [r4, #16]
 800b7da:	60e2      	str	r2, [r4, #12]
 800b7dc:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800b7e0:	428a      	cmp	r2, r1
 800b7e2:	dd0e      	ble.n	800b802 <localtime_r+0x14a>
 800b7e4:	2b0b      	cmp	r3, #11
 800b7e6:	eba2 0201 	sub.w	r2, r2, r1
 800b7ea:	60e2      	str	r2, [r4, #12]
 800b7ec:	f103 0201 	add.w	r2, r3, #1
 800b7f0:	bf09      	itett	eq
 800b7f2:	6963      	ldreq	r3, [r4, #20]
 800b7f4:	6122      	strne	r2, [r4, #16]
 800b7f6:	2200      	moveq	r2, #0
 800b7f8:	3301      	addeq	r3, #1
 800b7fa:	bf02      	ittt	eq
 800b7fc:	6122      	streq	r2, [r4, #16]
 800b7fe:	6163      	streq	r3, [r4, #20]
 800b800:	61e2      	streq	r2, [r4, #28]
 800b802:	f000 fc83 	bl	800c10c <__tz_unlock>
 800b806:	4620      	mov	r0, r4
 800b808:	b002      	add	sp, #8
 800b80a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b80e:	2b00      	cmp	r3, #0
 800b810:	dacb      	bge.n	800b7aa <localtime_r+0xf2>
 800b812:	3901      	subs	r1, #1
 800b814:	6061      	str	r1, [r4, #4]
 800b816:	333c      	adds	r3, #60	; 0x3c
 800b818:	e7c6      	b.n	800b7a8 <localtime_r+0xf0>
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	dacc      	bge.n	800b7b8 <localtime_r+0x100>
 800b81e:	3a01      	subs	r2, #1
 800b820:	60a2      	str	r2, [r4, #8]
 800b822:	333c      	adds	r3, #60	; 0x3c
 800b824:	e7c7      	b.n	800b7b6 <localtime_r+0xfe>
 800b826:	2b00      	cmp	r3, #0
 800b828:	daeb      	bge.n	800b802 <localtime_r+0x14a>
 800b82a:	69e2      	ldr	r2, [r4, #28]
 800b82c:	3a01      	subs	r2, #1
 800b82e:	61e2      	str	r2, [r4, #28]
 800b830:	69a2      	ldr	r2, [r4, #24]
 800b832:	3a01      	subs	r2, #1
 800b834:	bf48      	it	mi
 800b836:	2206      	movmi	r2, #6
 800b838:	61a2      	str	r2, [r4, #24]
 800b83a:	68e2      	ldr	r2, [r4, #12]
 800b83c:	3318      	adds	r3, #24
 800b83e:	3a01      	subs	r2, #1
 800b840:	60e2      	str	r2, [r4, #12]
 800b842:	60a3      	str	r3, [r4, #8]
 800b844:	2a00      	cmp	r2, #0
 800b846:	d1dc      	bne.n	800b802 <localtime_r+0x14a>
 800b848:	6923      	ldr	r3, [r4, #16]
 800b84a:	3b01      	subs	r3, #1
 800b84c:	d405      	bmi.n	800b85a <localtime_r+0x1a2>
 800b84e:	6123      	str	r3, [r4, #16]
 800b850:	6923      	ldr	r3, [r4, #16]
 800b852:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800b856:	60e3      	str	r3, [r4, #12]
 800b858:	e7d3      	b.n	800b802 <localtime_r+0x14a>
 800b85a:	230b      	movs	r3, #11
 800b85c:	6123      	str	r3, [r4, #16]
 800b85e:	6963      	ldr	r3, [r4, #20]
 800b860:	1e5a      	subs	r2, r3, #1
 800b862:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800b866:	6162      	str	r2, [r4, #20]
 800b868:	079a      	lsls	r2, r3, #30
 800b86a:	d105      	bne.n	800b878 <localtime_r+0x1c0>
 800b86c:	2164      	movs	r1, #100	; 0x64
 800b86e:	fb93 f2f1 	sdiv	r2, r3, r1
 800b872:	fb01 3212 	mls	r2, r1, r2, r3
 800b876:	b962      	cbnz	r2, 800b892 <localtime_r+0x1da>
 800b878:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b87c:	fb93 f1f2 	sdiv	r1, r3, r2
 800b880:	fb02 3311 	mls	r3, r2, r1, r3
 800b884:	fab3 f383 	clz	r3, r3
 800b888:	095b      	lsrs	r3, r3, #5
 800b88a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800b88e:	61e3      	str	r3, [r4, #28]
 800b890:	e7de      	b.n	800b850 <localtime_r+0x198>
 800b892:	2301      	movs	r3, #1
 800b894:	e7f9      	b.n	800b88a <localtime_r+0x1d2>
 800b896:	bf00      	nop
 800b898:	0800ee18 	.word	0x0800ee18
 800b89c:	200056b8 	.word	0x200056b8

0800b8a0 <__retarget_lock_init_recursive>:
 800b8a0:	4770      	bx	lr

0800b8a2 <__retarget_lock_acquire>:
 800b8a2:	4770      	bx	lr

0800b8a4 <__retarget_lock_acquire_recursive>:
 800b8a4:	4770      	bx	lr

0800b8a6 <__retarget_lock_release>:
 800b8a6:	4770      	bx	lr

0800b8a8 <__retarget_lock_release_recursive>:
 800b8a8:	4770      	bx	lr
	...

0800b8ac <malloc>:
 800b8ac:	4b02      	ldr	r3, [pc, #8]	; (800b8b8 <malloc+0xc>)
 800b8ae:	4601      	mov	r1, r0
 800b8b0:	6818      	ldr	r0, [r3, #0]
 800b8b2:	f000 b8bd 	b.w	800ba30 <_malloc_r>
 800b8b6:	bf00      	nop
 800b8b8:	200001f4 	.word	0x200001f4

0800b8bc <free>:
 800b8bc:	4b02      	ldr	r3, [pc, #8]	; (800b8c8 <free+0xc>)
 800b8be:	4601      	mov	r1, r0
 800b8c0:	6818      	ldr	r0, [r3, #0]
 800b8c2:	f000 b849 	b.w	800b958 <_free_r>
 800b8c6:	bf00      	nop
 800b8c8:	200001f4 	.word	0x200001f4

0800b8cc <memcpy>:
 800b8cc:	440a      	add	r2, r1
 800b8ce:	4291      	cmp	r1, r2
 800b8d0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b8d4:	d100      	bne.n	800b8d8 <memcpy+0xc>
 800b8d6:	4770      	bx	lr
 800b8d8:	b510      	push	{r4, lr}
 800b8da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b8e2:	4291      	cmp	r1, r2
 800b8e4:	d1f9      	bne.n	800b8da <memcpy+0xe>
 800b8e6:	bd10      	pop	{r4, pc}

0800b8e8 <memmove>:
 800b8e8:	4288      	cmp	r0, r1
 800b8ea:	b510      	push	{r4, lr}
 800b8ec:	eb01 0402 	add.w	r4, r1, r2
 800b8f0:	d902      	bls.n	800b8f8 <memmove+0x10>
 800b8f2:	4284      	cmp	r4, r0
 800b8f4:	4623      	mov	r3, r4
 800b8f6:	d807      	bhi.n	800b908 <memmove+0x20>
 800b8f8:	1e43      	subs	r3, r0, #1
 800b8fa:	42a1      	cmp	r1, r4
 800b8fc:	d008      	beq.n	800b910 <memmove+0x28>
 800b8fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b902:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b906:	e7f8      	b.n	800b8fa <memmove+0x12>
 800b908:	4402      	add	r2, r0
 800b90a:	4601      	mov	r1, r0
 800b90c:	428a      	cmp	r2, r1
 800b90e:	d100      	bne.n	800b912 <memmove+0x2a>
 800b910:	bd10      	pop	{r4, pc}
 800b912:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b916:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b91a:	e7f7      	b.n	800b90c <memmove+0x24>

0800b91c <memset>:
 800b91c:	4402      	add	r2, r0
 800b91e:	4603      	mov	r3, r0
 800b920:	4293      	cmp	r3, r2
 800b922:	d100      	bne.n	800b926 <memset+0xa>
 800b924:	4770      	bx	lr
 800b926:	f803 1b01 	strb.w	r1, [r3], #1
 800b92a:	e7f9      	b.n	800b920 <memset+0x4>

0800b92c <_calloc_r>:
 800b92c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b92e:	fba1 2402 	umull	r2, r4, r1, r2
 800b932:	b94c      	cbnz	r4, 800b948 <_calloc_r+0x1c>
 800b934:	4611      	mov	r1, r2
 800b936:	9201      	str	r2, [sp, #4]
 800b938:	f000 f87a 	bl	800ba30 <_malloc_r>
 800b93c:	9a01      	ldr	r2, [sp, #4]
 800b93e:	4605      	mov	r5, r0
 800b940:	b930      	cbnz	r0, 800b950 <_calloc_r+0x24>
 800b942:	4628      	mov	r0, r5
 800b944:	b003      	add	sp, #12
 800b946:	bd30      	pop	{r4, r5, pc}
 800b948:	220c      	movs	r2, #12
 800b94a:	6002      	str	r2, [r0, #0]
 800b94c:	2500      	movs	r5, #0
 800b94e:	e7f8      	b.n	800b942 <_calloc_r+0x16>
 800b950:	4621      	mov	r1, r4
 800b952:	f7ff ffe3 	bl	800b91c <memset>
 800b956:	e7f4      	b.n	800b942 <_calloc_r+0x16>

0800b958 <_free_r>:
 800b958:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b95a:	2900      	cmp	r1, #0
 800b95c:	d044      	beq.n	800b9e8 <_free_r+0x90>
 800b95e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b962:	9001      	str	r0, [sp, #4]
 800b964:	2b00      	cmp	r3, #0
 800b966:	f1a1 0404 	sub.w	r4, r1, #4
 800b96a:	bfb8      	it	lt
 800b96c:	18e4      	addlt	r4, r4, r3
 800b96e:	f000 fff5 	bl	800c95c <__malloc_lock>
 800b972:	4a1e      	ldr	r2, [pc, #120]	; (800b9ec <_free_r+0x94>)
 800b974:	9801      	ldr	r0, [sp, #4]
 800b976:	6813      	ldr	r3, [r2, #0]
 800b978:	b933      	cbnz	r3, 800b988 <_free_r+0x30>
 800b97a:	6063      	str	r3, [r4, #4]
 800b97c:	6014      	str	r4, [r2, #0]
 800b97e:	b003      	add	sp, #12
 800b980:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b984:	f000 bff0 	b.w	800c968 <__malloc_unlock>
 800b988:	42a3      	cmp	r3, r4
 800b98a:	d908      	bls.n	800b99e <_free_r+0x46>
 800b98c:	6825      	ldr	r5, [r4, #0]
 800b98e:	1961      	adds	r1, r4, r5
 800b990:	428b      	cmp	r3, r1
 800b992:	bf01      	itttt	eq
 800b994:	6819      	ldreq	r1, [r3, #0]
 800b996:	685b      	ldreq	r3, [r3, #4]
 800b998:	1949      	addeq	r1, r1, r5
 800b99a:	6021      	streq	r1, [r4, #0]
 800b99c:	e7ed      	b.n	800b97a <_free_r+0x22>
 800b99e:	461a      	mov	r2, r3
 800b9a0:	685b      	ldr	r3, [r3, #4]
 800b9a2:	b10b      	cbz	r3, 800b9a8 <_free_r+0x50>
 800b9a4:	42a3      	cmp	r3, r4
 800b9a6:	d9fa      	bls.n	800b99e <_free_r+0x46>
 800b9a8:	6811      	ldr	r1, [r2, #0]
 800b9aa:	1855      	adds	r5, r2, r1
 800b9ac:	42a5      	cmp	r5, r4
 800b9ae:	d10b      	bne.n	800b9c8 <_free_r+0x70>
 800b9b0:	6824      	ldr	r4, [r4, #0]
 800b9b2:	4421      	add	r1, r4
 800b9b4:	1854      	adds	r4, r2, r1
 800b9b6:	42a3      	cmp	r3, r4
 800b9b8:	6011      	str	r1, [r2, #0]
 800b9ba:	d1e0      	bne.n	800b97e <_free_r+0x26>
 800b9bc:	681c      	ldr	r4, [r3, #0]
 800b9be:	685b      	ldr	r3, [r3, #4]
 800b9c0:	6053      	str	r3, [r2, #4]
 800b9c2:	4421      	add	r1, r4
 800b9c4:	6011      	str	r1, [r2, #0]
 800b9c6:	e7da      	b.n	800b97e <_free_r+0x26>
 800b9c8:	d902      	bls.n	800b9d0 <_free_r+0x78>
 800b9ca:	230c      	movs	r3, #12
 800b9cc:	6003      	str	r3, [r0, #0]
 800b9ce:	e7d6      	b.n	800b97e <_free_r+0x26>
 800b9d0:	6825      	ldr	r5, [r4, #0]
 800b9d2:	1961      	adds	r1, r4, r5
 800b9d4:	428b      	cmp	r3, r1
 800b9d6:	bf04      	itt	eq
 800b9d8:	6819      	ldreq	r1, [r3, #0]
 800b9da:	685b      	ldreq	r3, [r3, #4]
 800b9dc:	6063      	str	r3, [r4, #4]
 800b9de:	bf04      	itt	eq
 800b9e0:	1949      	addeq	r1, r1, r5
 800b9e2:	6021      	streq	r1, [r4, #0]
 800b9e4:	6054      	str	r4, [r2, #4]
 800b9e6:	e7ca      	b.n	800b97e <_free_r+0x26>
 800b9e8:	b003      	add	sp, #12
 800b9ea:	bd30      	pop	{r4, r5, pc}
 800b9ec:	20005690 	.word	0x20005690

0800b9f0 <sbrk_aligned>:
 800b9f0:	b570      	push	{r4, r5, r6, lr}
 800b9f2:	4e0e      	ldr	r6, [pc, #56]	; (800ba2c <sbrk_aligned+0x3c>)
 800b9f4:	460c      	mov	r4, r1
 800b9f6:	6831      	ldr	r1, [r6, #0]
 800b9f8:	4605      	mov	r5, r0
 800b9fa:	b911      	cbnz	r1, 800ba02 <sbrk_aligned+0x12>
 800b9fc:	f000 f8f6 	bl	800bbec <_sbrk_r>
 800ba00:	6030      	str	r0, [r6, #0]
 800ba02:	4621      	mov	r1, r4
 800ba04:	4628      	mov	r0, r5
 800ba06:	f000 f8f1 	bl	800bbec <_sbrk_r>
 800ba0a:	1c43      	adds	r3, r0, #1
 800ba0c:	d00a      	beq.n	800ba24 <sbrk_aligned+0x34>
 800ba0e:	1cc4      	adds	r4, r0, #3
 800ba10:	f024 0403 	bic.w	r4, r4, #3
 800ba14:	42a0      	cmp	r0, r4
 800ba16:	d007      	beq.n	800ba28 <sbrk_aligned+0x38>
 800ba18:	1a21      	subs	r1, r4, r0
 800ba1a:	4628      	mov	r0, r5
 800ba1c:	f000 f8e6 	bl	800bbec <_sbrk_r>
 800ba20:	3001      	adds	r0, #1
 800ba22:	d101      	bne.n	800ba28 <sbrk_aligned+0x38>
 800ba24:	f04f 34ff 	mov.w	r4, #4294967295
 800ba28:	4620      	mov	r0, r4
 800ba2a:	bd70      	pop	{r4, r5, r6, pc}
 800ba2c:	20005694 	.word	0x20005694

0800ba30 <_malloc_r>:
 800ba30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba34:	1ccd      	adds	r5, r1, #3
 800ba36:	f025 0503 	bic.w	r5, r5, #3
 800ba3a:	3508      	adds	r5, #8
 800ba3c:	2d0c      	cmp	r5, #12
 800ba3e:	bf38      	it	cc
 800ba40:	250c      	movcc	r5, #12
 800ba42:	2d00      	cmp	r5, #0
 800ba44:	4607      	mov	r7, r0
 800ba46:	db01      	blt.n	800ba4c <_malloc_r+0x1c>
 800ba48:	42a9      	cmp	r1, r5
 800ba4a:	d905      	bls.n	800ba58 <_malloc_r+0x28>
 800ba4c:	230c      	movs	r3, #12
 800ba4e:	603b      	str	r3, [r7, #0]
 800ba50:	2600      	movs	r6, #0
 800ba52:	4630      	mov	r0, r6
 800ba54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba58:	4e2e      	ldr	r6, [pc, #184]	; (800bb14 <_malloc_r+0xe4>)
 800ba5a:	f000 ff7f 	bl	800c95c <__malloc_lock>
 800ba5e:	6833      	ldr	r3, [r6, #0]
 800ba60:	461c      	mov	r4, r3
 800ba62:	bb34      	cbnz	r4, 800bab2 <_malloc_r+0x82>
 800ba64:	4629      	mov	r1, r5
 800ba66:	4638      	mov	r0, r7
 800ba68:	f7ff ffc2 	bl	800b9f0 <sbrk_aligned>
 800ba6c:	1c43      	adds	r3, r0, #1
 800ba6e:	4604      	mov	r4, r0
 800ba70:	d14d      	bne.n	800bb0e <_malloc_r+0xde>
 800ba72:	6834      	ldr	r4, [r6, #0]
 800ba74:	4626      	mov	r6, r4
 800ba76:	2e00      	cmp	r6, #0
 800ba78:	d140      	bne.n	800bafc <_malloc_r+0xcc>
 800ba7a:	6823      	ldr	r3, [r4, #0]
 800ba7c:	4631      	mov	r1, r6
 800ba7e:	4638      	mov	r0, r7
 800ba80:	eb04 0803 	add.w	r8, r4, r3
 800ba84:	f000 f8b2 	bl	800bbec <_sbrk_r>
 800ba88:	4580      	cmp	r8, r0
 800ba8a:	d13a      	bne.n	800bb02 <_malloc_r+0xd2>
 800ba8c:	6821      	ldr	r1, [r4, #0]
 800ba8e:	3503      	adds	r5, #3
 800ba90:	1a6d      	subs	r5, r5, r1
 800ba92:	f025 0503 	bic.w	r5, r5, #3
 800ba96:	3508      	adds	r5, #8
 800ba98:	2d0c      	cmp	r5, #12
 800ba9a:	bf38      	it	cc
 800ba9c:	250c      	movcc	r5, #12
 800ba9e:	4629      	mov	r1, r5
 800baa0:	4638      	mov	r0, r7
 800baa2:	f7ff ffa5 	bl	800b9f0 <sbrk_aligned>
 800baa6:	3001      	adds	r0, #1
 800baa8:	d02b      	beq.n	800bb02 <_malloc_r+0xd2>
 800baaa:	6823      	ldr	r3, [r4, #0]
 800baac:	442b      	add	r3, r5
 800baae:	6023      	str	r3, [r4, #0]
 800bab0:	e00e      	b.n	800bad0 <_malloc_r+0xa0>
 800bab2:	6822      	ldr	r2, [r4, #0]
 800bab4:	1b52      	subs	r2, r2, r5
 800bab6:	d41e      	bmi.n	800baf6 <_malloc_r+0xc6>
 800bab8:	2a0b      	cmp	r2, #11
 800baba:	d916      	bls.n	800baea <_malloc_r+0xba>
 800babc:	1961      	adds	r1, r4, r5
 800babe:	42a3      	cmp	r3, r4
 800bac0:	6025      	str	r5, [r4, #0]
 800bac2:	bf18      	it	ne
 800bac4:	6059      	strne	r1, [r3, #4]
 800bac6:	6863      	ldr	r3, [r4, #4]
 800bac8:	bf08      	it	eq
 800baca:	6031      	streq	r1, [r6, #0]
 800bacc:	5162      	str	r2, [r4, r5]
 800bace:	604b      	str	r3, [r1, #4]
 800bad0:	4638      	mov	r0, r7
 800bad2:	f104 060b 	add.w	r6, r4, #11
 800bad6:	f000 ff47 	bl	800c968 <__malloc_unlock>
 800bada:	f026 0607 	bic.w	r6, r6, #7
 800bade:	1d23      	adds	r3, r4, #4
 800bae0:	1af2      	subs	r2, r6, r3
 800bae2:	d0b6      	beq.n	800ba52 <_malloc_r+0x22>
 800bae4:	1b9b      	subs	r3, r3, r6
 800bae6:	50a3      	str	r3, [r4, r2]
 800bae8:	e7b3      	b.n	800ba52 <_malloc_r+0x22>
 800baea:	6862      	ldr	r2, [r4, #4]
 800baec:	42a3      	cmp	r3, r4
 800baee:	bf0c      	ite	eq
 800baf0:	6032      	streq	r2, [r6, #0]
 800baf2:	605a      	strne	r2, [r3, #4]
 800baf4:	e7ec      	b.n	800bad0 <_malloc_r+0xa0>
 800baf6:	4623      	mov	r3, r4
 800baf8:	6864      	ldr	r4, [r4, #4]
 800bafa:	e7b2      	b.n	800ba62 <_malloc_r+0x32>
 800bafc:	4634      	mov	r4, r6
 800bafe:	6876      	ldr	r6, [r6, #4]
 800bb00:	e7b9      	b.n	800ba76 <_malloc_r+0x46>
 800bb02:	230c      	movs	r3, #12
 800bb04:	603b      	str	r3, [r7, #0]
 800bb06:	4638      	mov	r0, r7
 800bb08:	f000 ff2e 	bl	800c968 <__malloc_unlock>
 800bb0c:	e7a1      	b.n	800ba52 <_malloc_r+0x22>
 800bb0e:	6025      	str	r5, [r4, #0]
 800bb10:	e7de      	b.n	800bad0 <_malloc_r+0xa0>
 800bb12:	bf00      	nop
 800bb14:	20005690 	.word	0x20005690

0800bb18 <cleanup_glue>:
 800bb18:	b538      	push	{r3, r4, r5, lr}
 800bb1a:	460c      	mov	r4, r1
 800bb1c:	6809      	ldr	r1, [r1, #0]
 800bb1e:	4605      	mov	r5, r0
 800bb20:	b109      	cbz	r1, 800bb26 <cleanup_glue+0xe>
 800bb22:	f7ff fff9 	bl	800bb18 <cleanup_glue>
 800bb26:	4621      	mov	r1, r4
 800bb28:	4628      	mov	r0, r5
 800bb2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb2e:	f7ff bf13 	b.w	800b958 <_free_r>
	...

0800bb34 <_reclaim_reent>:
 800bb34:	4b2c      	ldr	r3, [pc, #176]	; (800bbe8 <_reclaim_reent+0xb4>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	4283      	cmp	r3, r0
 800bb3a:	b570      	push	{r4, r5, r6, lr}
 800bb3c:	4604      	mov	r4, r0
 800bb3e:	d051      	beq.n	800bbe4 <_reclaim_reent+0xb0>
 800bb40:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bb42:	b143      	cbz	r3, 800bb56 <_reclaim_reent+0x22>
 800bb44:	68db      	ldr	r3, [r3, #12]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d14a      	bne.n	800bbe0 <_reclaim_reent+0xac>
 800bb4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb4c:	6819      	ldr	r1, [r3, #0]
 800bb4e:	b111      	cbz	r1, 800bb56 <_reclaim_reent+0x22>
 800bb50:	4620      	mov	r0, r4
 800bb52:	f7ff ff01 	bl	800b958 <_free_r>
 800bb56:	6961      	ldr	r1, [r4, #20]
 800bb58:	b111      	cbz	r1, 800bb60 <_reclaim_reent+0x2c>
 800bb5a:	4620      	mov	r0, r4
 800bb5c:	f7ff fefc 	bl	800b958 <_free_r>
 800bb60:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bb62:	b111      	cbz	r1, 800bb6a <_reclaim_reent+0x36>
 800bb64:	4620      	mov	r0, r4
 800bb66:	f7ff fef7 	bl	800b958 <_free_r>
 800bb6a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bb6c:	b111      	cbz	r1, 800bb74 <_reclaim_reent+0x40>
 800bb6e:	4620      	mov	r0, r4
 800bb70:	f7ff fef2 	bl	800b958 <_free_r>
 800bb74:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bb76:	b111      	cbz	r1, 800bb7e <_reclaim_reent+0x4a>
 800bb78:	4620      	mov	r0, r4
 800bb7a:	f7ff feed 	bl	800b958 <_free_r>
 800bb7e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bb80:	b111      	cbz	r1, 800bb88 <_reclaim_reent+0x54>
 800bb82:	4620      	mov	r0, r4
 800bb84:	f7ff fee8 	bl	800b958 <_free_r>
 800bb88:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800bb8a:	b111      	cbz	r1, 800bb92 <_reclaim_reent+0x5e>
 800bb8c:	4620      	mov	r0, r4
 800bb8e:	f7ff fee3 	bl	800b958 <_free_r>
 800bb92:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800bb94:	b111      	cbz	r1, 800bb9c <_reclaim_reent+0x68>
 800bb96:	4620      	mov	r0, r4
 800bb98:	f7ff fede 	bl	800b958 <_free_r>
 800bb9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb9e:	b111      	cbz	r1, 800bba6 <_reclaim_reent+0x72>
 800bba0:	4620      	mov	r0, r4
 800bba2:	f7ff fed9 	bl	800b958 <_free_r>
 800bba6:	69a3      	ldr	r3, [r4, #24]
 800bba8:	b1e3      	cbz	r3, 800bbe4 <_reclaim_reent+0xb0>
 800bbaa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bbac:	4620      	mov	r0, r4
 800bbae:	4798      	blx	r3
 800bbb0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bbb2:	b1b9      	cbz	r1, 800bbe4 <_reclaim_reent+0xb0>
 800bbb4:	4620      	mov	r0, r4
 800bbb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bbba:	f7ff bfad 	b.w	800bb18 <cleanup_glue>
 800bbbe:	5949      	ldr	r1, [r1, r5]
 800bbc0:	b941      	cbnz	r1, 800bbd4 <_reclaim_reent+0xa0>
 800bbc2:	3504      	adds	r5, #4
 800bbc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bbc6:	2d80      	cmp	r5, #128	; 0x80
 800bbc8:	68d9      	ldr	r1, [r3, #12]
 800bbca:	d1f8      	bne.n	800bbbe <_reclaim_reent+0x8a>
 800bbcc:	4620      	mov	r0, r4
 800bbce:	f7ff fec3 	bl	800b958 <_free_r>
 800bbd2:	e7ba      	b.n	800bb4a <_reclaim_reent+0x16>
 800bbd4:	680e      	ldr	r6, [r1, #0]
 800bbd6:	4620      	mov	r0, r4
 800bbd8:	f7ff febe 	bl	800b958 <_free_r>
 800bbdc:	4631      	mov	r1, r6
 800bbde:	e7ef      	b.n	800bbc0 <_reclaim_reent+0x8c>
 800bbe0:	2500      	movs	r5, #0
 800bbe2:	e7ef      	b.n	800bbc4 <_reclaim_reent+0x90>
 800bbe4:	bd70      	pop	{r4, r5, r6, pc}
 800bbe6:	bf00      	nop
 800bbe8:	200001f4 	.word	0x200001f4

0800bbec <_sbrk_r>:
 800bbec:	b538      	push	{r3, r4, r5, lr}
 800bbee:	4d06      	ldr	r5, [pc, #24]	; (800bc08 <_sbrk_r+0x1c>)
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	4604      	mov	r4, r0
 800bbf4:	4608      	mov	r0, r1
 800bbf6:	602b      	str	r3, [r5, #0]
 800bbf8:	f7f8 ff02 	bl	8004a00 <_sbrk>
 800bbfc:	1c43      	adds	r3, r0, #1
 800bbfe:	d102      	bne.n	800bc06 <_sbrk_r+0x1a>
 800bc00:	682b      	ldr	r3, [r5, #0]
 800bc02:	b103      	cbz	r3, 800bc06 <_sbrk_r+0x1a>
 800bc04:	6023      	str	r3, [r4, #0]
 800bc06:	bd38      	pop	{r3, r4, r5, pc}
 800bc08:	20005698 	.word	0x20005698

0800bc0c <sniprintf>:
 800bc0c:	b40c      	push	{r2, r3}
 800bc0e:	b530      	push	{r4, r5, lr}
 800bc10:	4b17      	ldr	r3, [pc, #92]	; (800bc70 <sniprintf+0x64>)
 800bc12:	1e0c      	subs	r4, r1, #0
 800bc14:	681d      	ldr	r5, [r3, #0]
 800bc16:	b09d      	sub	sp, #116	; 0x74
 800bc18:	da08      	bge.n	800bc2c <sniprintf+0x20>
 800bc1a:	238b      	movs	r3, #139	; 0x8b
 800bc1c:	602b      	str	r3, [r5, #0]
 800bc1e:	f04f 30ff 	mov.w	r0, #4294967295
 800bc22:	b01d      	add	sp, #116	; 0x74
 800bc24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc28:	b002      	add	sp, #8
 800bc2a:	4770      	bx	lr
 800bc2c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bc30:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bc34:	bf14      	ite	ne
 800bc36:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bc3a:	4623      	moveq	r3, r4
 800bc3c:	9304      	str	r3, [sp, #16]
 800bc3e:	9307      	str	r3, [sp, #28]
 800bc40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bc44:	9002      	str	r0, [sp, #8]
 800bc46:	9006      	str	r0, [sp, #24]
 800bc48:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bc4c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bc4e:	ab21      	add	r3, sp, #132	; 0x84
 800bc50:	a902      	add	r1, sp, #8
 800bc52:	4628      	mov	r0, r5
 800bc54:	9301      	str	r3, [sp, #4]
 800bc56:	f000 fee9 	bl	800ca2c <_svfiprintf_r>
 800bc5a:	1c43      	adds	r3, r0, #1
 800bc5c:	bfbc      	itt	lt
 800bc5e:	238b      	movlt	r3, #139	; 0x8b
 800bc60:	602b      	strlt	r3, [r5, #0]
 800bc62:	2c00      	cmp	r4, #0
 800bc64:	d0dd      	beq.n	800bc22 <sniprintf+0x16>
 800bc66:	9b02      	ldr	r3, [sp, #8]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	701a      	strb	r2, [r3, #0]
 800bc6c:	e7d9      	b.n	800bc22 <sniprintf+0x16>
 800bc6e:	bf00      	nop
 800bc70:	200001f4 	.word	0x200001f4

0800bc74 <siprintf>:
 800bc74:	b40e      	push	{r1, r2, r3}
 800bc76:	b500      	push	{lr}
 800bc78:	b09c      	sub	sp, #112	; 0x70
 800bc7a:	ab1d      	add	r3, sp, #116	; 0x74
 800bc7c:	9002      	str	r0, [sp, #8]
 800bc7e:	9006      	str	r0, [sp, #24]
 800bc80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bc84:	4809      	ldr	r0, [pc, #36]	; (800bcac <siprintf+0x38>)
 800bc86:	9107      	str	r1, [sp, #28]
 800bc88:	9104      	str	r1, [sp, #16]
 800bc8a:	4909      	ldr	r1, [pc, #36]	; (800bcb0 <siprintf+0x3c>)
 800bc8c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc90:	9105      	str	r1, [sp, #20]
 800bc92:	6800      	ldr	r0, [r0, #0]
 800bc94:	9301      	str	r3, [sp, #4]
 800bc96:	a902      	add	r1, sp, #8
 800bc98:	f000 fec8 	bl	800ca2c <_svfiprintf_r>
 800bc9c:	9b02      	ldr	r3, [sp, #8]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	701a      	strb	r2, [r3, #0]
 800bca2:	b01c      	add	sp, #112	; 0x70
 800bca4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bca8:	b003      	add	sp, #12
 800bcaa:	4770      	bx	lr
 800bcac:	200001f4 	.word	0x200001f4
 800bcb0:	ffff0208 	.word	0xffff0208

0800bcb4 <__sread>:
 800bcb4:	b510      	push	{r4, lr}
 800bcb6:	460c      	mov	r4, r1
 800bcb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcbc:	f001 faa4 	bl	800d208 <_read_r>
 800bcc0:	2800      	cmp	r0, #0
 800bcc2:	bfab      	itete	ge
 800bcc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bcc6:	89a3      	ldrhlt	r3, [r4, #12]
 800bcc8:	181b      	addge	r3, r3, r0
 800bcca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bcce:	bfac      	ite	ge
 800bcd0:	6563      	strge	r3, [r4, #84]	; 0x54
 800bcd2:	81a3      	strhlt	r3, [r4, #12]
 800bcd4:	bd10      	pop	{r4, pc}

0800bcd6 <__seofread>:
 800bcd6:	2000      	movs	r0, #0
 800bcd8:	4770      	bx	lr

0800bcda <__swrite>:
 800bcda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcde:	461f      	mov	r7, r3
 800bce0:	898b      	ldrh	r3, [r1, #12]
 800bce2:	05db      	lsls	r3, r3, #23
 800bce4:	4605      	mov	r5, r0
 800bce6:	460c      	mov	r4, r1
 800bce8:	4616      	mov	r6, r2
 800bcea:	d505      	bpl.n	800bcf8 <__swrite+0x1e>
 800bcec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcf0:	2302      	movs	r3, #2
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	f000 fe20 	bl	800c938 <_lseek_r>
 800bcf8:	89a3      	ldrh	r3, [r4, #12]
 800bcfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bcfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bd02:	81a3      	strh	r3, [r4, #12]
 800bd04:	4632      	mov	r2, r6
 800bd06:	463b      	mov	r3, r7
 800bd08:	4628      	mov	r0, r5
 800bd0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd0e:	f000 bbc3 	b.w	800c498 <_write_r>

0800bd12 <__sseek>:
 800bd12:	b510      	push	{r4, lr}
 800bd14:	460c      	mov	r4, r1
 800bd16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd1a:	f000 fe0d 	bl	800c938 <_lseek_r>
 800bd1e:	1c43      	adds	r3, r0, #1
 800bd20:	89a3      	ldrh	r3, [r4, #12]
 800bd22:	bf15      	itete	ne
 800bd24:	6560      	strne	r0, [r4, #84]	; 0x54
 800bd26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bd2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bd2e:	81a3      	strheq	r3, [r4, #12]
 800bd30:	bf18      	it	ne
 800bd32:	81a3      	strhne	r3, [r4, #12]
 800bd34:	bd10      	pop	{r4, pc}

0800bd36 <__sclose>:
 800bd36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd3a:	f000 bc25 	b.w	800c588 <_close_r>

0800bd3e <strcat>:
 800bd3e:	b510      	push	{r4, lr}
 800bd40:	4602      	mov	r2, r0
 800bd42:	7814      	ldrb	r4, [r2, #0]
 800bd44:	4613      	mov	r3, r2
 800bd46:	3201      	adds	r2, #1
 800bd48:	2c00      	cmp	r4, #0
 800bd4a:	d1fa      	bne.n	800bd42 <strcat+0x4>
 800bd4c:	3b01      	subs	r3, #1
 800bd4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd52:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd56:	2a00      	cmp	r2, #0
 800bd58:	d1f9      	bne.n	800bd4e <strcat+0x10>
 800bd5a:	bd10      	pop	{r4, pc}

0800bd5c <strchr>:
 800bd5c:	b2c9      	uxtb	r1, r1
 800bd5e:	4603      	mov	r3, r0
 800bd60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd64:	b11a      	cbz	r2, 800bd6e <strchr+0x12>
 800bd66:	428a      	cmp	r2, r1
 800bd68:	d1f9      	bne.n	800bd5e <strchr+0x2>
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	4770      	bx	lr
 800bd6e:	2900      	cmp	r1, #0
 800bd70:	bf18      	it	ne
 800bd72:	2300      	movne	r3, #0
 800bd74:	e7f9      	b.n	800bd6a <strchr+0xe>

0800bd76 <strcpy>:
 800bd76:	4603      	mov	r3, r0
 800bd78:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd7c:	f803 2b01 	strb.w	r2, [r3], #1
 800bd80:	2a00      	cmp	r2, #0
 800bd82:	d1f9      	bne.n	800bd78 <strcpy+0x2>
 800bd84:	4770      	bx	lr

0800bd86 <strncpy>:
 800bd86:	b510      	push	{r4, lr}
 800bd88:	3901      	subs	r1, #1
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	b132      	cbz	r2, 800bd9c <strncpy+0x16>
 800bd8e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800bd92:	f803 4b01 	strb.w	r4, [r3], #1
 800bd96:	3a01      	subs	r2, #1
 800bd98:	2c00      	cmp	r4, #0
 800bd9a:	d1f7      	bne.n	800bd8c <strncpy+0x6>
 800bd9c:	441a      	add	r2, r3
 800bd9e:	2100      	movs	r1, #0
 800bda0:	4293      	cmp	r3, r2
 800bda2:	d100      	bne.n	800bda6 <strncpy+0x20>
 800bda4:	bd10      	pop	{r4, pc}
 800bda6:	f803 1b01 	strb.w	r1, [r3], #1
 800bdaa:	e7f9      	b.n	800bda0 <strncpy+0x1a>

0800bdac <strstr>:
 800bdac:	780a      	ldrb	r2, [r1, #0]
 800bdae:	b570      	push	{r4, r5, r6, lr}
 800bdb0:	b96a      	cbnz	r2, 800bdce <strstr+0x22>
 800bdb2:	bd70      	pop	{r4, r5, r6, pc}
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	d109      	bne.n	800bdcc <strstr+0x20>
 800bdb8:	460c      	mov	r4, r1
 800bdba:	4605      	mov	r5, r0
 800bdbc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d0f6      	beq.n	800bdb2 <strstr+0x6>
 800bdc4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800bdc8:	429e      	cmp	r6, r3
 800bdca:	d0f7      	beq.n	800bdbc <strstr+0x10>
 800bdcc:	3001      	adds	r0, #1
 800bdce:	7803      	ldrb	r3, [r0, #0]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d1ef      	bne.n	800bdb4 <strstr+0x8>
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	e7ec      	b.n	800bdb2 <strstr+0x6>

0800bdd8 <strtok>:
 800bdd8:	4b16      	ldr	r3, [pc, #88]	; (800be34 <strtok+0x5c>)
 800bdda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bddc:	681e      	ldr	r6, [r3, #0]
 800bdde:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800bde0:	4605      	mov	r5, r0
 800bde2:	b9fc      	cbnz	r4, 800be24 <strtok+0x4c>
 800bde4:	2050      	movs	r0, #80	; 0x50
 800bde6:	9101      	str	r1, [sp, #4]
 800bde8:	f7ff fd60 	bl	800b8ac <malloc>
 800bdec:	9901      	ldr	r1, [sp, #4]
 800bdee:	65b0      	str	r0, [r6, #88]	; 0x58
 800bdf0:	4602      	mov	r2, r0
 800bdf2:	b920      	cbnz	r0, 800bdfe <strtok+0x26>
 800bdf4:	4b10      	ldr	r3, [pc, #64]	; (800be38 <strtok+0x60>)
 800bdf6:	4811      	ldr	r0, [pc, #68]	; (800be3c <strtok+0x64>)
 800bdf8:	2157      	movs	r1, #87	; 0x57
 800bdfa:	f000 fba7 	bl	800c54c <__assert_func>
 800bdfe:	e9c0 4400 	strd	r4, r4, [r0]
 800be02:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800be06:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800be0a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800be0e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800be12:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800be16:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800be1a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800be1e:	6184      	str	r4, [r0, #24]
 800be20:	7704      	strb	r4, [r0, #28]
 800be22:	6244      	str	r4, [r0, #36]	; 0x24
 800be24:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800be26:	2301      	movs	r3, #1
 800be28:	4628      	mov	r0, r5
 800be2a:	b002      	add	sp, #8
 800be2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800be30:	f000 b806 	b.w	800be40 <__strtok_r>
 800be34:	200001f4 	.word	0x200001f4
 800be38:	0800eda4 	.word	0x0800eda4
 800be3c:	0800ee78 	.word	0x0800ee78

0800be40 <__strtok_r>:
 800be40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be42:	b908      	cbnz	r0, 800be48 <__strtok_r+0x8>
 800be44:	6810      	ldr	r0, [r2, #0]
 800be46:	b188      	cbz	r0, 800be6c <__strtok_r+0x2c>
 800be48:	4604      	mov	r4, r0
 800be4a:	4620      	mov	r0, r4
 800be4c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800be50:	460f      	mov	r7, r1
 800be52:	f817 6b01 	ldrb.w	r6, [r7], #1
 800be56:	b91e      	cbnz	r6, 800be60 <__strtok_r+0x20>
 800be58:	b965      	cbnz	r5, 800be74 <__strtok_r+0x34>
 800be5a:	6015      	str	r5, [r2, #0]
 800be5c:	4628      	mov	r0, r5
 800be5e:	e005      	b.n	800be6c <__strtok_r+0x2c>
 800be60:	42b5      	cmp	r5, r6
 800be62:	d1f6      	bne.n	800be52 <__strtok_r+0x12>
 800be64:	2b00      	cmp	r3, #0
 800be66:	d1f0      	bne.n	800be4a <__strtok_r+0xa>
 800be68:	6014      	str	r4, [r2, #0]
 800be6a:	7003      	strb	r3, [r0, #0]
 800be6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be6e:	461c      	mov	r4, r3
 800be70:	e00c      	b.n	800be8c <__strtok_r+0x4c>
 800be72:	b915      	cbnz	r5, 800be7a <__strtok_r+0x3a>
 800be74:	f814 3b01 	ldrb.w	r3, [r4], #1
 800be78:	460e      	mov	r6, r1
 800be7a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800be7e:	42ab      	cmp	r3, r5
 800be80:	d1f7      	bne.n	800be72 <__strtok_r+0x32>
 800be82:	2b00      	cmp	r3, #0
 800be84:	d0f3      	beq.n	800be6e <__strtok_r+0x2e>
 800be86:	2300      	movs	r3, #0
 800be88:	f804 3c01 	strb.w	r3, [r4, #-1]
 800be8c:	6014      	str	r4, [r2, #0]
 800be8e:	e7ed      	b.n	800be6c <__strtok_r+0x2c>

0800be90 <_strtol_l.constprop.0>:
 800be90:	2b01      	cmp	r3, #1
 800be92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be96:	d001      	beq.n	800be9c <_strtol_l.constprop.0+0xc>
 800be98:	2b24      	cmp	r3, #36	; 0x24
 800be9a:	d906      	bls.n	800beaa <_strtol_l.constprop.0+0x1a>
 800be9c:	f7ff face 	bl	800b43c <__errno>
 800bea0:	2316      	movs	r3, #22
 800bea2:	6003      	str	r3, [r0, #0]
 800bea4:	2000      	movs	r0, #0
 800bea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800beaa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bf90 <_strtol_l.constprop.0+0x100>
 800beae:	460d      	mov	r5, r1
 800beb0:	462e      	mov	r6, r5
 800beb2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800beb6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800beba:	f017 0708 	ands.w	r7, r7, #8
 800bebe:	d1f7      	bne.n	800beb0 <_strtol_l.constprop.0+0x20>
 800bec0:	2c2d      	cmp	r4, #45	; 0x2d
 800bec2:	d132      	bne.n	800bf2a <_strtol_l.constprop.0+0x9a>
 800bec4:	782c      	ldrb	r4, [r5, #0]
 800bec6:	2701      	movs	r7, #1
 800bec8:	1cb5      	adds	r5, r6, #2
 800beca:	2b00      	cmp	r3, #0
 800becc:	d05b      	beq.n	800bf86 <_strtol_l.constprop.0+0xf6>
 800bece:	2b10      	cmp	r3, #16
 800bed0:	d109      	bne.n	800bee6 <_strtol_l.constprop.0+0x56>
 800bed2:	2c30      	cmp	r4, #48	; 0x30
 800bed4:	d107      	bne.n	800bee6 <_strtol_l.constprop.0+0x56>
 800bed6:	782c      	ldrb	r4, [r5, #0]
 800bed8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bedc:	2c58      	cmp	r4, #88	; 0x58
 800bede:	d14d      	bne.n	800bf7c <_strtol_l.constprop.0+0xec>
 800bee0:	786c      	ldrb	r4, [r5, #1]
 800bee2:	2310      	movs	r3, #16
 800bee4:	3502      	adds	r5, #2
 800bee6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800beea:	f108 38ff 	add.w	r8, r8, #4294967295
 800beee:	f04f 0c00 	mov.w	ip, #0
 800bef2:	fbb8 f9f3 	udiv	r9, r8, r3
 800bef6:	4666      	mov	r6, ip
 800bef8:	fb03 8a19 	mls	sl, r3, r9, r8
 800befc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800bf00:	f1be 0f09 	cmp.w	lr, #9
 800bf04:	d816      	bhi.n	800bf34 <_strtol_l.constprop.0+0xa4>
 800bf06:	4674      	mov	r4, lr
 800bf08:	42a3      	cmp	r3, r4
 800bf0a:	dd24      	ble.n	800bf56 <_strtol_l.constprop.0+0xc6>
 800bf0c:	f1bc 0f00 	cmp.w	ip, #0
 800bf10:	db1e      	blt.n	800bf50 <_strtol_l.constprop.0+0xc0>
 800bf12:	45b1      	cmp	r9, r6
 800bf14:	d31c      	bcc.n	800bf50 <_strtol_l.constprop.0+0xc0>
 800bf16:	d101      	bne.n	800bf1c <_strtol_l.constprop.0+0x8c>
 800bf18:	45a2      	cmp	sl, r4
 800bf1a:	db19      	blt.n	800bf50 <_strtol_l.constprop.0+0xc0>
 800bf1c:	fb06 4603 	mla	r6, r6, r3, r4
 800bf20:	f04f 0c01 	mov.w	ip, #1
 800bf24:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bf28:	e7e8      	b.n	800befc <_strtol_l.constprop.0+0x6c>
 800bf2a:	2c2b      	cmp	r4, #43	; 0x2b
 800bf2c:	bf04      	itt	eq
 800bf2e:	782c      	ldrbeq	r4, [r5, #0]
 800bf30:	1cb5      	addeq	r5, r6, #2
 800bf32:	e7ca      	b.n	800beca <_strtol_l.constprop.0+0x3a>
 800bf34:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800bf38:	f1be 0f19 	cmp.w	lr, #25
 800bf3c:	d801      	bhi.n	800bf42 <_strtol_l.constprop.0+0xb2>
 800bf3e:	3c37      	subs	r4, #55	; 0x37
 800bf40:	e7e2      	b.n	800bf08 <_strtol_l.constprop.0+0x78>
 800bf42:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800bf46:	f1be 0f19 	cmp.w	lr, #25
 800bf4a:	d804      	bhi.n	800bf56 <_strtol_l.constprop.0+0xc6>
 800bf4c:	3c57      	subs	r4, #87	; 0x57
 800bf4e:	e7db      	b.n	800bf08 <_strtol_l.constprop.0+0x78>
 800bf50:	f04f 3cff 	mov.w	ip, #4294967295
 800bf54:	e7e6      	b.n	800bf24 <_strtol_l.constprop.0+0x94>
 800bf56:	f1bc 0f00 	cmp.w	ip, #0
 800bf5a:	da05      	bge.n	800bf68 <_strtol_l.constprop.0+0xd8>
 800bf5c:	2322      	movs	r3, #34	; 0x22
 800bf5e:	6003      	str	r3, [r0, #0]
 800bf60:	4646      	mov	r6, r8
 800bf62:	b942      	cbnz	r2, 800bf76 <_strtol_l.constprop.0+0xe6>
 800bf64:	4630      	mov	r0, r6
 800bf66:	e79e      	b.n	800bea6 <_strtol_l.constprop.0+0x16>
 800bf68:	b107      	cbz	r7, 800bf6c <_strtol_l.constprop.0+0xdc>
 800bf6a:	4276      	negs	r6, r6
 800bf6c:	2a00      	cmp	r2, #0
 800bf6e:	d0f9      	beq.n	800bf64 <_strtol_l.constprop.0+0xd4>
 800bf70:	f1bc 0f00 	cmp.w	ip, #0
 800bf74:	d000      	beq.n	800bf78 <_strtol_l.constprop.0+0xe8>
 800bf76:	1e69      	subs	r1, r5, #1
 800bf78:	6011      	str	r1, [r2, #0]
 800bf7a:	e7f3      	b.n	800bf64 <_strtol_l.constprop.0+0xd4>
 800bf7c:	2430      	movs	r4, #48	; 0x30
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d1b1      	bne.n	800bee6 <_strtol_l.constprop.0+0x56>
 800bf82:	2308      	movs	r3, #8
 800bf84:	e7af      	b.n	800bee6 <_strtol_l.constprop.0+0x56>
 800bf86:	2c30      	cmp	r4, #48	; 0x30
 800bf88:	d0a5      	beq.n	800bed6 <_strtol_l.constprop.0+0x46>
 800bf8a:	230a      	movs	r3, #10
 800bf8c:	e7ab      	b.n	800bee6 <_strtol_l.constprop.0+0x56>
 800bf8e:	bf00      	nop
 800bf90:	0800f003 	.word	0x0800f003

0800bf94 <_strtol_r>:
 800bf94:	f7ff bf7c 	b.w	800be90 <_strtol_l.constprop.0>

0800bf98 <strtol>:
 800bf98:	4613      	mov	r3, r2
 800bf9a:	460a      	mov	r2, r1
 800bf9c:	4601      	mov	r1, r0
 800bf9e:	4802      	ldr	r0, [pc, #8]	; (800bfa8 <strtol+0x10>)
 800bfa0:	6800      	ldr	r0, [r0, #0]
 800bfa2:	f7ff bf75 	b.w	800be90 <_strtol_l.constprop.0>
 800bfa6:	bf00      	nop
 800bfa8:	200001f4 	.word	0x200001f4

0800bfac <__tzcalc_limits>:
 800bfac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfb0:	4605      	mov	r5, r0
 800bfb2:	f000 fc11 	bl	800c7d8 <__gettzinfo>
 800bfb6:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800bfba:	429d      	cmp	r5, r3
 800bfbc:	f340 8099 	ble.w	800c0f2 <__tzcalc_limits+0x146>
 800bfc0:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 800bfc4:	18ac      	adds	r4, r5, r2
 800bfc6:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800bfca:	f240 126d 	movw	r2, #365	; 0x16d
 800bfce:	10a4      	asrs	r4, r4, #2
 800bfd0:	fb02 4403 	mla	r4, r2, r3, r4
 800bfd4:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800bfd8:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 800bfdc:	fb93 f3f2 	sdiv	r3, r3, r2
 800bfe0:	441c      	add	r4, r3
 800bfe2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800bfe6:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 800bfea:	fb95 fcf3 	sdiv	ip, r5, r3
 800bfee:	fb03 5c1c 	mls	ip, r3, ip, r5
 800bff2:	186a      	adds	r2, r5, r1
 800bff4:	fabc f68c 	clz	r6, ip
 800bff8:	fbb2 f2f3 	udiv	r2, r2, r3
 800bffc:	f005 0303 	and.w	r3, r5, #3
 800c000:	4414      	add	r4, r2
 800c002:	2264      	movs	r2, #100	; 0x64
 800c004:	6045      	str	r5, [r0, #4]
 800c006:	fb95 f7f2 	sdiv	r7, r5, r2
 800c00a:	0976      	lsrs	r6, r6, #5
 800c00c:	fb02 5717 	mls	r7, r2, r7, r5
 800c010:	4601      	mov	r1, r0
 800c012:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800c016:	9300      	str	r3, [sp, #0]
 800c018:	f04f 0a07 	mov.w	sl, #7
 800c01c:	7a0d      	ldrb	r5, [r1, #8]
 800c01e:	694b      	ldr	r3, [r1, #20]
 800c020:	2d4a      	cmp	r5, #74	; 0x4a
 800c022:	d12d      	bne.n	800c080 <__tzcalc_limits+0xd4>
 800c024:	9a00      	ldr	r2, [sp, #0]
 800c026:	eb04 0e03 	add.w	lr, r4, r3
 800c02a:	b902      	cbnz	r2, 800c02e <__tzcalc_limits+0x82>
 800c02c:	b917      	cbnz	r7, 800c034 <__tzcalc_limits+0x88>
 800c02e:	f1bc 0f00 	cmp.w	ip, #0
 800c032:	d123      	bne.n	800c07c <__tzcalc_limits+0xd0>
 800c034:	2b3b      	cmp	r3, #59	; 0x3b
 800c036:	bfd4      	ite	le
 800c038:	2300      	movle	r3, #0
 800c03a:	2301      	movgt	r3, #1
 800c03c:	4473      	add	r3, lr
 800c03e:	3b01      	subs	r3, #1
 800c040:	698d      	ldr	r5, [r1, #24]
 800c042:	4a2d      	ldr	r2, [pc, #180]	; (800c0f8 <__tzcalc_limits+0x14c>)
 800c044:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800c048:	fbc3 5e02 	smlal	r5, lr, r3, r2
 800c04c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800c04e:	18ed      	adds	r5, r5, r3
 800c050:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 800c054:	e9c1 5308 	strd	r5, r3, [r1, #32]
 800c058:	3128      	adds	r1, #40	; 0x28
 800c05a:	458b      	cmp	fp, r1
 800c05c:	d1de      	bne.n	800c01c <__tzcalc_limits+0x70>
 800c05e:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 800c062:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 800c066:	428c      	cmp	r4, r1
 800c068:	eb72 0303 	sbcs.w	r3, r2, r3
 800c06c:	bfb4      	ite	lt
 800c06e:	2301      	movlt	r3, #1
 800c070:	2300      	movge	r3, #0
 800c072:	6003      	str	r3, [r0, #0]
 800c074:	2001      	movs	r0, #1
 800c076:	b003      	add	sp, #12
 800c078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c07c:	2300      	movs	r3, #0
 800c07e:	e7dd      	b.n	800c03c <__tzcalc_limits+0x90>
 800c080:	2d44      	cmp	r5, #68	; 0x44
 800c082:	d101      	bne.n	800c088 <__tzcalc_limits+0xdc>
 800c084:	4423      	add	r3, r4
 800c086:	e7db      	b.n	800c040 <__tzcalc_limits+0x94>
 800c088:	9a00      	ldr	r2, [sp, #0]
 800c08a:	bb62      	cbnz	r2, 800c0e6 <__tzcalc_limits+0x13a>
 800c08c:	2f00      	cmp	r7, #0
 800c08e:	bf0c      	ite	eq
 800c090:	4635      	moveq	r5, r6
 800c092:	2501      	movne	r5, #1
 800c094:	68ca      	ldr	r2, [r1, #12]
 800c096:	9201      	str	r2, [sp, #4]
 800c098:	4a18      	ldr	r2, [pc, #96]	; (800c0fc <__tzcalc_limits+0x150>)
 800c09a:	f04f 0930 	mov.w	r9, #48	; 0x30
 800c09e:	fb09 2505 	mla	r5, r9, r5, r2
 800c0a2:	46a6      	mov	lr, r4
 800c0a4:	f04f 0800 	mov.w	r8, #0
 800c0a8:	3d04      	subs	r5, #4
 800c0aa:	9a01      	ldr	r2, [sp, #4]
 800c0ac:	f108 0801 	add.w	r8, r8, #1
 800c0b0:	4542      	cmp	r2, r8
 800c0b2:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 800c0b6:	dc18      	bgt.n	800c0ea <__tzcalc_limits+0x13e>
 800c0b8:	f10e 0504 	add.w	r5, lr, #4
 800c0bc:	fb95 f8fa 	sdiv	r8, r5, sl
 800c0c0:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 800c0c4:	eba5 0808 	sub.w	r8, r5, r8
 800c0c8:	ebb3 0808 	subs.w	r8, r3, r8
 800c0cc:	690b      	ldr	r3, [r1, #16]
 800c0ce:	f103 33ff 	add.w	r3, r3, #4294967295
 800c0d2:	bf48      	it	mi
 800c0d4:	f108 0807 	addmi.w	r8, r8, #7
 800c0d8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800c0dc:	4443      	add	r3, r8
 800c0de:	454b      	cmp	r3, r9
 800c0e0:	da05      	bge.n	800c0ee <__tzcalc_limits+0x142>
 800c0e2:	4473      	add	r3, lr
 800c0e4:	e7ac      	b.n	800c040 <__tzcalc_limits+0x94>
 800c0e6:	4635      	mov	r5, r6
 800c0e8:	e7d4      	b.n	800c094 <__tzcalc_limits+0xe8>
 800c0ea:	44ce      	add	lr, r9
 800c0ec:	e7dd      	b.n	800c0aa <__tzcalc_limits+0xfe>
 800c0ee:	3b07      	subs	r3, #7
 800c0f0:	e7f5      	b.n	800c0de <__tzcalc_limits+0x132>
 800c0f2:	2000      	movs	r0, #0
 800c0f4:	e7bf      	b.n	800c076 <__tzcalc_limits+0xca>
 800c0f6:	bf00      	nop
 800c0f8:	00015180 	.word	0x00015180
 800c0fc:	0800ee18 	.word	0x0800ee18

0800c100 <__tz_lock>:
 800c100:	4801      	ldr	r0, [pc, #4]	; (800c108 <__tz_lock+0x8>)
 800c102:	f7ff bbce 	b.w	800b8a2 <__retarget_lock_acquire>
 800c106:	bf00      	nop
 800c108:	2000568c 	.word	0x2000568c

0800c10c <__tz_unlock>:
 800c10c:	4801      	ldr	r0, [pc, #4]	; (800c114 <__tz_unlock+0x8>)
 800c10e:	f7ff bbca 	b.w	800b8a6 <__retarget_lock_release>
 800c112:	bf00      	nop
 800c114:	2000568c 	.word	0x2000568c

0800c118 <_tzset_unlocked>:
 800c118:	4b01      	ldr	r3, [pc, #4]	; (800c120 <_tzset_unlocked+0x8>)
 800c11a:	6818      	ldr	r0, [r3, #0]
 800c11c:	f000 b802 	b.w	800c124 <_tzset_unlocked_r>
 800c120:	200001f4 	.word	0x200001f4

0800c124 <_tzset_unlocked_r>:
 800c124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c128:	b08d      	sub	sp, #52	; 0x34
 800c12a:	4607      	mov	r7, r0
 800c12c:	f000 fb54 	bl	800c7d8 <__gettzinfo>
 800c130:	49b0      	ldr	r1, [pc, #704]	; (800c3f4 <_tzset_unlocked_r+0x2d0>)
 800c132:	4eb1      	ldr	r6, [pc, #708]	; (800c3f8 <_tzset_unlocked_r+0x2d4>)
 800c134:	4605      	mov	r5, r0
 800c136:	4638      	mov	r0, r7
 800c138:	f000 fb46 	bl	800c7c8 <_getenv_r>
 800c13c:	4604      	mov	r4, r0
 800c13e:	b970      	cbnz	r0, 800c15e <_tzset_unlocked_r+0x3a>
 800c140:	4bae      	ldr	r3, [pc, #696]	; (800c3fc <_tzset_unlocked_r+0x2d8>)
 800c142:	4aaf      	ldr	r2, [pc, #700]	; (800c400 <_tzset_unlocked_r+0x2dc>)
 800c144:	6018      	str	r0, [r3, #0]
 800c146:	4baf      	ldr	r3, [pc, #700]	; (800c404 <_tzset_unlocked_r+0x2e0>)
 800c148:	6018      	str	r0, [r3, #0]
 800c14a:	4baf      	ldr	r3, [pc, #700]	; (800c408 <_tzset_unlocked_r+0x2e4>)
 800c14c:	6830      	ldr	r0, [r6, #0]
 800c14e:	e9c3 2200 	strd	r2, r2, [r3]
 800c152:	f7ff fbb3 	bl	800b8bc <free>
 800c156:	6034      	str	r4, [r6, #0]
 800c158:	b00d      	add	sp, #52	; 0x34
 800c15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c15e:	6831      	ldr	r1, [r6, #0]
 800c160:	2900      	cmp	r1, #0
 800c162:	d162      	bne.n	800c22a <_tzset_unlocked_r+0x106>
 800c164:	6830      	ldr	r0, [r6, #0]
 800c166:	f7ff fba9 	bl	800b8bc <free>
 800c16a:	4620      	mov	r0, r4
 800c16c:	f7f4 f862 	bl	8000234 <strlen>
 800c170:	1c41      	adds	r1, r0, #1
 800c172:	4638      	mov	r0, r7
 800c174:	f7ff fc5c 	bl	800ba30 <_malloc_r>
 800c178:	6030      	str	r0, [r6, #0]
 800c17a:	2800      	cmp	r0, #0
 800c17c:	d15a      	bne.n	800c234 <_tzset_unlocked_r+0x110>
 800c17e:	7823      	ldrb	r3, [r4, #0]
 800c180:	4aa2      	ldr	r2, [pc, #648]	; (800c40c <_tzset_unlocked_r+0x2e8>)
 800c182:	49a3      	ldr	r1, [pc, #652]	; (800c410 <_tzset_unlocked_r+0x2ec>)
 800c184:	2b3a      	cmp	r3, #58	; 0x3a
 800c186:	bf08      	it	eq
 800c188:	3401      	addeq	r4, #1
 800c18a:	ae0a      	add	r6, sp, #40	; 0x28
 800c18c:	4633      	mov	r3, r6
 800c18e:	4620      	mov	r0, r4
 800c190:	f001 f84c 	bl	800d22c <siscanf>
 800c194:	2800      	cmp	r0, #0
 800c196:	dddf      	ble.n	800c158 <_tzset_unlocked_r+0x34>
 800c198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c19a:	18e7      	adds	r7, r4, r3
 800c19c:	5ce3      	ldrb	r3, [r4, r3]
 800c19e:	2b2d      	cmp	r3, #45	; 0x2d
 800c1a0:	d14c      	bne.n	800c23c <_tzset_unlocked_r+0x118>
 800c1a2:	3701      	adds	r7, #1
 800c1a4:	f04f 38ff 	mov.w	r8, #4294967295
 800c1a8:	f10d 0a20 	add.w	sl, sp, #32
 800c1ac:	f10d 0b1e 	add.w	fp, sp, #30
 800c1b0:	2400      	movs	r4, #0
 800c1b2:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800c1b6:	4997      	ldr	r1, [pc, #604]	; (800c414 <_tzset_unlocked_r+0x2f0>)
 800c1b8:	9603      	str	r6, [sp, #12]
 800c1ba:	f8cd b000 	str.w	fp, [sp]
 800c1be:	4633      	mov	r3, r6
 800c1c0:	aa07      	add	r2, sp, #28
 800c1c2:	4638      	mov	r0, r7
 800c1c4:	f8ad 401e 	strh.w	r4, [sp, #30]
 800c1c8:	f8ad 4020 	strh.w	r4, [sp, #32]
 800c1cc:	f001 f82e 	bl	800d22c <siscanf>
 800c1d0:	42a0      	cmp	r0, r4
 800c1d2:	ddc1      	ble.n	800c158 <_tzset_unlocked_r+0x34>
 800c1d4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800c1d8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800c1dc:	f8df 9240 	ldr.w	r9, [pc, #576]	; 800c420 <_tzset_unlocked_r+0x2fc>
 800c1e0:	213c      	movs	r1, #60	; 0x3c
 800c1e2:	fb01 3302 	mla	r3, r1, r2, r3
 800c1e6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800c1ea:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800c1ee:	fb01 3302 	mla	r3, r1, r2, r3
 800c1f2:	fb08 f303 	mul.w	r3, r8, r3
 800c1f6:	f8df 8210 	ldr.w	r8, [pc, #528]	; 800c408 <_tzset_unlocked_r+0x2e4>
 800c1fa:	62ab      	str	r3, [r5, #40]	; 0x28
 800c1fc:	4b83      	ldr	r3, [pc, #524]	; (800c40c <_tzset_unlocked_r+0x2e8>)
 800c1fe:	f8c8 3000 	str.w	r3, [r8]
 800c202:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c204:	4982      	ldr	r1, [pc, #520]	; (800c410 <_tzset_unlocked_r+0x2ec>)
 800c206:	441f      	add	r7, r3
 800c208:	464a      	mov	r2, r9
 800c20a:	4633      	mov	r3, r6
 800c20c:	4638      	mov	r0, r7
 800c20e:	f001 f80d 	bl	800d22c <siscanf>
 800c212:	42a0      	cmp	r0, r4
 800c214:	dc18      	bgt.n	800c248 <_tzset_unlocked_r+0x124>
 800c216:	f8d8 3000 	ldr.w	r3, [r8]
 800c21a:	f8c8 3004 	str.w	r3, [r8, #4]
 800c21e:	4b77      	ldr	r3, [pc, #476]	; (800c3fc <_tzset_unlocked_r+0x2d8>)
 800c220:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800c222:	601a      	str	r2, [r3, #0]
 800c224:	4b77      	ldr	r3, [pc, #476]	; (800c404 <_tzset_unlocked_r+0x2e0>)
 800c226:	601c      	str	r4, [r3, #0]
 800c228:	e796      	b.n	800c158 <_tzset_unlocked_r+0x34>
 800c22a:	f7f3 fff9 	bl	8000220 <strcmp>
 800c22e:	2800      	cmp	r0, #0
 800c230:	d198      	bne.n	800c164 <_tzset_unlocked_r+0x40>
 800c232:	e791      	b.n	800c158 <_tzset_unlocked_r+0x34>
 800c234:	4621      	mov	r1, r4
 800c236:	f7ff fd9e 	bl	800bd76 <strcpy>
 800c23a:	e7a0      	b.n	800c17e <_tzset_unlocked_r+0x5a>
 800c23c:	2b2b      	cmp	r3, #43	; 0x2b
 800c23e:	bf08      	it	eq
 800c240:	3701      	addeq	r7, #1
 800c242:	f04f 0801 	mov.w	r8, #1
 800c246:	e7af      	b.n	800c1a8 <_tzset_unlocked_r+0x84>
 800c248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c24a:	f8c8 9004 	str.w	r9, [r8, #4]
 800c24e:	18fc      	adds	r4, r7, r3
 800c250:	5cfb      	ldrb	r3, [r7, r3]
 800c252:	2b2d      	cmp	r3, #45	; 0x2d
 800c254:	f040 808b 	bne.w	800c36e <_tzset_unlocked_r+0x24a>
 800c258:	3401      	adds	r4, #1
 800c25a:	f04f 37ff 	mov.w	r7, #4294967295
 800c25e:	2300      	movs	r3, #0
 800c260:	f8ad 301c 	strh.w	r3, [sp, #28]
 800c264:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c268:	f8ad 3020 	strh.w	r3, [sp, #32]
 800c26c:	930a      	str	r3, [sp, #40]	; 0x28
 800c26e:	e9cd a602 	strd	sl, r6, [sp, #8]
 800c272:	e9cd b600 	strd	fp, r6, [sp]
 800c276:	4967      	ldr	r1, [pc, #412]	; (800c414 <_tzset_unlocked_r+0x2f0>)
 800c278:	4633      	mov	r3, r6
 800c27a:	aa07      	add	r2, sp, #28
 800c27c:	4620      	mov	r0, r4
 800c27e:	f000 ffd5 	bl	800d22c <siscanf>
 800c282:	2800      	cmp	r0, #0
 800c284:	dc78      	bgt.n	800c378 <_tzset_unlocked_r+0x254>
 800c286:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c288:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800c28c:	652b      	str	r3, [r5, #80]	; 0x50
 800c28e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c290:	462f      	mov	r7, r5
 800c292:	441c      	add	r4, r3
 800c294:	f04f 0900 	mov.w	r9, #0
 800c298:	7823      	ldrb	r3, [r4, #0]
 800c29a:	2b2c      	cmp	r3, #44	; 0x2c
 800c29c:	bf08      	it	eq
 800c29e:	3401      	addeq	r4, #1
 800c2a0:	f894 8000 	ldrb.w	r8, [r4]
 800c2a4:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800c2a8:	d178      	bne.n	800c39c <_tzset_unlocked_r+0x278>
 800c2aa:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800c2ae:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800c2b2:	ab09      	add	r3, sp, #36	; 0x24
 800c2b4:	9300      	str	r3, [sp, #0]
 800c2b6:	4958      	ldr	r1, [pc, #352]	; (800c418 <_tzset_unlocked_r+0x2f4>)
 800c2b8:	9603      	str	r6, [sp, #12]
 800c2ba:	4633      	mov	r3, r6
 800c2bc:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800c2c0:	4620      	mov	r0, r4
 800c2c2:	f000 ffb3 	bl	800d22c <siscanf>
 800c2c6:	2803      	cmp	r0, #3
 800c2c8:	f47f af46 	bne.w	800c158 <_tzset_unlocked_r+0x34>
 800c2cc:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800c2d0:	1e4b      	subs	r3, r1, #1
 800c2d2:	2b0b      	cmp	r3, #11
 800c2d4:	f63f af40 	bhi.w	800c158 <_tzset_unlocked_r+0x34>
 800c2d8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800c2dc:	1e53      	subs	r3, r2, #1
 800c2de:	2b04      	cmp	r3, #4
 800c2e0:	f63f af3a 	bhi.w	800c158 <_tzset_unlocked_r+0x34>
 800c2e4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800c2e8:	2b06      	cmp	r3, #6
 800c2ea:	f63f af35 	bhi.w	800c158 <_tzset_unlocked_r+0x34>
 800c2ee:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800c2f2:	f887 8008 	strb.w	r8, [r7, #8]
 800c2f6:	617b      	str	r3, [r7, #20]
 800c2f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2fa:	eb04 0803 	add.w	r8, r4, r3
 800c2fe:	2302      	movs	r3, #2
 800c300:	f8ad 301c 	strh.w	r3, [sp, #28]
 800c304:	2300      	movs	r3, #0
 800c306:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c30a:	f8ad 3020 	strh.w	r3, [sp, #32]
 800c30e:	930a      	str	r3, [sp, #40]	; 0x28
 800c310:	f898 3000 	ldrb.w	r3, [r8]
 800c314:	2b2f      	cmp	r3, #47	; 0x2f
 800c316:	d109      	bne.n	800c32c <_tzset_unlocked_r+0x208>
 800c318:	e9cd a602 	strd	sl, r6, [sp, #8]
 800c31c:	e9cd b600 	strd	fp, r6, [sp]
 800c320:	493e      	ldr	r1, [pc, #248]	; (800c41c <_tzset_unlocked_r+0x2f8>)
 800c322:	4633      	mov	r3, r6
 800c324:	aa07      	add	r2, sp, #28
 800c326:	4640      	mov	r0, r8
 800c328:	f000 ff80 	bl	800d22c <siscanf>
 800c32c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800c330:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800c334:	213c      	movs	r1, #60	; 0x3c
 800c336:	fb01 3302 	mla	r3, r1, r2, r3
 800c33a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800c33e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800c342:	fb01 3302 	mla	r3, r1, r2, r3
 800c346:	61bb      	str	r3, [r7, #24]
 800c348:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c34a:	3728      	adds	r7, #40	; 0x28
 800c34c:	4444      	add	r4, r8
 800c34e:	f1b9 0f00 	cmp.w	r9, #0
 800c352:	d020      	beq.n	800c396 <_tzset_unlocked_r+0x272>
 800c354:	6868      	ldr	r0, [r5, #4]
 800c356:	f7ff fe29 	bl	800bfac <__tzcalc_limits>
 800c35a:	4b28      	ldr	r3, [pc, #160]	; (800c3fc <_tzset_unlocked_r+0x2d8>)
 800c35c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800c35e:	601a      	str	r2, [r3, #0]
 800c360:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800c362:	1a9b      	subs	r3, r3, r2
 800c364:	4a27      	ldr	r2, [pc, #156]	; (800c404 <_tzset_unlocked_r+0x2e0>)
 800c366:	bf18      	it	ne
 800c368:	2301      	movne	r3, #1
 800c36a:	6013      	str	r3, [r2, #0]
 800c36c:	e6f4      	b.n	800c158 <_tzset_unlocked_r+0x34>
 800c36e:	2b2b      	cmp	r3, #43	; 0x2b
 800c370:	bf08      	it	eq
 800c372:	3401      	addeq	r4, #1
 800c374:	2701      	movs	r7, #1
 800c376:	e772      	b.n	800c25e <_tzset_unlocked_r+0x13a>
 800c378:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800c37c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800c380:	213c      	movs	r1, #60	; 0x3c
 800c382:	fb01 3302 	mla	r3, r1, r2, r3
 800c386:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800c38a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800c38e:	fb01 3302 	mla	r3, r1, r2, r3
 800c392:	437b      	muls	r3, r7
 800c394:	e77a      	b.n	800c28c <_tzset_unlocked_r+0x168>
 800c396:	f04f 0901 	mov.w	r9, #1
 800c39a:	e77d      	b.n	800c298 <_tzset_unlocked_r+0x174>
 800c39c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800c3a0:	bf06      	itte	eq
 800c3a2:	3401      	addeq	r4, #1
 800c3a4:	4643      	moveq	r3, r8
 800c3a6:	2344      	movne	r3, #68	; 0x44
 800c3a8:	220a      	movs	r2, #10
 800c3aa:	a90b      	add	r1, sp, #44	; 0x2c
 800c3ac:	4620      	mov	r0, r4
 800c3ae:	9305      	str	r3, [sp, #20]
 800c3b0:	f000 fff0 	bl	800d394 <strtoul>
 800c3b4:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800c3b8:	9b05      	ldr	r3, [sp, #20]
 800c3ba:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800c3be:	45a0      	cmp	r8, r4
 800c3c0:	d114      	bne.n	800c3ec <_tzset_unlocked_r+0x2c8>
 800c3c2:	234d      	movs	r3, #77	; 0x4d
 800c3c4:	f1b9 0f00 	cmp.w	r9, #0
 800c3c8:	d107      	bne.n	800c3da <_tzset_unlocked_r+0x2b6>
 800c3ca:	722b      	strb	r3, [r5, #8]
 800c3cc:	2103      	movs	r1, #3
 800c3ce:	2302      	movs	r3, #2
 800c3d0:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800c3d4:	f8c5 9014 	str.w	r9, [r5, #20]
 800c3d8:	e791      	b.n	800c2fe <_tzset_unlocked_r+0x1da>
 800c3da:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800c3de:	220b      	movs	r2, #11
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	63eb      	str	r3, [r5, #60]	; 0x3c
 800c3ea:	e788      	b.n	800c2fe <_tzset_unlocked_r+0x1da>
 800c3ec:	b280      	uxth	r0, r0
 800c3ee:	723b      	strb	r3, [r7, #8]
 800c3f0:	6178      	str	r0, [r7, #20]
 800c3f2:	e784      	b.n	800c2fe <_tzset_unlocked_r+0x1da>
 800c3f4:	0800eed5 	.word	0x0800eed5
 800c3f8:	200056b4 	.word	0x200056b4
 800c3fc:	200056bc 	.word	0x200056bc
 800c400:	0800eed8 	.word	0x0800eed8
 800c404:	200056b8 	.word	0x200056b8
 800c408:	20000258 	.word	0x20000258
 800c40c:	200056a7 	.word	0x200056a7
 800c410:	0800eedc 	.word	0x0800eedc
 800c414:	0800eeff 	.word	0x0800eeff
 800c418:	0800eeeb 	.word	0x0800eeeb
 800c41c:	0800eefe 	.word	0x0800eefe
 800c420:	2000569c 	.word	0x2000569c

0800c424 <_vsniprintf_r>:
 800c424:	b530      	push	{r4, r5, lr}
 800c426:	4614      	mov	r4, r2
 800c428:	2c00      	cmp	r4, #0
 800c42a:	b09b      	sub	sp, #108	; 0x6c
 800c42c:	4605      	mov	r5, r0
 800c42e:	461a      	mov	r2, r3
 800c430:	da05      	bge.n	800c43e <_vsniprintf_r+0x1a>
 800c432:	238b      	movs	r3, #139	; 0x8b
 800c434:	6003      	str	r3, [r0, #0]
 800c436:	f04f 30ff 	mov.w	r0, #4294967295
 800c43a:	b01b      	add	sp, #108	; 0x6c
 800c43c:	bd30      	pop	{r4, r5, pc}
 800c43e:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c442:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c446:	bf14      	ite	ne
 800c448:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c44c:	4623      	moveq	r3, r4
 800c44e:	9302      	str	r3, [sp, #8]
 800c450:	9305      	str	r3, [sp, #20]
 800c452:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c456:	9100      	str	r1, [sp, #0]
 800c458:	9104      	str	r1, [sp, #16]
 800c45a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c45e:	4669      	mov	r1, sp
 800c460:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c462:	f000 fae3 	bl	800ca2c <_svfiprintf_r>
 800c466:	1c43      	adds	r3, r0, #1
 800c468:	bfbc      	itt	lt
 800c46a:	238b      	movlt	r3, #139	; 0x8b
 800c46c:	602b      	strlt	r3, [r5, #0]
 800c46e:	2c00      	cmp	r4, #0
 800c470:	d0e3      	beq.n	800c43a <_vsniprintf_r+0x16>
 800c472:	9b00      	ldr	r3, [sp, #0]
 800c474:	2200      	movs	r2, #0
 800c476:	701a      	strb	r2, [r3, #0]
 800c478:	e7df      	b.n	800c43a <_vsniprintf_r+0x16>
	...

0800c47c <vsniprintf>:
 800c47c:	b507      	push	{r0, r1, r2, lr}
 800c47e:	9300      	str	r3, [sp, #0]
 800c480:	4613      	mov	r3, r2
 800c482:	460a      	mov	r2, r1
 800c484:	4601      	mov	r1, r0
 800c486:	4803      	ldr	r0, [pc, #12]	; (800c494 <vsniprintf+0x18>)
 800c488:	6800      	ldr	r0, [r0, #0]
 800c48a:	f7ff ffcb 	bl	800c424 <_vsniprintf_r>
 800c48e:	b003      	add	sp, #12
 800c490:	f85d fb04 	ldr.w	pc, [sp], #4
 800c494:	200001f4 	.word	0x200001f4

0800c498 <_write_r>:
 800c498:	b538      	push	{r3, r4, r5, lr}
 800c49a:	4d07      	ldr	r5, [pc, #28]	; (800c4b8 <_write_r+0x20>)
 800c49c:	4604      	mov	r4, r0
 800c49e:	4608      	mov	r0, r1
 800c4a0:	4611      	mov	r1, r2
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	602a      	str	r2, [r5, #0]
 800c4a6:	461a      	mov	r2, r3
 800c4a8:	f7f8 fa59 	bl	800495e <_write>
 800c4ac:	1c43      	adds	r3, r0, #1
 800c4ae:	d102      	bne.n	800c4b6 <_write_r+0x1e>
 800c4b0:	682b      	ldr	r3, [r5, #0]
 800c4b2:	b103      	cbz	r3, 800c4b6 <_write_r+0x1e>
 800c4b4:	6023      	str	r3, [r4, #0]
 800c4b6:	bd38      	pop	{r3, r4, r5, pc}
 800c4b8:	20005698 	.word	0x20005698

0800c4bc <asctime>:
 800c4bc:	4b0d      	ldr	r3, [pc, #52]	; (800c4f4 <asctime+0x38>)
 800c4be:	b570      	push	{r4, r5, r6, lr}
 800c4c0:	681d      	ldr	r5, [r3, #0]
 800c4c2:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 800c4c4:	4604      	mov	r4, r0
 800c4c6:	b976      	cbnz	r6, 800c4e6 <asctime+0x2a>
 800c4c8:	201a      	movs	r0, #26
 800c4ca:	f7ff f9ef 	bl	800b8ac <malloc>
 800c4ce:	4602      	mov	r2, r0
 800c4d0:	6428      	str	r0, [r5, #64]	; 0x40
 800c4d2:	b920      	cbnz	r0, 800c4de <asctime+0x22>
 800c4d4:	4b08      	ldr	r3, [pc, #32]	; (800c4f8 <asctime+0x3c>)
 800c4d6:	4809      	ldr	r0, [pc, #36]	; (800c4fc <asctime+0x40>)
 800c4d8:	2137      	movs	r1, #55	; 0x37
 800c4da:	f000 f837 	bl	800c54c <__assert_func>
 800c4de:	221a      	movs	r2, #26
 800c4e0:	4631      	mov	r1, r6
 800c4e2:	f7ff fa1b 	bl	800b91c <memset>
 800c4e6:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800c4e8:	4620      	mov	r0, r4
 800c4ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c4ee:	f000 b807 	b.w	800c500 <asctime_r>
 800c4f2:	bf00      	nop
 800c4f4:	200001f4 	.word	0x200001f4
 800c4f8:	0800eda4 	.word	0x0800eda4
 800c4fc:	0800ef11 	.word	0x0800ef11

0800c500 <asctime_r>:
 800c500:	b510      	push	{r4, lr}
 800c502:	460c      	mov	r4, r1
 800c504:	6941      	ldr	r1, [r0, #20]
 800c506:	6903      	ldr	r3, [r0, #16]
 800c508:	6982      	ldr	r2, [r0, #24]
 800c50a:	b086      	sub	sp, #24
 800c50c:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 800c510:	9104      	str	r1, [sp, #16]
 800c512:	6801      	ldr	r1, [r0, #0]
 800c514:	9103      	str	r1, [sp, #12]
 800c516:	6841      	ldr	r1, [r0, #4]
 800c518:	9102      	str	r1, [sp, #8]
 800c51a:	6881      	ldr	r1, [r0, #8]
 800c51c:	9101      	str	r1, [sp, #4]
 800c51e:	68c1      	ldr	r1, [r0, #12]
 800c520:	9100      	str	r1, [sp, #0]
 800c522:	4907      	ldr	r1, [pc, #28]	; (800c540 <asctime_r+0x40>)
 800c524:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c528:	440b      	add	r3, r1
 800c52a:	4906      	ldr	r1, [pc, #24]	; (800c544 <asctime_r+0x44>)
 800c52c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800c530:	440a      	add	r2, r1
 800c532:	4620      	mov	r0, r4
 800c534:	4904      	ldr	r1, [pc, #16]	; (800c548 <asctime_r+0x48>)
 800c536:	f7ff fb9d 	bl	800bc74 <siprintf>
 800c53a:	4620      	mov	r0, r4
 800c53c:	b006      	add	sp, #24
 800c53e:	bd10      	pop	{r4, pc}
 800c540:	0800efa2 	.word	0x0800efa2
 800c544:	0800ef8d 	.word	0x0800ef8d
 800c548:	0800ef6d 	.word	0x0800ef6d

0800c54c <__assert_func>:
 800c54c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c54e:	4614      	mov	r4, r2
 800c550:	461a      	mov	r2, r3
 800c552:	4b09      	ldr	r3, [pc, #36]	; (800c578 <__assert_func+0x2c>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	4605      	mov	r5, r0
 800c558:	68d8      	ldr	r0, [r3, #12]
 800c55a:	b14c      	cbz	r4, 800c570 <__assert_func+0x24>
 800c55c:	4b07      	ldr	r3, [pc, #28]	; (800c57c <__assert_func+0x30>)
 800c55e:	9100      	str	r1, [sp, #0]
 800c560:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c564:	4906      	ldr	r1, [pc, #24]	; (800c580 <__assert_func+0x34>)
 800c566:	462b      	mov	r3, r5
 800c568:	f000 f8e0 	bl	800c72c <fiprintf>
 800c56c:	f000 ffdc 	bl	800d528 <abort>
 800c570:	4b04      	ldr	r3, [pc, #16]	; (800c584 <__assert_func+0x38>)
 800c572:	461c      	mov	r4, r3
 800c574:	e7f3      	b.n	800c55e <__assert_func+0x12>
 800c576:	bf00      	nop
 800c578:	200001f4 	.word	0x200001f4
 800c57c:	0800efc6 	.word	0x0800efc6
 800c580:	0800efd3 	.word	0x0800efd3
 800c584:	0800ef8c 	.word	0x0800ef8c

0800c588 <_close_r>:
 800c588:	b538      	push	{r3, r4, r5, lr}
 800c58a:	4d06      	ldr	r5, [pc, #24]	; (800c5a4 <_close_r+0x1c>)
 800c58c:	2300      	movs	r3, #0
 800c58e:	4604      	mov	r4, r0
 800c590:	4608      	mov	r0, r1
 800c592:	602b      	str	r3, [r5, #0]
 800c594:	f7f8 f9ff 	bl	8004996 <_close>
 800c598:	1c43      	adds	r3, r0, #1
 800c59a:	d102      	bne.n	800c5a2 <_close_r+0x1a>
 800c59c:	682b      	ldr	r3, [r5, #0]
 800c59e:	b103      	cbz	r3, 800c5a2 <_close_r+0x1a>
 800c5a0:	6023      	str	r3, [r4, #0]
 800c5a2:	bd38      	pop	{r3, r4, r5, pc}
 800c5a4:	20005698 	.word	0x20005698

0800c5a8 <__sflush_r>:
 800c5a8:	898a      	ldrh	r2, [r1, #12]
 800c5aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5ae:	4605      	mov	r5, r0
 800c5b0:	0710      	lsls	r0, r2, #28
 800c5b2:	460c      	mov	r4, r1
 800c5b4:	d458      	bmi.n	800c668 <__sflush_r+0xc0>
 800c5b6:	684b      	ldr	r3, [r1, #4]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	dc05      	bgt.n	800c5c8 <__sflush_r+0x20>
 800c5bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	dc02      	bgt.n	800c5c8 <__sflush_r+0x20>
 800c5c2:	2000      	movs	r0, #0
 800c5c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c5ca:	2e00      	cmp	r6, #0
 800c5cc:	d0f9      	beq.n	800c5c2 <__sflush_r+0x1a>
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c5d4:	682f      	ldr	r7, [r5, #0]
 800c5d6:	602b      	str	r3, [r5, #0]
 800c5d8:	d032      	beq.n	800c640 <__sflush_r+0x98>
 800c5da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c5dc:	89a3      	ldrh	r3, [r4, #12]
 800c5de:	075a      	lsls	r2, r3, #29
 800c5e0:	d505      	bpl.n	800c5ee <__sflush_r+0x46>
 800c5e2:	6863      	ldr	r3, [r4, #4]
 800c5e4:	1ac0      	subs	r0, r0, r3
 800c5e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c5e8:	b10b      	cbz	r3, 800c5ee <__sflush_r+0x46>
 800c5ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c5ec:	1ac0      	subs	r0, r0, r3
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	4602      	mov	r2, r0
 800c5f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c5f4:	6a21      	ldr	r1, [r4, #32]
 800c5f6:	4628      	mov	r0, r5
 800c5f8:	47b0      	blx	r6
 800c5fa:	1c43      	adds	r3, r0, #1
 800c5fc:	89a3      	ldrh	r3, [r4, #12]
 800c5fe:	d106      	bne.n	800c60e <__sflush_r+0x66>
 800c600:	6829      	ldr	r1, [r5, #0]
 800c602:	291d      	cmp	r1, #29
 800c604:	d82c      	bhi.n	800c660 <__sflush_r+0xb8>
 800c606:	4a2a      	ldr	r2, [pc, #168]	; (800c6b0 <__sflush_r+0x108>)
 800c608:	40ca      	lsrs	r2, r1
 800c60a:	07d6      	lsls	r6, r2, #31
 800c60c:	d528      	bpl.n	800c660 <__sflush_r+0xb8>
 800c60e:	2200      	movs	r2, #0
 800c610:	6062      	str	r2, [r4, #4]
 800c612:	04d9      	lsls	r1, r3, #19
 800c614:	6922      	ldr	r2, [r4, #16]
 800c616:	6022      	str	r2, [r4, #0]
 800c618:	d504      	bpl.n	800c624 <__sflush_r+0x7c>
 800c61a:	1c42      	adds	r2, r0, #1
 800c61c:	d101      	bne.n	800c622 <__sflush_r+0x7a>
 800c61e:	682b      	ldr	r3, [r5, #0]
 800c620:	b903      	cbnz	r3, 800c624 <__sflush_r+0x7c>
 800c622:	6560      	str	r0, [r4, #84]	; 0x54
 800c624:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c626:	602f      	str	r7, [r5, #0]
 800c628:	2900      	cmp	r1, #0
 800c62a:	d0ca      	beq.n	800c5c2 <__sflush_r+0x1a>
 800c62c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c630:	4299      	cmp	r1, r3
 800c632:	d002      	beq.n	800c63a <__sflush_r+0x92>
 800c634:	4628      	mov	r0, r5
 800c636:	f7ff f98f 	bl	800b958 <_free_r>
 800c63a:	2000      	movs	r0, #0
 800c63c:	6360      	str	r0, [r4, #52]	; 0x34
 800c63e:	e7c1      	b.n	800c5c4 <__sflush_r+0x1c>
 800c640:	6a21      	ldr	r1, [r4, #32]
 800c642:	2301      	movs	r3, #1
 800c644:	4628      	mov	r0, r5
 800c646:	47b0      	blx	r6
 800c648:	1c41      	adds	r1, r0, #1
 800c64a:	d1c7      	bne.n	800c5dc <__sflush_r+0x34>
 800c64c:	682b      	ldr	r3, [r5, #0]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d0c4      	beq.n	800c5dc <__sflush_r+0x34>
 800c652:	2b1d      	cmp	r3, #29
 800c654:	d001      	beq.n	800c65a <__sflush_r+0xb2>
 800c656:	2b16      	cmp	r3, #22
 800c658:	d101      	bne.n	800c65e <__sflush_r+0xb6>
 800c65a:	602f      	str	r7, [r5, #0]
 800c65c:	e7b1      	b.n	800c5c2 <__sflush_r+0x1a>
 800c65e:	89a3      	ldrh	r3, [r4, #12]
 800c660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c664:	81a3      	strh	r3, [r4, #12]
 800c666:	e7ad      	b.n	800c5c4 <__sflush_r+0x1c>
 800c668:	690f      	ldr	r7, [r1, #16]
 800c66a:	2f00      	cmp	r7, #0
 800c66c:	d0a9      	beq.n	800c5c2 <__sflush_r+0x1a>
 800c66e:	0793      	lsls	r3, r2, #30
 800c670:	680e      	ldr	r6, [r1, #0]
 800c672:	bf08      	it	eq
 800c674:	694b      	ldreq	r3, [r1, #20]
 800c676:	600f      	str	r7, [r1, #0]
 800c678:	bf18      	it	ne
 800c67a:	2300      	movne	r3, #0
 800c67c:	eba6 0807 	sub.w	r8, r6, r7
 800c680:	608b      	str	r3, [r1, #8]
 800c682:	f1b8 0f00 	cmp.w	r8, #0
 800c686:	dd9c      	ble.n	800c5c2 <__sflush_r+0x1a>
 800c688:	6a21      	ldr	r1, [r4, #32]
 800c68a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c68c:	4643      	mov	r3, r8
 800c68e:	463a      	mov	r2, r7
 800c690:	4628      	mov	r0, r5
 800c692:	47b0      	blx	r6
 800c694:	2800      	cmp	r0, #0
 800c696:	dc06      	bgt.n	800c6a6 <__sflush_r+0xfe>
 800c698:	89a3      	ldrh	r3, [r4, #12]
 800c69a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c69e:	81a3      	strh	r3, [r4, #12]
 800c6a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c6a4:	e78e      	b.n	800c5c4 <__sflush_r+0x1c>
 800c6a6:	4407      	add	r7, r0
 800c6a8:	eba8 0800 	sub.w	r8, r8, r0
 800c6ac:	e7e9      	b.n	800c682 <__sflush_r+0xda>
 800c6ae:	bf00      	nop
 800c6b0:	20400001 	.word	0x20400001

0800c6b4 <_fflush_r>:
 800c6b4:	b538      	push	{r3, r4, r5, lr}
 800c6b6:	690b      	ldr	r3, [r1, #16]
 800c6b8:	4605      	mov	r5, r0
 800c6ba:	460c      	mov	r4, r1
 800c6bc:	b913      	cbnz	r3, 800c6c4 <_fflush_r+0x10>
 800c6be:	2500      	movs	r5, #0
 800c6c0:	4628      	mov	r0, r5
 800c6c2:	bd38      	pop	{r3, r4, r5, pc}
 800c6c4:	b118      	cbz	r0, 800c6ce <_fflush_r+0x1a>
 800c6c6:	6983      	ldr	r3, [r0, #24]
 800c6c8:	b90b      	cbnz	r3, 800c6ce <_fflush_r+0x1a>
 800c6ca:	f7fe ff15 	bl	800b4f8 <__sinit>
 800c6ce:	4b14      	ldr	r3, [pc, #80]	; (800c720 <_fflush_r+0x6c>)
 800c6d0:	429c      	cmp	r4, r3
 800c6d2:	d11b      	bne.n	800c70c <_fflush_r+0x58>
 800c6d4:	686c      	ldr	r4, [r5, #4]
 800c6d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d0ef      	beq.n	800c6be <_fflush_r+0xa>
 800c6de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c6e0:	07d0      	lsls	r0, r2, #31
 800c6e2:	d404      	bmi.n	800c6ee <_fflush_r+0x3a>
 800c6e4:	0599      	lsls	r1, r3, #22
 800c6e6:	d402      	bmi.n	800c6ee <_fflush_r+0x3a>
 800c6e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c6ea:	f7ff f8db 	bl	800b8a4 <__retarget_lock_acquire_recursive>
 800c6ee:	4628      	mov	r0, r5
 800c6f0:	4621      	mov	r1, r4
 800c6f2:	f7ff ff59 	bl	800c5a8 <__sflush_r>
 800c6f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c6f8:	07da      	lsls	r2, r3, #31
 800c6fa:	4605      	mov	r5, r0
 800c6fc:	d4e0      	bmi.n	800c6c0 <_fflush_r+0xc>
 800c6fe:	89a3      	ldrh	r3, [r4, #12]
 800c700:	059b      	lsls	r3, r3, #22
 800c702:	d4dd      	bmi.n	800c6c0 <_fflush_r+0xc>
 800c704:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c706:	f7ff f8cf 	bl	800b8a8 <__retarget_lock_release_recursive>
 800c70a:	e7d9      	b.n	800c6c0 <_fflush_r+0xc>
 800c70c:	4b05      	ldr	r3, [pc, #20]	; (800c724 <_fflush_r+0x70>)
 800c70e:	429c      	cmp	r4, r3
 800c710:	d101      	bne.n	800c716 <_fflush_r+0x62>
 800c712:	68ac      	ldr	r4, [r5, #8]
 800c714:	e7df      	b.n	800c6d6 <_fflush_r+0x22>
 800c716:	4b04      	ldr	r3, [pc, #16]	; (800c728 <_fflush_r+0x74>)
 800c718:	429c      	cmp	r4, r3
 800c71a:	bf08      	it	eq
 800c71c:	68ec      	ldreq	r4, [r5, #12]
 800c71e:	e7da      	b.n	800c6d6 <_fflush_r+0x22>
 800c720:	0800ed60 	.word	0x0800ed60
 800c724:	0800ed80 	.word	0x0800ed80
 800c728:	0800ed40 	.word	0x0800ed40

0800c72c <fiprintf>:
 800c72c:	b40e      	push	{r1, r2, r3}
 800c72e:	b503      	push	{r0, r1, lr}
 800c730:	4601      	mov	r1, r0
 800c732:	ab03      	add	r3, sp, #12
 800c734:	4805      	ldr	r0, [pc, #20]	; (800c74c <fiprintf+0x20>)
 800c736:	f853 2b04 	ldr.w	r2, [r3], #4
 800c73a:	6800      	ldr	r0, [r0, #0]
 800c73c:	9301      	str	r3, [sp, #4]
 800c73e:	f000 fa9f 	bl	800cc80 <_vfiprintf_r>
 800c742:	b002      	add	sp, #8
 800c744:	f85d eb04 	ldr.w	lr, [sp], #4
 800c748:	b003      	add	sp, #12
 800c74a:	4770      	bx	lr
 800c74c:	200001f4 	.word	0x200001f4

0800c750 <_findenv_r>:
 800c750:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c754:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800c7c4 <_findenv_r+0x74>
 800c758:	4607      	mov	r7, r0
 800c75a:	4689      	mov	r9, r1
 800c75c:	4616      	mov	r6, r2
 800c75e:	f000 feeb 	bl	800d538 <__env_lock>
 800c762:	f8da 4000 	ldr.w	r4, [sl]
 800c766:	b134      	cbz	r4, 800c776 <_findenv_r+0x26>
 800c768:	464b      	mov	r3, r9
 800c76a:	4698      	mov	r8, r3
 800c76c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c770:	b13a      	cbz	r2, 800c782 <_findenv_r+0x32>
 800c772:	2a3d      	cmp	r2, #61	; 0x3d
 800c774:	d1f9      	bne.n	800c76a <_findenv_r+0x1a>
 800c776:	4638      	mov	r0, r7
 800c778:	f000 fee4 	bl	800d544 <__env_unlock>
 800c77c:	2000      	movs	r0, #0
 800c77e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c782:	eba8 0809 	sub.w	r8, r8, r9
 800c786:	46a3      	mov	fp, r4
 800c788:	f854 0b04 	ldr.w	r0, [r4], #4
 800c78c:	2800      	cmp	r0, #0
 800c78e:	d0f2      	beq.n	800c776 <_findenv_r+0x26>
 800c790:	4642      	mov	r2, r8
 800c792:	4649      	mov	r1, r9
 800c794:	f000 fd76 	bl	800d284 <strncmp>
 800c798:	2800      	cmp	r0, #0
 800c79a:	d1f4      	bne.n	800c786 <_findenv_r+0x36>
 800c79c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c7a0:	eb03 0508 	add.w	r5, r3, r8
 800c7a4:	f813 3008 	ldrb.w	r3, [r3, r8]
 800c7a8:	2b3d      	cmp	r3, #61	; 0x3d
 800c7aa:	d1ec      	bne.n	800c786 <_findenv_r+0x36>
 800c7ac:	f8da 3000 	ldr.w	r3, [sl]
 800c7b0:	ebab 0303 	sub.w	r3, fp, r3
 800c7b4:	109b      	asrs	r3, r3, #2
 800c7b6:	4638      	mov	r0, r7
 800c7b8:	6033      	str	r3, [r6, #0]
 800c7ba:	f000 fec3 	bl	800d544 <__env_unlock>
 800c7be:	1c68      	adds	r0, r5, #1
 800c7c0:	e7dd      	b.n	800c77e <_findenv_r+0x2e>
 800c7c2:	bf00      	nop
 800c7c4:	200001e4 	.word	0x200001e4

0800c7c8 <_getenv_r>:
 800c7c8:	b507      	push	{r0, r1, r2, lr}
 800c7ca:	aa01      	add	r2, sp, #4
 800c7cc:	f7ff ffc0 	bl	800c750 <_findenv_r>
 800c7d0:	b003      	add	sp, #12
 800c7d2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800c7d8 <__gettzinfo>:
 800c7d8:	4800      	ldr	r0, [pc, #0]	; (800c7dc <__gettzinfo+0x4>)
 800c7da:	4770      	bx	lr
 800c7dc:	20000260 	.word	0x20000260

0800c7e0 <gmtime_r>:
 800c7e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7e4:	e9d0 6700 	ldrd	r6, r7, [r0]
 800c7e8:	460c      	mov	r4, r1
 800c7ea:	4a4f      	ldr	r2, [pc, #316]	; (800c928 <gmtime_r+0x148>)
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	4630      	mov	r0, r6
 800c7f0:	4639      	mov	r1, r7
 800c7f2:	f7f3 fd7d 	bl	80002f0 <__aeabi_ldivmod>
 800c7f6:	4639      	mov	r1, r7
 800c7f8:	4605      	mov	r5, r0
 800c7fa:	4a4b      	ldr	r2, [pc, #300]	; (800c928 <gmtime_r+0x148>)
 800c7fc:	4630      	mov	r0, r6
 800c7fe:	2300      	movs	r3, #0
 800c800:	f7f3 fd76 	bl	80002f0 <__aeabi_ldivmod>
 800c804:	2a00      	cmp	r2, #0
 800c806:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800c80a:	bfb7      	itett	lt
 800c80c:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800c810:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 800c814:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 800c818:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800c81c:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800c820:	fbb2 f1f0 	udiv	r1, r2, r0
 800c824:	fb00 2211 	mls	r2, r0, r1, r2
 800c828:	203c      	movs	r0, #60	; 0x3c
 800c82a:	60a1      	str	r1, [r4, #8]
 800c82c:	fbb2 f1f0 	udiv	r1, r2, r0
 800c830:	fb00 2211 	mls	r2, r0, r1, r2
 800c834:	6061      	str	r1, [r4, #4]
 800c836:	6022      	str	r2, [r4, #0]
 800c838:	2107      	movs	r1, #7
 800c83a:	1cda      	adds	r2, r3, #3
 800c83c:	fb92 f1f1 	sdiv	r1, r2, r1
 800c840:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800c844:	1a52      	subs	r2, r2, r1
 800c846:	bf48      	it	mi
 800c848:	3207      	addmi	r2, #7
 800c84a:	4d38      	ldr	r5, [pc, #224]	; (800c92c <gmtime_r+0x14c>)
 800c84c:	4838      	ldr	r0, [pc, #224]	; (800c930 <gmtime_r+0x150>)
 800c84e:	61a2      	str	r2, [r4, #24]
 800c850:	2b00      	cmp	r3, #0
 800c852:	bfb7      	itett	lt
 800c854:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800c858:	fb93 f5f5 	sdivge	r5, r3, r5
 800c85c:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800c860:	fb92 f5f5 	sdivlt	r5, r2, r5
 800c864:	fb00 3005 	mla	r0, r0, r5, r3
 800c868:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800c86c:	fbb0 f2f2 	udiv	r2, r0, r2
 800c870:	4402      	add	r2, r0
 800c872:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800c876:	fbb0 f1f3 	udiv	r1, r0, r3
 800c87a:	1a52      	subs	r2, r2, r1
 800c87c:	f240 1c6d 	movw	ip, #365	; 0x16d
 800c880:	492c      	ldr	r1, [pc, #176]	; (800c934 <gmtime_r+0x154>)
 800c882:	fbb0 f1f1 	udiv	r1, r0, r1
 800c886:	2764      	movs	r7, #100	; 0x64
 800c888:	1a52      	subs	r2, r2, r1
 800c88a:	fbb2 f1fc 	udiv	r1, r2, ip
 800c88e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c892:	fbb1 f6f7 	udiv	r6, r1, r7
 800c896:	1af3      	subs	r3, r6, r3
 800c898:	4403      	add	r3, r0
 800c89a:	fb0c 3311 	mls	r3, ip, r1, r3
 800c89e:	2299      	movs	r2, #153	; 0x99
 800c8a0:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800c8a4:	f10e 0e02 	add.w	lr, lr, #2
 800c8a8:	f103 0c01 	add.w	ip, r3, #1
 800c8ac:	fbbe f0f2 	udiv	r0, lr, r2
 800c8b0:	4342      	muls	r2, r0
 800c8b2:	3202      	adds	r2, #2
 800c8b4:	f04f 0805 	mov.w	r8, #5
 800c8b8:	fbb2 f2f8 	udiv	r2, r2, r8
 800c8bc:	ebac 0c02 	sub.w	ip, ip, r2
 800c8c0:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800c8c4:	4596      	cmp	lr, r2
 800c8c6:	bf94      	ite	ls
 800c8c8:	2202      	movls	r2, #2
 800c8ca:	f06f 0209 	mvnhi.w	r2, #9
 800c8ce:	4410      	add	r0, r2
 800c8d0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c8d4:	fb02 1505 	mla	r5, r2, r5, r1
 800c8d8:	2801      	cmp	r0, #1
 800c8da:	bf98      	it	ls
 800c8dc:	3501      	addls	r5, #1
 800c8de:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800c8e2:	d30d      	bcc.n	800c900 <gmtime_r+0x120>
 800c8e4:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800c8e8:	61e3      	str	r3, [r4, #28]
 800c8ea:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800c8f4:	f8c4 c00c 	str.w	ip, [r4, #12]
 800c8f8:	6223      	str	r3, [r4, #32]
 800c8fa:	4620      	mov	r0, r4
 800c8fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c900:	078a      	lsls	r2, r1, #30
 800c902:	d102      	bne.n	800c90a <gmtime_r+0x12a>
 800c904:	fb07 1616 	mls	r6, r7, r6, r1
 800c908:	b95e      	cbnz	r6, 800c922 <gmtime_r+0x142>
 800c90a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c90e:	fbb1 f6f2 	udiv	r6, r1, r2
 800c912:	fb02 1216 	mls	r2, r2, r6, r1
 800c916:	fab2 f282 	clz	r2, r2
 800c91a:	0952      	lsrs	r2, r2, #5
 800c91c:	333b      	adds	r3, #59	; 0x3b
 800c91e:	4413      	add	r3, r2
 800c920:	e7e2      	b.n	800c8e8 <gmtime_r+0x108>
 800c922:	2201      	movs	r2, #1
 800c924:	e7fa      	b.n	800c91c <gmtime_r+0x13c>
 800c926:	bf00      	nop
 800c928:	00015180 	.word	0x00015180
 800c92c:	00023ab1 	.word	0x00023ab1
 800c930:	fffdc54f 	.word	0xfffdc54f
 800c934:	00023ab0 	.word	0x00023ab0

0800c938 <_lseek_r>:
 800c938:	b538      	push	{r3, r4, r5, lr}
 800c93a:	4d07      	ldr	r5, [pc, #28]	; (800c958 <_lseek_r+0x20>)
 800c93c:	4604      	mov	r4, r0
 800c93e:	4608      	mov	r0, r1
 800c940:	4611      	mov	r1, r2
 800c942:	2200      	movs	r2, #0
 800c944:	602a      	str	r2, [r5, #0]
 800c946:	461a      	mov	r2, r3
 800c948:	f7f8 f84c 	bl	80049e4 <_lseek>
 800c94c:	1c43      	adds	r3, r0, #1
 800c94e:	d102      	bne.n	800c956 <_lseek_r+0x1e>
 800c950:	682b      	ldr	r3, [r5, #0]
 800c952:	b103      	cbz	r3, 800c956 <_lseek_r+0x1e>
 800c954:	6023      	str	r3, [r4, #0]
 800c956:	bd38      	pop	{r3, r4, r5, pc}
 800c958:	20005698 	.word	0x20005698

0800c95c <__malloc_lock>:
 800c95c:	4801      	ldr	r0, [pc, #4]	; (800c964 <__malloc_lock+0x8>)
 800c95e:	f7fe bfa1 	b.w	800b8a4 <__retarget_lock_acquire_recursive>
 800c962:	bf00      	nop
 800c964:	20005689 	.word	0x20005689

0800c968 <__malloc_unlock>:
 800c968:	4801      	ldr	r0, [pc, #4]	; (800c970 <__malloc_unlock+0x8>)
 800c96a:	f7fe bf9d 	b.w	800b8a8 <__retarget_lock_release_recursive>
 800c96e:	bf00      	nop
 800c970:	20005689 	.word	0x20005689

0800c974 <__ssputs_r>:
 800c974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c978:	688e      	ldr	r6, [r1, #8]
 800c97a:	429e      	cmp	r6, r3
 800c97c:	4682      	mov	sl, r0
 800c97e:	460c      	mov	r4, r1
 800c980:	4690      	mov	r8, r2
 800c982:	461f      	mov	r7, r3
 800c984:	d838      	bhi.n	800c9f8 <__ssputs_r+0x84>
 800c986:	898a      	ldrh	r2, [r1, #12]
 800c988:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c98c:	d032      	beq.n	800c9f4 <__ssputs_r+0x80>
 800c98e:	6825      	ldr	r5, [r4, #0]
 800c990:	6909      	ldr	r1, [r1, #16]
 800c992:	eba5 0901 	sub.w	r9, r5, r1
 800c996:	6965      	ldr	r5, [r4, #20]
 800c998:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c99c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c9a0:	3301      	adds	r3, #1
 800c9a2:	444b      	add	r3, r9
 800c9a4:	106d      	asrs	r5, r5, #1
 800c9a6:	429d      	cmp	r5, r3
 800c9a8:	bf38      	it	cc
 800c9aa:	461d      	movcc	r5, r3
 800c9ac:	0553      	lsls	r3, r2, #21
 800c9ae:	d531      	bpl.n	800ca14 <__ssputs_r+0xa0>
 800c9b0:	4629      	mov	r1, r5
 800c9b2:	f7ff f83d 	bl	800ba30 <_malloc_r>
 800c9b6:	4606      	mov	r6, r0
 800c9b8:	b950      	cbnz	r0, 800c9d0 <__ssputs_r+0x5c>
 800c9ba:	230c      	movs	r3, #12
 800c9bc:	f8ca 3000 	str.w	r3, [sl]
 800c9c0:	89a3      	ldrh	r3, [r4, #12]
 800c9c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9c6:	81a3      	strh	r3, [r4, #12]
 800c9c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c9cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9d0:	6921      	ldr	r1, [r4, #16]
 800c9d2:	464a      	mov	r2, r9
 800c9d4:	f7fe ff7a 	bl	800b8cc <memcpy>
 800c9d8:	89a3      	ldrh	r3, [r4, #12]
 800c9da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c9de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9e2:	81a3      	strh	r3, [r4, #12]
 800c9e4:	6126      	str	r6, [r4, #16]
 800c9e6:	6165      	str	r5, [r4, #20]
 800c9e8:	444e      	add	r6, r9
 800c9ea:	eba5 0509 	sub.w	r5, r5, r9
 800c9ee:	6026      	str	r6, [r4, #0]
 800c9f0:	60a5      	str	r5, [r4, #8]
 800c9f2:	463e      	mov	r6, r7
 800c9f4:	42be      	cmp	r6, r7
 800c9f6:	d900      	bls.n	800c9fa <__ssputs_r+0x86>
 800c9f8:	463e      	mov	r6, r7
 800c9fa:	6820      	ldr	r0, [r4, #0]
 800c9fc:	4632      	mov	r2, r6
 800c9fe:	4641      	mov	r1, r8
 800ca00:	f7fe ff72 	bl	800b8e8 <memmove>
 800ca04:	68a3      	ldr	r3, [r4, #8]
 800ca06:	1b9b      	subs	r3, r3, r6
 800ca08:	60a3      	str	r3, [r4, #8]
 800ca0a:	6823      	ldr	r3, [r4, #0]
 800ca0c:	4433      	add	r3, r6
 800ca0e:	6023      	str	r3, [r4, #0]
 800ca10:	2000      	movs	r0, #0
 800ca12:	e7db      	b.n	800c9cc <__ssputs_r+0x58>
 800ca14:	462a      	mov	r2, r5
 800ca16:	f000 fe01 	bl	800d61c <_realloc_r>
 800ca1a:	4606      	mov	r6, r0
 800ca1c:	2800      	cmp	r0, #0
 800ca1e:	d1e1      	bne.n	800c9e4 <__ssputs_r+0x70>
 800ca20:	6921      	ldr	r1, [r4, #16]
 800ca22:	4650      	mov	r0, sl
 800ca24:	f7fe ff98 	bl	800b958 <_free_r>
 800ca28:	e7c7      	b.n	800c9ba <__ssputs_r+0x46>
	...

0800ca2c <_svfiprintf_r>:
 800ca2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca30:	4698      	mov	r8, r3
 800ca32:	898b      	ldrh	r3, [r1, #12]
 800ca34:	061b      	lsls	r3, r3, #24
 800ca36:	b09d      	sub	sp, #116	; 0x74
 800ca38:	4607      	mov	r7, r0
 800ca3a:	460d      	mov	r5, r1
 800ca3c:	4614      	mov	r4, r2
 800ca3e:	d50e      	bpl.n	800ca5e <_svfiprintf_r+0x32>
 800ca40:	690b      	ldr	r3, [r1, #16]
 800ca42:	b963      	cbnz	r3, 800ca5e <_svfiprintf_r+0x32>
 800ca44:	2140      	movs	r1, #64	; 0x40
 800ca46:	f7fe fff3 	bl	800ba30 <_malloc_r>
 800ca4a:	6028      	str	r0, [r5, #0]
 800ca4c:	6128      	str	r0, [r5, #16]
 800ca4e:	b920      	cbnz	r0, 800ca5a <_svfiprintf_r+0x2e>
 800ca50:	230c      	movs	r3, #12
 800ca52:	603b      	str	r3, [r7, #0]
 800ca54:	f04f 30ff 	mov.w	r0, #4294967295
 800ca58:	e0d1      	b.n	800cbfe <_svfiprintf_r+0x1d2>
 800ca5a:	2340      	movs	r3, #64	; 0x40
 800ca5c:	616b      	str	r3, [r5, #20]
 800ca5e:	2300      	movs	r3, #0
 800ca60:	9309      	str	r3, [sp, #36]	; 0x24
 800ca62:	2320      	movs	r3, #32
 800ca64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca68:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca6c:	2330      	movs	r3, #48	; 0x30
 800ca6e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cc18 <_svfiprintf_r+0x1ec>
 800ca72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca76:	f04f 0901 	mov.w	r9, #1
 800ca7a:	4623      	mov	r3, r4
 800ca7c:	469a      	mov	sl, r3
 800ca7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca82:	b10a      	cbz	r2, 800ca88 <_svfiprintf_r+0x5c>
 800ca84:	2a25      	cmp	r2, #37	; 0x25
 800ca86:	d1f9      	bne.n	800ca7c <_svfiprintf_r+0x50>
 800ca88:	ebba 0b04 	subs.w	fp, sl, r4
 800ca8c:	d00b      	beq.n	800caa6 <_svfiprintf_r+0x7a>
 800ca8e:	465b      	mov	r3, fp
 800ca90:	4622      	mov	r2, r4
 800ca92:	4629      	mov	r1, r5
 800ca94:	4638      	mov	r0, r7
 800ca96:	f7ff ff6d 	bl	800c974 <__ssputs_r>
 800ca9a:	3001      	adds	r0, #1
 800ca9c:	f000 80aa 	beq.w	800cbf4 <_svfiprintf_r+0x1c8>
 800caa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800caa2:	445a      	add	r2, fp
 800caa4:	9209      	str	r2, [sp, #36]	; 0x24
 800caa6:	f89a 3000 	ldrb.w	r3, [sl]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	f000 80a2 	beq.w	800cbf4 <_svfiprintf_r+0x1c8>
 800cab0:	2300      	movs	r3, #0
 800cab2:	f04f 32ff 	mov.w	r2, #4294967295
 800cab6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800caba:	f10a 0a01 	add.w	sl, sl, #1
 800cabe:	9304      	str	r3, [sp, #16]
 800cac0:	9307      	str	r3, [sp, #28]
 800cac2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cac6:	931a      	str	r3, [sp, #104]	; 0x68
 800cac8:	4654      	mov	r4, sl
 800caca:	2205      	movs	r2, #5
 800cacc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cad0:	4851      	ldr	r0, [pc, #324]	; (800cc18 <_svfiprintf_r+0x1ec>)
 800cad2:	f7f3 fbbd 	bl	8000250 <memchr>
 800cad6:	9a04      	ldr	r2, [sp, #16]
 800cad8:	b9d8      	cbnz	r0, 800cb12 <_svfiprintf_r+0xe6>
 800cada:	06d0      	lsls	r0, r2, #27
 800cadc:	bf44      	itt	mi
 800cade:	2320      	movmi	r3, #32
 800cae0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cae4:	0711      	lsls	r1, r2, #28
 800cae6:	bf44      	itt	mi
 800cae8:	232b      	movmi	r3, #43	; 0x2b
 800caea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800caee:	f89a 3000 	ldrb.w	r3, [sl]
 800caf2:	2b2a      	cmp	r3, #42	; 0x2a
 800caf4:	d015      	beq.n	800cb22 <_svfiprintf_r+0xf6>
 800caf6:	9a07      	ldr	r2, [sp, #28]
 800caf8:	4654      	mov	r4, sl
 800cafa:	2000      	movs	r0, #0
 800cafc:	f04f 0c0a 	mov.w	ip, #10
 800cb00:	4621      	mov	r1, r4
 800cb02:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb06:	3b30      	subs	r3, #48	; 0x30
 800cb08:	2b09      	cmp	r3, #9
 800cb0a:	d94e      	bls.n	800cbaa <_svfiprintf_r+0x17e>
 800cb0c:	b1b0      	cbz	r0, 800cb3c <_svfiprintf_r+0x110>
 800cb0e:	9207      	str	r2, [sp, #28]
 800cb10:	e014      	b.n	800cb3c <_svfiprintf_r+0x110>
 800cb12:	eba0 0308 	sub.w	r3, r0, r8
 800cb16:	fa09 f303 	lsl.w	r3, r9, r3
 800cb1a:	4313      	orrs	r3, r2
 800cb1c:	9304      	str	r3, [sp, #16]
 800cb1e:	46a2      	mov	sl, r4
 800cb20:	e7d2      	b.n	800cac8 <_svfiprintf_r+0x9c>
 800cb22:	9b03      	ldr	r3, [sp, #12]
 800cb24:	1d19      	adds	r1, r3, #4
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	9103      	str	r1, [sp, #12]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	bfbb      	ittet	lt
 800cb2e:	425b      	neglt	r3, r3
 800cb30:	f042 0202 	orrlt.w	r2, r2, #2
 800cb34:	9307      	strge	r3, [sp, #28]
 800cb36:	9307      	strlt	r3, [sp, #28]
 800cb38:	bfb8      	it	lt
 800cb3a:	9204      	strlt	r2, [sp, #16]
 800cb3c:	7823      	ldrb	r3, [r4, #0]
 800cb3e:	2b2e      	cmp	r3, #46	; 0x2e
 800cb40:	d10c      	bne.n	800cb5c <_svfiprintf_r+0x130>
 800cb42:	7863      	ldrb	r3, [r4, #1]
 800cb44:	2b2a      	cmp	r3, #42	; 0x2a
 800cb46:	d135      	bne.n	800cbb4 <_svfiprintf_r+0x188>
 800cb48:	9b03      	ldr	r3, [sp, #12]
 800cb4a:	1d1a      	adds	r2, r3, #4
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	9203      	str	r2, [sp, #12]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	bfb8      	it	lt
 800cb54:	f04f 33ff 	movlt.w	r3, #4294967295
 800cb58:	3402      	adds	r4, #2
 800cb5a:	9305      	str	r3, [sp, #20]
 800cb5c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cc28 <_svfiprintf_r+0x1fc>
 800cb60:	7821      	ldrb	r1, [r4, #0]
 800cb62:	2203      	movs	r2, #3
 800cb64:	4650      	mov	r0, sl
 800cb66:	f7f3 fb73 	bl	8000250 <memchr>
 800cb6a:	b140      	cbz	r0, 800cb7e <_svfiprintf_r+0x152>
 800cb6c:	2340      	movs	r3, #64	; 0x40
 800cb6e:	eba0 000a 	sub.w	r0, r0, sl
 800cb72:	fa03 f000 	lsl.w	r0, r3, r0
 800cb76:	9b04      	ldr	r3, [sp, #16]
 800cb78:	4303      	orrs	r3, r0
 800cb7a:	3401      	adds	r4, #1
 800cb7c:	9304      	str	r3, [sp, #16]
 800cb7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb82:	4826      	ldr	r0, [pc, #152]	; (800cc1c <_svfiprintf_r+0x1f0>)
 800cb84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cb88:	2206      	movs	r2, #6
 800cb8a:	f7f3 fb61 	bl	8000250 <memchr>
 800cb8e:	2800      	cmp	r0, #0
 800cb90:	d038      	beq.n	800cc04 <_svfiprintf_r+0x1d8>
 800cb92:	4b23      	ldr	r3, [pc, #140]	; (800cc20 <_svfiprintf_r+0x1f4>)
 800cb94:	bb1b      	cbnz	r3, 800cbde <_svfiprintf_r+0x1b2>
 800cb96:	9b03      	ldr	r3, [sp, #12]
 800cb98:	3307      	adds	r3, #7
 800cb9a:	f023 0307 	bic.w	r3, r3, #7
 800cb9e:	3308      	adds	r3, #8
 800cba0:	9303      	str	r3, [sp, #12]
 800cba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cba4:	4433      	add	r3, r6
 800cba6:	9309      	str	r3, [sp, #36]	; 0x24
 800cba8:	e767      	b.n	800ca7a <_svfiprintf_r+0x4e>
 800cbaa:	fb0c 3202 	mla	r2, ip, r2, r3
 800cbae:	460c      	mov	r4, r1
 800cbb0:	2001      	movs	r0, #1
 800cbb2:	e7a5      	b.n	800cb00 <_svfiprintf_r+0xd4>
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	3401      	adds	r4, #1
 800cbb8:	9305      	str	r3, [sp, #20]
 800cbba:	4619      	mov	r1, r3
 800cbbc:	f04f 0c0a 	mov.w	ip, #10
 800cbc0:	4620      	mov	r0, r4
 800cbc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbc6:	3a30      	subs	r2, #48	; 0x30
 800cbc8:	2a09      	cmp	r2, #9
 800cbca:	d903      	bls.n	800cbd4 <_svfiprintf_r+0x1a8>
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d0c5      	beq.n	800cb5c <_svfiprintf_r+0x130>
 800cbd0:	9105      	str	r1, [sp, #20]
 800cbd2:	e7c3      	b.n	800cb5c <_svfiprintf_r+0x130>
 800cbd4:	fb0c 2101 	mla	r1, ip, r1, r2
 800cbd8:	4604      	mov	r4, r0
 800cbda:	2301      	movs	r3, #1
 800cbdc:	e7f0      	b.n	800cbc0 <_svfiprintf_r+0x194>
 800cbde:	ab03      	add	r3, sp, #12
 800cbe0:	9300      	str	r3, [sp, #0]
 800cbe2:	462a      	mov	r2, r5
 800cbe4:	4b0f      	ldr	r3, [pc, #60]	; (800cc24 <_svfiprintf_r+0x1f8>)
 800cbe6:	a904      	add	r1, sp, #16
 800cbe8:	4638      	mov	r0, r7
 800cbea:	f3af 8000 	nop.w
 800cbee:	1c42      	adds	r2, r0, #1
 800cbf0:	4606      	mov	r6, r0
 800cbf2:	d1d6      	bne.n	800cba2 <_svfiprintf_r+0x176>
 800cbf4:	89ab      	ldrh	r3, [r5, #12]
 800cbf6:	065b      	lsls	r3, r3, #25
 800cbf8:	f53f af2c 	bmi.w	800ca54 <_svfiprintf_r+0x28>
 800cbfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cbfe:	b01d      	add	sp, #116	; 0x74
 800cc00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc04:	ab03      	add	r3, sp, #12
 800cc06:	9300      	str	r3, [sp, #0]
 800cc08:	462a      	mov	r2, r5
 800cc0a:	4b06      	ldr	r3, [pc, #24]	; (800cc24 <_svfiprintf_r+0x1f8>)
 800cc0c:	a904      	add	r1, sp, #16
 800cc0e:	4638      	mov	r0, r7
 800cc10:	f000 f9d4 	bl	800cfbc <_printf_i>
 800cc14:	e7eb      	b.n	800cbee <_svfiprintf_r+0x1c2>
 800cc16:	bf00      	nop
 800cc18:	0800f103 	.word	0x0800f103
 800cc1c:	0800f10d 	.word	0x0800f10d
 800cc20:	00000000 	.word	0x00000000
 800cc24:	0800c975 	.word	0x0800c975
 800cc28:	0800f109 	.word	0x0800f109

0800cc2c <__sfputc_r>:
 800cc2c:	6893      	ldr	r3, [r2, #8]
 800cc2e:	3b01      	subs	r3, #1
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	b410      	push	{r4}
 800cc34:	6093      	str	r3, [r2, #8]
 800cc36:	da08      	bge.n	800cc4a <__sfputc_r+0x1e>
 800cc38:	6994      	ldr	r4, [r2, #24]
 800cc3a:	42a3      	cmp	r3, r4
 800cc3c:	db01      	blt.n	800cc42 <__sfputc_r+0x16>
 800cc3e:	290a      	cmp	r1, #10
 800cc40:	d103      	bne.n	800cc4a <__sfputc_r+0x1e>
 800cc42:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc46:	f000 bbaf 	b.w	800d3a8 <__swbuf_r>
 800cc4a:	6813      	ldr	r3, [r2, #0]
 800cc4c:	1c58      	adds	r0, r3, #1
 800cc4e:	6010      	str	r0, [r2, #0]
 800cc50:	7019      	strb	r1, [r3, #0]
 800cc52:	4608      	mov	r0, r1
 800cc54:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc58:	4770      	bx	lr

0800cc5a <__sfputs_r>:
 800cc5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc5c:	4606      	mov	r6, r0
 800cc5e:	460f      	mov	r7, r1
 800cc60:	4614      	mov	r4, r2
 800cc62:	18d5      	adds	r5, r2, r3
 800cc64:	42ac      	cmp	r4, r5
 800cc66:	d101      	bne.n	800cc6c <__sfputs_r+0x12>
 800cc68:	2000      	movs	r0, #0
 800cc6a:	e007      	b.n	800cc7c <__sfputs_r+0x22>
 800cc6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc70:	463a      	mov	r2, r7
 800cc72:	4630      	mov	r0, r6
 800cc74:	f7ff ffda 	bl	800cc2c <__sfputc_r>
 800cc78:	1c43      	adds	r3, r0, #1
 800cc7a:	d1f3      	bne.n	800cc64 <__sfputs_r+0xa>
 800cc7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cc80 <_vfiprintf_r>:
 800cc80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc84:	460d      	mov	r5, r1
 800cc86:	b09d      	sub	sp, #116	; 0x74
 800cc88:	4614      	mov	r4, r2
 800cc8a:	4698      	mov	r8, r3
 800cc8c:	4606      	mov	r6, r0
 800cc8e:	b118      	cbz	r0, 800cc98 <_vfiprintf_r+0x18>
 800cc90:	6983      	ldr	r3, [r0, #24]
 800cc92:	b90b      	cbnz	r3, 800cc98 <_vfiprintf_r+0x18>
 800cc94:	f7fe fc30 	bl	800b4f8 <__sinit>
 800cc98:	4b89      	ldr	r3, [pc, #548]	; (800cec0 <_vfiprintf_r+0x240>)
 800cc9a:	429d      	cmp	r5, r3
 800cc9c:	d11b      	bne.n	800ccd6 <_vfiprintf_r+0x56>
 800cc9e:	6875      	ldr	r5, [r6, #4]
 800cca0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cca2:	07d9      	lsls	r1, r3, #31
 800cca4:	d405      	bmi.n	800ccb2 <_vfiprintf_r+0x32>
 800cca6:	89ab      	ldrh	r3, [r5, #12]
 800cca8:	059a      	lsls	r2, r3, #22
 800ccaa:	d402      	bmi.n	800ccb2 <_vfiprintf_r+0x32>
 800ccac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ccae:	f7fe fdf9 	bl	800b8a4 <__retarget_lock_acquire_recursive>
 800ccb2:	89ab      	ldrh	r3, [r5, #12]
 800ccb4:	071b      	lsls	r3, r3, #28
 800ccb6:	d501      	bpl.n	800ccbc <_vfiprintf_r+0x3c>
 800ccb8:	692b      	ldr	r3, [r5, #16]
 800ccba:	b9eb      	cbnz	r3, 800ccf8 <_vfiprintf_r+0x78>
 800ccbc:	4629      	mov	r1, r5
 800ccbe:	4630      	mov	r0, r6
 800ccc0:	f000 fbc4 	bl	800d44c <__swsetup_r>
 800ccc4:	b1c0      	cbz	r0, 800ccf8 <_vfiprintf_r+0x78>
 800ccc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ccc8:	07dc      	lsls	r4, r3, #31
 800ccca:	d50e      	bpl.n	800ccea <_vfiprintf_r+0x6a>
 800cccc:	f04f 30ff 	mov.w	r0, #4294967295
 800ccd0:	b01d      	add	sp, #116	; 0x74
 800ccd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccd6:	4b7b      	ldr	r3, [pc, #492]	; (800cec4 <_vfiprintf_r+0x244>)
 800ccd8:	429d      	cmp	r5, r3
 800ccda:	d101      	bne.n	800cce0 <_vfiprintf_r+0x60>
 800ccdc:	68b5      	ldr	r5, [r6, #8]
 800ccde:	e7df      	b.n	800cca0 <_vfiprintf_r+0x20>
 800cce0:	4b79      	ldr	r3, [pc, #484]	; (800cec8 <_vfiprintf_r+0x248>)
 800cce2:	429d      	cmp	r5, r3
 800cce4:	bf08      	it	eq
 800cce6:	68f5      	ldreq	r5, [r6, #12]
 800cce8:	e7da      	b.n	800cca0 <_vfiprintf_r+0x20>
 800ccea:	89ab      	ldrh	r3, [r5, #12]
 800ccec:	0598      	lsls	r0, r3, #22
 800ccee:	d4ed      	bmi.n	800cccc <_vfiprintf_r+0x4c>
 800ccf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ccf2:	f7fe fdd9 	bl	800b8a8 <__retarget_lock_release_recursive>
 800ccf6:	e7e9      	b.n	800cccc <_vfiprintf_r+0x4c>
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	9309      	str	r3, [sp, #36]	; 0x24
 800ccfc:	2320      	movs	r3, #32
 800ccfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd02:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd06:	2330      	movs	r3, #48	; 0x30
 800cd08:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cecc <_vfiprintf_r+0x24c>
 800cd0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd10:	f04f 0901 	mov.w	r9, #1
 800cd14:	4623      	mov	r3, r4
 800cd16:	469a      	mov	sl, r3
 800cd18:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd1c:	b10a      	cbz	r2, 800cd22 <_vfiprintf_r+0xa2>
 800cd1e:	2a25      	cmp	r2, #37	; 0x25
 800cd20:	d1f9      	bne.n	800cd16 <_vfiprintf_r+0x96>
 800cd22:	ebba 0b04 	subs.w	fp, sl, r4
 800cd26:	d00b      	beq.n	800cd40 <_vfiprintf_r+0xc0>
 800cd28:	465b      	mov	r3, fp
 800cd2a:	4622      	mov	r2, r4
 800cd2c:	4629      	mov	r1, r5
 800cd2e:	4630      	mov	r0, r6
 800cd30:	f7ff ff93 	bl	800cc5a <__sfputs_r>
 800cd34:	3001      	adds	r0, #1
 800cd36:	f000 80aa 	beq.w	800ce8e <_vfiprintf_r+0x20e>
 800cd3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd3c:	445a      	add	r2, fp
 800cd3e:	9209      	str	r2, [sp, #36]	; 0x24
 800cd40:	f89a 3000 	ldrb.w	r3, [sl]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	f000 80a2 	beq.w	800ce8e <_vfiprintf_r+0x20e>
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	f04f 32ff 	mov.w	r2, #4294967295
 800cd50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd54:	f10a 0a01 	add.w	sl, sl, #1
 800cd58:	9304      	str	r3, [sp, #16]
 800cd5a:	9307      	str	r3, [sp, #28]
 800cd5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd60:	931a      	str	r3, [sp, #104]	; 0x68
 800cd62:	4654      	mov	r4, sl
 800cd64:	2205      	movs	r2, #5
 800cd66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd6a:	4858      	ldr	r0, [pc, #352]	; (800cecc <_vfiprintf_r+0x24c>)
 800cd6c:	f7f3 fa70 	bl	8000250 <memchr>
 800cd70:	9a04      	ldr	r2, [sp, #16]
 800cd72:	b9d8      	cbnz	r0, 800cdac <_vfiprintf_r+0x12c>
 800cd74:	06d1      	lsls	r1, r2, #27
 800cd76:	bf44      	itt	mi
 800cd78:	2320      	movmi	r3, #32
 800cd7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd7e:	0713      	lsls	r3, r2, #28
 800cd80:	bf44      	itt	mi
 800cd82:	232b      	movmi	r3, #43	; 0x2b
 800cd84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd88:	f89a 3000 	ldrb.w	r3, [sl]
 800cd8c:	2b2a      	cmp	r3, #42	; 0x2a
 800cd8e:	d015      	beq.n	800cdbc <_vfiprintf_r+0x13c>
 800cd90:	9a07      	ldr	r2, [sp, #28]
 800cd92:	4654      	mov	r4, sl
 800cd94:	2000      	movs	r0, #0
 800cd96:	f04f 0c0a 	mov.w	ip, #10
 800cd9a:	4621      	mov	r1, r4
 800cd9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cda0:	3b30      	subs	r3, #48	; 0x30
 800cda2:	2b09      	cmp	r3, #9
 800cda4:	d94e      	bls.n	800ce44 <_vfiprintf_r+0x1c4>
 800cda6:	b1b0      	cbz	r0, 800cdd6 <_vfiprintf_r+0x156>
 800cda8:	9207      	str	r2, [sp, #28]
 800cdaa:	e014      	b.n	800cdd6 <_vfiprintf_r+0x156>
 800cdac:	eba0 0308 	sub.w	r3, r0, r8
 800cdb0:	fa09 f303 	lsl.w	r3, r9, r3
 800cdb4:	4313      	orrs	r3, r2
 800cdb6:	9304      	str	r3, [sp, #16]
 800cdb8:	46a2      	mov	sl, r4
 800cdba:	e7d2      	b.n	800cd62 <_vfiprintf_r+0xe2>
 800cdbc:	9b03      	ldr	r3, [sp, #12]
 800cdbe:	1d19      	adds	r1, r3, #4
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	9103      	str	r1, [sp, #12]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	bfbb      	ittet	lt
 800cdc8:	425b      	neglt	r3, r3
 800cdca:	f042 0202 	orrlt.w	r2, r2, #2
 800cdce:	9307      	strge	r3, [sp, #28]
 800cdd0:	9307      	strlt	r3, [sp, #28]
 800cdd2:	bfb8      	it	lt
 800cdd4:	9204      	strlt	r2, [sp, #16]
 800cdd6:	7823      	ldrb	r3, [r4, #0]
 800cdd8:	2b2e      	cmp	r3, #46	; 0x2e
 800cdda:	d10c      	bne.n	800cdf6 <_vfiprintf_r+0x176>
 800cddc:	7863      	ldrb	r3, [r4, #1]
 800cdde:	2b2a      	cmp	r3, #42	; 0x2a
 800cde0:	d135      	bne.n	800ce4e <_vfiprintf_r+0x1ce>
 800cde2:	9b03      	ldr	r3, [sp, #12]
 800cde4:	1d1a      	adds	r2, r3, #4
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	9203      	str	r2, [sp, #12]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	bfb8      	it	lt
 800cdee:	f04f 33ff 	movlt.w	r3, #4294967295
 800cdf2:	3402      	adds	r4, #2
 800cdf4:	9305      	str	r3, [sp, #20]
 800cdf6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cedc <_vfiprintf_r+0x25c>
 800cdfa:	7821      	ldrb	r1, [r4, #0]
 800cdfc:	2203      	movs	r2, #3
 800cdfe:	4650      	mov	r0, sl
 800ce00:	f7f3 fa26 	bl	8000250 <memchr>
 800ce04:	b140      	cbz	r0, 800ce18 <_vfiprintf_r+0x198>
 800ce06:	2340      	movs	r3, #64	; 0x40
 800ce08:	eba0 000a 	sub.w	r0, r0, sl
 800ce0c:	fa03 f000 	lsl.w	r0, r3, r0
 800ce10:	9b04      	ldr	r3, [sp, #16]
 800ce12:	4303      	orrs	r3, r0
 800ce14:	3401      	adds	r4, #1
 800ce16:	9304      	str	r3, [sp, #16]
 800ce18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce1c:	482c      	ldr	r0, [pc, #176]	; (800ced0 <_vfiprintf_r+0x250>)
 800ce1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce22:	2206      	movs	r2, #6
 800ce24:	f7f3 fa14 	bl	8000250 <memchr>
 800ce28:	2800      	cmp	r0, #0
 800ce2a:	d03f      	beq.n	800ceac <_vfiprintf_r+0x22c>
 800ce2c:	4b29      	ldr	r3, [pc, #164]	; (800ced4 <_vfiprintf_r+0x254>)
 800ce2e:	bb1b      	cbnz	r3, 800ce78 <_vfiprintf_r+0x1f8>
 800ce30:	9b03      	ldr	r3, [sp, #12]
 800ce32:	3307      	adds	r3, #7
 800ce34:	f023 0307 	bic.w	r3, r3, #7
 800ce38:	3308      	adds	r3, #8
 800ce3a:	9303      	str	r3, [sp, #12]
 800ce3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce3e:	443b      	add	r3, r7
 800ce40:	9309      	str	r3, [sp, #36]	; 0x24
 800ce42:	e767      	b.n	800cd14 <_vfiprintf_r+0x94>
 800ce44:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce48:	460c      	mov	r4, r1
 800ce4a:	2001      	movs	r0, #1
 800ce4c:	e7a5      	b.n	800cd9a <_vfiprintf_r+0x11a>
 800ce4e:	2300      	movs	r3, #0
 800ce50:	3401      	adds	r4, #1
 800ce52:	9305      	str	r3, [sp, #20]
 800ce54:	4619      	mov	r1, r3
 800ce56:	f04f 0c0a 	mov.w	ip, #10
 800ce5a:	4620      	mov	r0, r4
 800ce5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce60:	3a30      	subs	r2, #48	; 0x30
 800ce62:	2a09      	cmp	r2, #9
 800ce64:	d903      	bls.n	800ce6e <_vfiprintf_r+0x1ee>
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d0c5      	beq.n	800cdf6 <_vfiprintf_r+0x176>
 800ce6a:	9105      	str	r1, [sp, #20]
 800ce6c:	e7c3      	b.n	800cdf6 <_vfiprintf_r+0x176>
 800ce6e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce72:	4604      	mov	r4, r0
 800ce74:	2301      	movs	r3, #1
 800ce76:	e7f0      	b.n	800ce5a <_vfiprintf_r+0x1da>
 800ce78:	ab03      	add	r3, sp, #12
 800ce7a:	9300      	str	r3, [sp, #0]
 800ce7c:	462a      	mov	r2, r5
 800ce7e:	4b16      	ldr	r3, [pc, #88]	; (800ced8 <_vfiprintf_r+0x258>)
 800ce80:	a904      	add	r1, sp, #16
 800ce82:	4630      	mov	r0, r6
 800ce84:	f3af 8000 	nop.w
 800ce88:	4607      	mov	r7, r0
 800ce8a:	1c78      	adds	r0, r7, #1
 800ce8c:	d1d6      	bne.n	800ce3c <_vfiprintf_r+0x1bc>
 800ce8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce90:	07d9      	lsls	r1, r3, #31
 800ce92:	d405      	bmi.n	800cea0 <_vfiprintf_r+0x220>
 800ce94:	89ab      	ldrh	r3, [r5, #12]
 800ce96:	059a      	lsls	r2, r3, #22
 800ce98:	d402      	bmi.n	800cea0 <_vfiprintf_r+0x220>
 800ce9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce9c:	f7fe fd04 	bl	800b8a8 <__retarget_lock_release_recursive>
 800cea0:	89ab      	ldrh	r3, [r5, #12]
 800cea2:	065b      	lsls	r3, r3, #25
 800cea4:	f53f af12 	bmi.w	800cccc <_vfiprintf_r+0x4c>
 800cea8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ceaa:	e711      	b.n	800ccd0 <_vfiprintf_r+0x50>
 800ceac:	ab03      	add	r3, sp, #12
 800ceae:	9300      	str	r3, [sp, #0]
 800ceb0:	462a      	mov	r2, r5
 800ceb2:	4b09      	ldr	r3, [pc, #36]	; (800ced8 <_vfiprintf_r+0x258>)
 800ceb4:	a904      	add	r1, sp, #16
 800ceb6:	4630      	mov	r0, r6
 800ceb8:	f000 f880 	bl	800cfbc <_printf_i>
 800cebc:	e7e4      	b.n	800ce88 <_vfiprintf_r+0x208>
 800cebe:	bf00      	nop
 800cec0:	0800ed60 	.word	0x0800ed60
 800cec4:	0800ed80 	.word	0x0800ed80
 800cec8:	0800ed40 	.word	0x0800ed40
 800cecc:	0800f103 	.word	0x0800f103
 800ced0:	0800f10d 	.word	0x0800f10d
 800ced4:	00000000 	.word	0x00000000
 800ced8:	0800cc5b 	.word	0x0800cc5b
 800cedc:	0800f109 	.word	0x0800f109

0800cee0 <_printf_common>:
 800cee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cee4:	4616      	mov	r6, r2
 800cee6:	4699      	mov	r9, r3
 800cee8:	688a      	ldr	r2, [r1, #8]
 800ceea:	690b      	ldr	r3, [r1, #16]
 800ceec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cef0:	4293      	cmp	r3, r2
 800cef2:	bfb8      	it	lt
 800cef4:	4613      	movlt	r3, r2
 800cef6:	6033      	str	r3, [r6, #0]
 800cef8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cefc:	4607      	mov	r7, r0
 800cefe:	460c      	mov	r4, r1
 800cf00:	b10a      	cbz	r2, 800cf06 <_printf_common+0x26>
 800cf02:	3301      	adds	r3, #1
 800cf04:	6033      	str	r3, [r6, #0]
 800cf06:	6823      	ldr	r3, [r4, #0]
 800cf08:	0699      	lsls	r1, r3, #26
 800cf0a:	bf42      	ittt	mi
 800cf0c:	6833      	ldrmi	r3, [r6, #0]
 800cf0e:	3302      	addmi	r3, #2
 800cf10:	6033      	strmi	r3, [r6, #0]
 800cf12:	6825      	ldr	r5, [r4, #0]
 800cf14:	f015 0506 	ands.w	r5, r5, #6
 800cf18:	d106      	bne.n	800cf28 <_printf_common+0x48>
 800cf1a:	f104 0a19 	add.w	sl, r4, #25
 800cf1e:	68e3      	ldr	r3, [r4, #12]
 800cf20:	6832      	ldr	r2, [r6, #0]
 800cf22:	1a9b      	subs	r3, r3, r2
 800cf24:	42ab      	cmp	r3, r5
 800cf26:	dc26      	bgt.n	800cf76 <_printf_common+0x96>
 800cf28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cf2c:	1e13      	subs	r3, r2, #0
 800cf2e:	6822      	ldr	r2, [r4, #0]
 800cf30:	bf18      	it	ne
 800cf32:	2301      	movne	r3, #1
 800cf34:	0692      	lsls	r2, r2, #26
 800cf36:	d42b      	bmi.n	800cf90 <_printf_common+0xb0>
 800cf38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cf3c:	4649      	mov	r1, r9
 800cf3e:	4638      	mov	r0, r7
 800cf40:	47c0      	blx	r8
 800cf42:	3001      	adds	r0, #1
 800cf44:	d01e      	beq.n	800cf84 <_printf_common+0xa4>
 800cf46:	6823      	ldr	r3, [r4, #0]
 800cf48:	68e5      	ldr	r5, [r4, #12]
 800cf4a:	6832      	ldr	r2, [r6, #0]
 800cf4c:	f003 0306 	and.w	r3, r3, #6
 800cf50:	2b04      	cmp	r3, #4
 800cf52:	bf08      	it	eq
 800cf54:	1aad      	subeq	r5, r5, r2
 800cf56:	68a3      	ldr	r3, [r4, #8]
 800cf58:	6922      	ldr	r2, [r4, #16]
 800cf5a:	bf0c      	ite	eq
 800cf5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cf60:	2500      	movne	r5, #0
 800cf62:	4293      	cmp	r3, r2
 800cf64:	bfc4      	itt	gt
 800cf66:	1a9b      	subgt	r3, r3, r2
 800cf68:	18ed      	addgt	r5, r5, r3
 800cf6a:	2600      	movs	r6, #0
 800cf6c:	341a      	adds	r4, #26
 800cf6e:	42b5      	cmp	r5, r6
 800cf70:	d11a      	bne.n	800cfa8 <_printf_common+0xc8>
 800cf72:	2000      	movs	r0, #0
 800cf74:	e008      	b.n	800cf88 <_printf_common+0xa8>
 800cf76:	2301      	movs	r3, #1
 800cf78:	4652      	mov	r2, sl
 800cf7a:	4649      	mov	r1, r9
 800cf7c:	4638      	mov	r0, r7
 800cf7e:	47c0      	blx	r8
 800cf80:	3001      	adds	r0, #1
 800cf82:	d103      	bne.n	800cf8c <_printf_common+0xac>
 800cf84:	f04f 30ff 	mov.w	r0, #4294967295
 800cf88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf8c:	3501      	adds	r5, #1
 800cf8e:	e7c6      	b.n	800cf1e <_printf_common+0x3e>
 800cf90:	18e1      	adds	r1, r4, r3
 800cf92:	1c5a      	adds	r2, r3, #1
 800cf94:	2030      	movs	r0, #48	; 0x30
 800cf96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cf9a:	4422      	add	r2, r4
 800cf9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cfa0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cfa4:	3302      	adds	r3, #2
 800cfa6:	e7c7      	b.n	800cf38 <_printf_common+0x58>
 800cfa8:	2301      	movs	r3, #1
 800cfaa:	4622      	mov	r2, r4
 800cfac:	4649      	mov	r1, r9
 800cfae:	4638      	mov	r0, r7
 800cfb0:	47c0      	blx	r8
 800cfb2:	3001      	adds	r0, #1
 800cfb4:	d0e6      	beq.n	800cf84 <_printf_common+0xa4>
 800cfb6:	3601      	adds	r6, #1
 800cfb8:	e7d9      	b.n	800cf6e <_printf_common+0x8e>
	...

0800cfbc <_printf_i>:
 800cfbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cfc0:	7e0f      	ldrb	r7, [r1, #24]
 800cfc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cfc4:	2f78      	cmp	r7, #120	; 0x78
 800cfc6:	4691      	mov	r9, r2
 800cfc8:	4680      	mov	r8, r0
 800cfca:	460c      	mov	r4, r1
 800cfcc:	469a      	mov	sl, r3
 800cfce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cfd2:	d807      	bhi.n	800cfe4 <_printf_i+0x28>
 800cfd4:	2f62      	cmp	r7, #98	; 0x62
 800cfd6:	d80a      	bhi.n	800cfee <_printf_i+0x32>
 800cfd8:	2f00      	cmp	r7, #0
 800cfda:	f000 80d8 	beq.w	800d18e <_printf_i+0x1d2>
 800cfde:	2f58      	cmp	r7, #88	; 0x58
 800cfe0:	f000 80a3 	beq.w	800d12a <_printf_i+0x16e>
 800cfe4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cfe8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cfec:	e03a      	b.n	800d064 <_printf_i+0xa8>
 800cfee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cff2:	2b15      	cmp	r3, #21
 800cff4:	d8f6      	bhi.n	800cfe4 <_printf_i+0x28>
 800cff6:	a101      	add	r1, pc, #4	; (adr r1, 800cffc <_printf_i+0x40>)
 800cff8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cffc:	0800d055 	.word	0x0800d055
 800d000:	0800d069 	.word	0x0800d069
 800d004:	0800cfe5 	.word	0x0800cfe5
 800d008:	0800cfe5 	.word	0x0800cfe5
 800d00c:	0800cfe5 	.word	0x0800cfe5
 800d010:	0800cfe5 	.word	0x0800cfe5
 800d014:	0800d069 	.word	0x0800d069
 800d018:	0800cfe5 	.word	0x0800cfe5
 800d01c:	0800cfe5 	.word	0x0800cfe5
 800d020:	0800cfe5 	.word	0x0800cfe5
 800d024:	0800cfe5 	.word	0x0800cfe5
 800d028:	0800d175 	.word	0x0800d175
 800d02c:	0800d099 	.word	0x0800d099
 800d030:	0800d157 	.word	0x0800d157
 800d034:	0800cfe5 	.word	0x0800cfe5
 800d038:	0800cfe5 	.word	0x0800cfe5
 800d03c:	0800d197 	.word	0x0800d197
 800d040:	0800cfe5 	.word	0x0800cfe5
 800d044:	0800d099 	.word	0x0800d099
 800d048:	0800cfe5 	.word	0x0800cfe5
 800d04c:	0800cfe5 	.word	0x0800cfe5
 800d050:	0800d15f 	.word	0x0800d15f
 800d054:	682b      	ldr	r3, [r5, #0]
 800d056:	1d1a      	adds	r2, r3, #4
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	602a      	str	r2, [r5, #0]
 800d05c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d060:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d064:	2301      	movs	r3, #1
 800d066:	e0a3      	b.n	800d1b0 <_printf_i+0x1f4>
 800d068:	6820      	ldr	r0, [r4, #0]
 800d06a:	6829      	ldr	r1, [r5, #0]
 800d06c:	0606      	lsls	r6, r0, #24
 800d06e:	f101 0304 	add.w	r3, r1, #4
 800d072:	d50a      	bpl.n	800d08a <_printf_i+0xce>
 800d074:	680e      	ldr	r6, [r1, #0]
 800d076:	602b      	str	r3, [r5, #0]
 800d078:	2e00      	cmp	r6, #0
 800d07a:	da03      	bge.n	800d084 <_printf_i+0xc8>
 800d07c:	232d      	movs	r3, #45	; 0x2d
 800d07e:	4276      	negs	r6, r6
 800d080:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d084:	485e      	ldr	r0, [pc, #376]	; (800d200 <_printf_i+0x244>)
 800d086:	230a      	movs	r3, #10
 800d088:	e019      	b.n	800d0be <_printf_i+0x102>
 800d08a:	680e      	ldr	r6, [r1, #0]
 800d08c:	602b      	str	r3, [r5, #0]
 800d08e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d092:	bf18      	it	ne
 800d094:	b236      	sxthne	r6, r6
 800d096:	e7ef      	b.n	800d078 <_printf_i+0xbc>
 800d098:	682b      	ldr	r3, [r5, #0]
 800d09a:	6820      	ldr	r0, [r4, #0]
 800d09c:	1d19      	adds	r1, r3, #4
 800d09e:	6029      	str	r1, [r5, #0]
 800d0a0:	0601      	lsls	r1, r0, #24
 800d0a2:	d501      	bpl.n	800d0a8 <_printf_i+0xec>
 800d0a4:	681e      	ldr	r6, [r3, #0]
 800d0a6:	e002      	b.n	800d0ae <_printf_i+0xf2>
 800d0a8:	0646      	lsls	r6, r0, #25
 800d0aa:	d5fb      	bpl.n	800d0a4 <_printf_i+0xe8>
 800d0ac:	881e      	ldrh	r6, [r3, #0]
 800d0ae:	4854      	ldr	r0, [pc, #336]	; (800d200 <_printf_i+0x244>)
 800d0b0:	2f6f      	cmp	r7, #111	; 0x6f
 800d0b2:	bf0c      	ite	eq
 800d0b4:	2308      	moveq	r3, #8
 800d0b6:	230a      	movne	r3, #10
 800d0b8:	2100      	movs	r1, #0
 800d0ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d0be:	6865      	ldr	r5, [r4, #4]
 800d0c0:	60a5      	str	r5, [r4, #8]
 800d0c2:	2d00      	cmp	r5, #0
 800d0c4:	bfa2      	ittt	ge
 800d0c6:	6821      	ldrge	r1, [r4, #0]
 800d0c8:	f021 0104 	bicge.w	r1, r1, #4
 800d0cc:	6021      	strge	r1, [r4, #0]
 800d0ce:	b90e      	cbnz	r6, 800d0d4 <_printf_i+0x118>
 800d0d0:	2d00      	cmp	r5, #0
 800d0d2:	d04d      	beq.n	800d170 <_printf_i+0x1b4>
 800d0d4:	4615      	mov	r5, r2
 800d0d6:	fbb6 f1f3 	udiv	r1, r6, r3
 800d0da:	fb03 6711 	mls	r7, r3, r1, r6
 800d0de:	5dc7      	ldrb	r7, [r0, r7]
 800d0e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d0e4:	4637      	mov	r7, r6
 800d0e6:	42bb      	cmp	r3, r7
 800d0e8:	460e      	mov	r6, r1
 800d0ea:	d9f4      	bls.n	800d0d6 <_printf_i+0x11a>
 800d0ec:	2b08      	cmp	r3, #8
 800d0ee:	d10b      	bne.n	800d108 <_printf_i+0x14c>
 800d0f0:	6823      	ldr	r3, [r4, #0]
 800d0f2:	07de      	lsls	r6, r3, #31
 800d0f4:	d508      	bpl.n	800d108 <_printf_i+0x14c>
 800d0f6:	6923      	ldr	r3, [r4, #16]
 800d0f8:	6861      	ldr	r1, [r4, #4]
 800d0fa:	4299      	cmp	r1, r3
 800d0fc:	bfde      	ittt	le
 800d0fe:	2330      	movle	r3, #48	; 0x30
 800d100:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d104:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d108:	1b52      	subs	r2, r2, r5
 800d10a:	6122      	str	r2, [r4, #16]
 800d10c:	f8cd a000 	str.w	sl, [sp]
 800d110:	464b      	mov	r3, r9
 800d112:	aa03      	add	r2, sp, #12
 800d114:	4621      	mov	r1, r4
 800d116:	4640      	mov	r0, r8
 800d118:	f7ff fee2 	bl	800cee0 <_printf_common>
 800d11c:	3001      	adds	r0, #1
 800d11e:	d14c      	bne.n	800d1ba <_printf_i+0x1fe>
 800d120:	f04f 30ff 	mov.w	r0, #4294967295
 800d124:	b004      	add	sp, #16
 800d126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d12a:	4835      	ldr	r0, [pc, #212]	; (800d200 <_printf_i+0x244>)
 800d12c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d130:	6829      	ldr	r1, [r5, #0]
 800d132:	6823      	ldr	r3, [r4, #0]
 800d134:	f851 6b04 	ldr.w	r6, [r1], #4
 800d138:	6029      	str	r1, [r5, #0]
 800d13a:	061d      	lsls	r5, r3, #24
 800d13c:	d514      	bpl.n	800d168 <_printf_i+0x1ac>
 800d13e:	07df      	lsls	r7, r3, #31
 800d140:	bf44      	itt	mi
 800d142:	f043 0320 	orrmi.w	r3, r3, #32
 800d146:	6023      	strmi	r3, [r4, #0]
 800d148:	b91e      	cbnz	r6, 800d152 <_printf_i+0x196>
 800d14a:	6823      	ldr	r3, [r4, #0]
 800d14c:	f023 0320 	bic.w	r3, r3, #32
 800d150:	6023      	str	r3, [r4, #0]
 800d152:	2310      	movs	r3, #16
 800d154:	e7b0      	b.n	800d0b8 <_printf_i+0xfc>
 800d156:	6823      	ldr	r3, [r4, #0]
 800d158:	f043 0320 	orr.w	r3, r3, #32
 800d15c:	6023      	str	r3, [r4, #0]
 800d15e:	2378      	movs	r3, #120	; 0x78
 800d160:	4828      	ldr	r0, [pc, #160]	; (800d204 <_printf_i+0x248>)
 800d162:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d166:	e7e3      	b.n	800d130 <_printf_i+0x174>
 800d168:	0659      	lsls	r1, r3, #25
 800d16a:	bf48      	it	mi
 800d16c:	b2b6      	uxthmi	r6, r6
 800d16e:	e7e6      	b.n	800d13e <_printf_i+0x182>
 800d170:	4615      	mov	r5, r2
 800d172:	e7bb      	b.n	800d0ec <_printf_i+0x130>
 800d174:	682b      	ldr	r3, [r5, #0]
 800d176:	6826      	ldr	r6, [r4, #0]
 800d178:	6961      	ldr	r1, [r4, #20]
 800d17a:	1d18      	adds	r0, r3, #4
 800d17c:	6028      	str	r0, [r5, #0]
 800d17e:	0635      	lsls	r5, r6, #24
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	d501      	bpl.n	800d188 <_printf_i+0x1cc>
 800d184:	6019      	str	r1, [r3, #0]
 800d186:	e002      	b.n	800d18e <_printf_i+0x1d2>
 800d188:	0670      	lsls	r0, r6, #25
 800d18a:	d5fb      	bpl.n	800d184 <_printf_i+0x1c8>
 800d18c:	8019      	strh	r1, [r3, #0]
 800d18e:	2300      	movs	r3, #0
 800d190:	6123      	str	r3, [r4, #16]
 800d192:	4615      	mov	r5, r2
 800d194:	e7ba      	b.n	800d10c <_printf_i+0x150>
 800d196:	682b      	ldr	r3, [r5, #0]
 800d198:	1d1a      	adds	r2, r3, #4
 800d19a:	602a      	str	r2, [r5, #0]
 800d19c:	681d      	ldr	r5, [r3, #0]
 800d19e:	6862      	ldr	r2, [r4, #4]
 800d1a0:	2100      	movs	r1, #0
 800d1a2:	4628      	mov	r0, r5
 800d1a4:	f7f3 f854 	bl	8000250 <memchr>
 800d1a8:	b108      	cbz	r0, 800d1ae <_printf_i+0x1f2>
 800d1aa:	1b40      	subs	r0, r0, r5
 800d1ac:	6060      	str	r0, [r4, #4]
 800d1ae:	6863      	ldr	r3, [r4, #4]
 800d1b0:	6123      	str	r3, [r4, #16]
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d1b8:	e7a8      	b.n	800d10c <_printf_i+0x150>
 800d1ba:	6923      	ldr	r3, [r4, #16]
 800d1bc:	462a      	mov	r2, r5
 800d1be:	4649      	mov	r1, r9
 800d1c0:	4640      	mov	r0, r8
 800d1c2:	47d0      	blx	sl
 800d1c4:	3001      	adds	r0, #1
 800d1c6:	d0ab      	beq.n	800d120 <_printf_i+0x164>
 800d1c8:	6823      	ldr	r3, [r4, #0]
 800d1ca:	079b      	lsls	r3, r3, #30
 800d1cc:	d413      	bmi.n	800d1f6 <_printf_i+0x23a>
 800d1ce:	68e0      	ldr	r0, [r4, #12]
 800d1d0:	9b03      	ldr	r3, [sp, #12]
 800d1d2:	4298      	cmp	r0, r3
 800d1d4:	bfb8      	it	lt
 800d1d6:	4618      	movlt	r0, r3
 800d1d8:	e7a4      	b.n	800d124 <_printf_i+0x168>
 800d1da:	2301      	movs	r3, #1
 800d1dc:	4632      	mov	r2, r6
 800d1de:	4649      	mov	r1, r9
 800d1e0:	4640      	mov	r0, r8
 800d1e2:	47d0      	blx	sl
 800d1e4:	3001      	adds	r0, #1
 800d1e6:	d09b      	beq.n	800d120 <_printf_i+0x164>
 800d1e8:	3501      	adds	r5, #1
 800d1ea:	68e3      	ldr	r3, [r4, #12]
 800d1ec:	9903      	ldr	r1, [sp, #12]
 800d1ee:	1a5b      	subs	r3, r3, r1
 800d1f0:	42ab      	cmp	r3, r5
 800d1f2:	dcf2      	bgt.n	800d1da <_printf_i+0x21e>
 800d1f4:	e7eb      	b.n	800d1ce <_printf_i+0x212>
 800d1f6:	2500      	movs	r5, #0
 800d1f8:	f104 0619 	add.w	r6, r4, #25
 800d1fc:	e7f5      	b.n	800d1ea <_printf_i+0x22e>
 800d1fe:	bf00      	nop
 800d200:	0800f114 	.word	0x0800f114
 800d204:	0800f125 	.word	0x0800f125

0800d208 <_read_r>:
 800d208:	b538      	push	{r3, r4, r5, lr}
 800d20a:	4d07      	ldr	r5, [pc, #28]	; (800d228 <_read_r+0x20>)
 800d20c:	4604      	mov	r4, r0
 800d20e:	4608      	mov	r0, r1
 800d210:	4611      	mov	r1, r2
 800d212:	2200      	movs	r2, #0
 800d214:	602a      	str	r2, [r5, #0]
 800d216:	461a      	mov	r2, r3
 800d218:	f7f7 fb84 	bl	8004924 <_read>
 800d21c:	1c43      	adds	r3, r0, #1
 800d21e:	d102      	bne.n	800d226 <_read_r+0x1e>
 800d220:	682b      	ldr	r3, [r5, #0]
 800d222:	b103      	cbz	r3, 800d226 <_read_r+0x1e>
 800d224:	6023      	str	r3, [r4, #0]
 800d226:	bd38      	pop	{r3, r4, r5, pc}
 800d228:	20005698 	.word	0x20005698

0800d22c <siscanf>:
 800d22c:	b40e      	push	{r1, r2, r3}
 800d22e:	b510      	push	{r4, lr}
 800d230:	b09f      	sub	sp, #124	; 0x7c
 800d232:	ac21      	add	r4, sp, #132	; 0x84
 800d234:	f44f 7101 	mov.w	r1, #516	; 0x204
 800d238:	f854 2b04 	ldr.w	r2, [r4], #4
 800d23c:	9201      	str	r2, [sp, #4]
 800d23e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800d242:	9004      	str	r0, [sp, #16]
 800d244:	9008      	str	r0, [sp, #32]
 800d246:	f7f2 fff5 	bl	8000234 <strlen>
 800d24a:	4b0c      	ldr	r3, [pc, #48]	; (800d27c <siscanf+0x50>)
 800d24c:	9005      	str	r0, [sp, #20]
 800d24e:	9009      	str	r0, [sp, #36]	; 0x24
 800d250:	930d      	str	r3, [sp, #52]	; 0x34
 800d252:	480b      	ldr	r0, [pc, #44]	; (800d280 <siscanf+0x54>)
 800d254:	9a01      	ldr	r2, [sp, #4]
 800d256:	6800      	ldr	r0, [r0, #0]
 800d258:	9403      	str	r4, [sp, #12]
 800d25a:	2300      	movs	r3, #0
 800d25c:	9311      	str	r3, [sp, #68]	; 0x44
 800d25e:	9316      	str	r3, [sp, #88]	; 0x58
 800d260:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d264:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d268:	a904      	add	r1, sp, #16
 800d26a:	4623      	mov	r3, r4
 800d26c:	f000 fa60 	bl	800d730 <__ssvfiscanf_r>
 800d270:	b01f      	add	sp, #124	; 0x7c
 800d272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d276:	b003      	add	sp, #12
 800d278:	4770      	bx	lr
 800d27a:	bf00      	nop
 800d27c:	0800bcd7 	.word	0x0800bcd7
 800d280:	200001f4 	.word	0x200001f4

0800d284 <strncmp>:
 800d284:	b510      	push	{r4, lr}
 800d286:	b17a      	cbz	r2, 800d2a8 <strncmp+0x24>
 800d288:	4603      	mov	r3, r0
 800d28a:	3901      	subs	r1, #1
 800d28c:	1884      	adds	r4, r0, r2
 800d28e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d292:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d296:	4290      	cmp	r0, r2
 800d298:	d101      	bne.n	800d29e <strncmp+0x1a>
 800d29a:	42a3      	cmp	r3, r4
 800d29c:	d101      	bne.n	800d2a2 <strncmp+0x1e>
 800d29e:	1a80      	subs	r0, r0, r2
 800d2a0:	bd10      	pop	{r4, pc}
 800d2a2:	2800      	cmp	r0, #0
 800d2a4:	d1f3      	bne.n	800d28e <strncmp+0xa>
 800d2a6:	e7fa      	b.n	800d29e <strncmp+0x1a>
 800d2a8:	4610      	mov	r0, r2
 800d2aa:	e7f9      	b.n	800d2a0 <strncmp+0x1c>

0800d2ac <_strtoul_l.constprop.0>:
 800d2ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d2b0:	4f36      	ldr	r7, [pc, #216]	; (800d38c <_strtoul_l.constprop.0+0xe0>)
 800d2b2:	4686      	mov	lr, r0
 800d2b4:	460d      	mov	r5, r1
 800d2b6:	4628      	mov	r0, r5
 800d2b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d2bc:	5de6      	ldrb	r6, [r4, r7]
 800d2be:	f016 0608 	ands.w	r6, r6, #8
 800d2c2:	d1f8      	bne.n	800d2b6 <_strtoul_l.constprop.0+0xa>
 800d2c4:	2c2d      	cmp	r4, #45	; 0x2d
 800d2c6:	d12f      	bne.n	800d328 <_strtoul_l.constprop.0+0x7c>
 800d2c8:	782c      	ldrb	r4, [r5, #0]
 800d2ca:	2601      	movs	r6, #1
 800d2cc:	1c85      	adds	r5, r0, #2
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d057      	beq.n	800d382 <_strtoul_l.constprop.0+0xd6>
 800d2d2:	2b10      	cmp	r3, #16
 800d2d4:	d109      	bne.n	800d2ea <_strtoul_l.constprop.0+0x3e>
 800d2d6:	2c30      	cmp	r4, #48	; 0x30
 800d2d8:	d107      	bne.n	800d2ea <_strtoul_l.constprop.0+0x3e>
 800d2da:	7828      	ldrb	r0, [r5, #0]
 800d2dc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d2e0:	2858      	cmp	r0, #88	; 0x58
 800d2e2:	d149      	bne.n	800d378 <_strtoul_l.constprop.0+0xcc>
 800d2e4:	786c      	ldrb	r4, [r5, #1]
 800d2e6:	2310      	movs	r3, #16
 800d2e8:	3502      	adds	r5, #2
 800d2ea:	f04f 38ff 	mov.w	r8, #4294967295
 800d2ee:	2700      	movs	r7, #0
 800d2f0:	fbb8 f8f3 	udiv	r8, r8, r3
 800d2f4:	fb03 f908 	mul.w	r9, r3, r8
 800d2f8:	ea6f 0909 	mvn.w	r9, r9
 800d2fc:	4638      	mov	r0, r7
 800d2fe:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d302:	f1bc 0f09 	cmp.w	ip, #9
 800d306:	d814      	bhi.n	800d332 <_strtoul_l.constprop.0+0x86>
 800d308:	4664      	mov	r4, ip
 800d30a:	42a3      	cmp	r3, r4
 800d30c:	dd22      	ble.n	800d354 <_strtoul_l.constprop.0+0xa8>
 800d30e:	2f00      	cmp	r7, #0
 800d310:	db1d      	blt.n	800d34e <_strtoul_l.constprop.0+0xa2>
 800d312:	4580      	cmp	r8, r0
 800d314:	d31b      	bcc.n	800d34e <_strtoul_l.constprop.0+0xa2>
 800d316:	d101      	bne.n	800d31c <_strtoul_l.constprop.0+0x70>
 800d318:	45a1      	cmp	r9, r4
 800d31a:	db18      	blt.n	800d34e <_strtoul_l.constprop.0+0xa2>
 800d31c:	fb00 4003 	mla	r0, r0, r3, r4
 800d320:	2701      	movs	r7, #1
 800d322:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d326:	e7ea      	b.n	800d2fe <_strtoul_l.constprop.0+0x52>
 800d328:	2c2b      	cmp	r4, #43	; 0x2b
 800d32a:	bf04      	itt	eq
 800d32c:	782c      	ldrbeq	r4, [r5, #0]
 800d32e:	1c85      	addeq	r5, r0, #2
 800d330:	e7cd      	b.n	800d2ce <_strtoul_l.constprop.0+0x22>
 800d332:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d336:	f1bc 0f19 	cmp.w	ip, #25
 800d33a:	d801      	bhi.n	800d340 <_strtoul_l.constprop.0+0x94>
 800d33c:	3c37      	subs	r4, #55	; 0x37
 800d33e:	e7e4      	b.n	800d30a <_strtoul_l.constprop.0+0x5e>
 800d340:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d344:	f1bc 0f19 	cmp.w	ip, #25
 800d348:	d804      	bhi.n	800d354 <_strtoul_l.constprop.0+0xa8>
 800d34a:	3c57      	subs	r4, #87	; 0x57
 800d34c:	e7dd      	b.n	800d30a <_strtoul_l.constprop.0+0x5e>
 800d34e:	f04f 37ff 	mov.w	r7, #4294967295
 800d352:	e7e6      	b.n	800d322 <_strtoul_l.constprop.0+0x76>
 800d354:	2f00      	cmp	r7, #0
 800d356:	da07      	bge.n	800d368 <_strtoul_l.constprop.0+0xbc>
 800d358:	2322      	movs	r3, #34	; 0x22
 800d35a:	f8ce 3000 	str.w	r3, [lr]
 800d35e:	f04f 30ff 	mov.w	r0, #4294967295
 800d362:	b932      	cbnz	r2, 800d372 <_strtoul_l.constprop.0+0xc6>
 800d364:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d368:	b106      	cbz	r6, 800d36c <_strtoul_l.constprop.0+0xc0>
 800d36a:	4240      	negs	r0, r0
 800d36c:	2a00      	cmp	r2, #0
 800d36e:	d0f9      	beq.n	800d364 <_strtoul_l.constprop.0+0xb8>
 800d370:	b107      	cbz	r7, 800d374 <_strtoul_l.constprop.0+0xc8>
 800d372:	1e69      	subs	r1, r5, #1
 800d374:	6011      	str	r1, [r2, #0]
 800d376:	e7f5      	b.n	800d364 <_strtoul_l.constprop.0+0xb8>
 800d378:	2430      	movs	r4, #48	; 0x30
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d1b5      	bne.n	800d2ea <_strtoul_l.constprop.0+0x3e>
 800d37e:	2308      	movs	r3, #8
 800d380:	e7b3      	b.n	800d2ea <_strtoul_l.constprop.0+0x3e>
 800d382:	2c30      	cmp	r4, #48	; 0x30
 800d384:	d0a9      	beq.n	800d2da <_strtoul_l.constprop.0+0x2e>
 800d386:	230a      	movs	r3, #10
 800d388:	e7af      	b.n	800d2ea <_strtoul_l.constprop.0+0x3e>
 800d38a:	bf00      	nop
 800d38c:	0800f003 	.word	0x0800f003

0800d390 <_strtoul_r>:
 800d390:	f7ff bf8c 	b.w	800d2ac <_strtoul_l.constprop.0>

0800d394 <strtoul>:
 800d394:	4613      	mov	r3, r2
 800d396:	460a      	mov	r2, r1
 800d398:	4601      	mov	r1, r0
 800d39a:	4802      	ldr	r0, [pc, #8]	; (800d3a4 <strtoul+0x10>)
 800d39c:	6800      	ldr	r0, [r0, #0]
 800d39e:	f7ff bf85 	b.w	800d2ac <_strtoul_l.constprop.0>
 800d3a2:	bf00      	nop
 800d3a4:	200001f4 	.word	0x200001f4

0800d3a8 <__swbuf_r>:
 800d3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3aa:	460e      	mov	r6, r1
 800d3ac:	4614      	mov	r4, r2
 800d3ae:	4605      	mov	r5, r0
 800d3b0:	b118      	cbz	r0, 800d3ba <__swbuf_r+0x12>
 800d3b2:	6983      	ldr	r3, [r0, #24]
 800d3b4:	b90b      	cbnz	r3, 800d3ba <__swbuf_r+0x12>
 800d3b6:	f7fe f89f 	bl	800b4f8 <__sinit>
 800d3ba:	4b21      	ldr	r3, [pc, #132]	; (800d440 <__swbuf_r+0x98>)
 800d3bc:	429c      	cmp	r4, r3
 800d3be:	d12b      	bne.n	800d418 <__swbuf_r+0x70>
 800d3c0:	686c      	ldr	r4, [r5, #4]
 800d3c2:	69a3      	ldr	r3, [r4, #24]
 800d3c4:	60a3      	str	r3, [r4, #8]
 800d3c6:	89a3      	ldrh	r3, [r4, #12]
 800d3c8:	071a      	lsls	r2, r3, #28
 800d3ca:	d52f      	bpl.n	800d42c <__swbuf_r+0x84>
 800d3cc:	6923      	ldr	r3, [r4, #16]
 800d3ce:	b36b      	cbz	r3, 800d42c <__swbuf_r+0x84>
 800d3d0:	6923      	ldr	r3, [r4, #16]
 800d3d2:	6820      	ldr	r0, [r4, #0]
 800d3d4:	1ac0      	subs	r0, r0, r3
 800d3d6:	6963      	ldr	r3, [r4, #20]
 800d3d8:	b2f6      	uxtb	r6, r6
 800d3da:	4283      	cmp	r3, r0
 800d3dc:	4637      	mov	r7, r6
 800d3de:	dc04      	bgt.n	800d3ea <__swbuf_r+0x42>
 800d3e0:	4621      	mov	r1, r4
 800d3e2:	4628      	mov	r0, r5
 800d3e4:	f7ff f966 	bl	800c6b4 <_fflush_r>
 800d3e8:	bb30      	cbnz	r0, 800d438 <__swbuf_r+0x90>
 800d3ea:	68a3      	ldr	r3, [r4, #8]
 800d3ec:	3b01      	subs	r3, #1
 800d3ee:	60a3      	str	r3, [r4, #8]
 800d3f0:	6823      	ldr	r3, [r4, #0]
 800d3f2:	1c5a      	adds	r2, r3, #1
 800d3f4:	6022      	str	r2, [r4, #0]
 800d3f6:	701e      	strb	r6, [r3, #0]
 800d3f8:	6963      	ldr	r3, [r4, #20]
 800d3fa:	3001      	adds	r0, #1
 800d3fc:	4283      	cmp	r3, r0
 800d3fe:	d004      	beq.n	800d40a <__swbuf_r+0x62>
 800d400:	89a3      	ldrh	r3, [r4, #12]
 800d402:	07db      	lsls	r3, r3, #31
 800d404:	d506      	bpl.n	800d414 <__swbuf_r+0x6c>
 800d406:	2e0a      	cmp	r6, #10
 800d408:	d104      	bne.n	800d414 <__swbuf_r+0x6c>
 800d40a:	4621      	mov	r1, r4
 800d40c:	4628      	mov	r0, r5
 800d40e:	f7ff f951 	bl	800c6b4 <_fflush_r>
 800d412:	b988      	cbnz	r0, 800d438 <__swbuf_r+0x90>
 800d414:	4638      	mov	r0, r7
 800d416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d418:	4b0a      	ldr	r3, [pc, #40]	; (800d444 <__swbuf_r+0x9c>)
 800d41a:	429c      	cmp	r4, r3
 800d41c:	d101      	bne.n	800d422 <__swbuf_r+0x7a>
 800d41e:	68ac      	ldr	r4, [r5, #8]
 800d420:	e7cf      	b.n	800d3c2 <__swbuf_r+0x1a>
 800d422:	4b09      	ldr	r3, [pc, #36]	; (800d448 <__swbuf_r+0xa0>)
 800d424:	429c      	cmp	r4, r3
 800d426:	bf08      	it	eq
 800d428:	68ec      	ldreq	r4, [r5, #12]
 800d42a:	e7ca      	b.n	800d3c2 <__swbuf_r+0x1a>
 800d42c:	4621      	mov	r1, r4
 800d42e:	4628      	mov	r0, r5
 800d430:	f000 f80c 	bl	800d44c <__swsetup_r>
 800d434:	2800      	cmp	r0, #0
 800d436:	d0cb      	beq.n	800d3d0 <__swbuf_r+0x28>
 800d438:	f04f 37ff 	mov.w	r7, #4294967295
 800d43c:	e7ea      	b.n	800d414 <__swbuf_r+0x6c>
 800d43e:	bf00      	nop
 800d440:	0800ed60 	.word	0x0800ed60
 800d444:	0800ed80 	.word	0x0800ed80
 800d448:	0800ed40 	.word	0x0800ed40

0800d44c <__swsetup_r>:
 800d44c:	4b32      	ldr	r3, [pc, #200]	; (800d518 <__swsetup_r+0xcc>)
 800d44e:	b570      	push	{r4, r5, r6, lr}
 800d450:	681d      	ldr	r5, [r3, #0]
 800d452:	4606      	mov	r6, r0
 800d454:	460c      	mov	r4, r1
 800d456:	b125      	cbz	r5, 800d462 <__swsetup_r+0x16>
 800d458:	69ab      	ldr	r3, [r5, #24]
 800d45a:	b913      	cbnz	r3, 800d462 <__swsetup_r+0x16>
 800d45c:	4628      	mov	r0, r5
 800d45e:	f7fe f84b 	bl	800b4f8 <__sinit>
 800d462:	4b2e      	ldr	r3, [pc, #184]	; (800d51c <__swsetup_r+0xd0>)
 800d464:	429c      	cmp	r4, r3
 800d466:	d10f      	bne.n	800d488 <__swsetup_r+0x3c>
 800d468:	686c      	ldr	r4, [r5, #4]
 800d46a:	89a3      	ldrh	r3, [r4, #12]
 800d46c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d470:	0719      	lsls	r1, r3, #28
 800d472:	d42c      	bmi.n	800d4ce <__swsetup_r+0x82>
 800d474:	06dd      	lsls	r5, r3, #27
 800d476:	d411      	bmi.n	800d49c <__swsetup_r+0x50>
 800d478:	2309      	movs	r3, #9
 800d47a:	6033      	str	r3, [r6, #0]
 800d47c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d480:	81a3      	strh	r3, [r4, #12]
 800d482:	f04f 30ff 	mov.w	r0, #4294967295
 800d486:	e03e      	b.n	800d506 <__swsetup_r+0xba>
 800d488:	4b25      	ldr	r3, [pc, #148]	; (800d520 <__swsetup_r+0xd4>)
 800d48a:	429c      	cmp	r4, r3
 800d48c:	d101      	bne.n	800d492 <__swsetup_r+0x46>
 800d48e:	68ac      	ldr	r4, [r5, #8]
 800d490:	e7eb      	b.n	800d46a <__swsetup_r+0x1e>
 800d492:	4b24      	ldr	r3, [pc, #144]	; (800d524 <__swsetup_r+0xd8>)
 800d494:	429c      	cmp	r4, r3
 800d496:	bf08      	it	eq
 800d498:	68ec      	ldreq	r4, [r5, #12]
 800d49a:	e7e6      	b.n	800d46a <__swsetup_r+0x1e>
 800d49c:	0758      	lsls	r0, r3, #29
 800d49e:	d512      	bpl.n	800d4c6 <__swsetup_r+0x7a>
 800d4a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d4a2:	b141      	cbz	r1, 800d4b6 <__swsetup_r+0x6a>
 800d4a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d4a8:	4299      	cmp	r1, r3
 800d4aa:	d002      	beq.n	800d4b2 <__swsetup_r+0x66>
 800d4ac:	4630      	mov	r0, r6
 800d4ae:	f7fe fa53 	bl	800b958 <_free_r>
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	6363      	str	r3, [r4, #52]	; 0x34
 800d4b6:	89a3      	ldrh	r3, [r4, #12]
 800d4b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d4bc:	81a3      	strh	r3, [r4, #12]
 800d4be:	2300      	movs	r3, #0
 800d4c0:	6063      	str	r3, [r4, #4]
 800d4c2:	6923      	ldr	r3, [r4, #16]
 800d4c4:	6023      	str	r3, [r4, #0]
 800d4c6:	89a3      	ldrh	r3, [r4, #12]
 800d4c8:	f043 0308 	orr.w	r3, r3, #8
 800d4cc:	81a3      	strh	r3, [r4, #12]
 800d4ce:	6923      	ldr	r3, [r4, #16]
 800d4d0:	b94b      	cbnz	r3, 800d4e6 <__swsetup_r+0x9a>
 800d4d2:	89a3      	ldrh	r3, [r4, #12]
 800d4d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d4d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d4dc:	d003      	beq.n	800d4e6 <__swsetup_r+0x9a>
 800d4de:	4621      	mov	r1, r4
 800d4e0:	4630      	mov	r0, r6
 800d4e2:	f000 f85b 	bl	800d59c <__smakebuf_r>
 800d4e6:	89a0      	ldrh	r0, [r4, #12]
 800d4e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d4ec:	f010 0301 	ands.w	r3, r0, #1
 800d4f0:	d00a      	beq.n	800d508 <__swsetup_r+0xbc>
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	60a3      	str	r3, [r4, #8]
 800d4f6:	6963      	ldr	r3, [r4, #20]
 800d4f8:	425b      	negs	r3, r3
 800d4fa:	61a3      	str	r3, [r4, #24]
 800d4fc:	6923      	ldr	r3, [r4, #16]
 800d4fe:	b943      	cbnz	r3, 800d512 <__swsetup_r+0xc6>
 800d500:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d504:	d1ba      	bne.n	800d47c <__swsetup_r+0x30>
 800d506:	bd70      	pop	{r4, r5, r6, pc}
 800d508:	0781      	lsls	r1, r0, #30
 800d50a:	bf58      	it	pl
 800d50c:	6963      	ldrpl	r3, [r4, #20]
 800d50e:	60a3      	str	r3, [r4, #8]
 800d510:	e7f4      	b.n	800d4fc <__swsetup_r+0xb0>
 800d512:	2000      	movs	r0, #0
 800d514:	e7f7      	b.n	800d506 <__swsetup_r+0xba>
 800d516:	bf00      	nop
 800d518:	200001f4 	.word	0x200001f4
 800d51c:	0800ed60 	.word	0x0800ed60
 800d520:	0800ed80 	.word	0x0800ed80
 800d524:	0800ed40 	.word	0x0800ed40

0800d528 <abort>:
 800d528:	b508      	push	{r3, lr}
 800d52a:	2006      	movs	r0, #6
 800d52c:	f000 fc2a 	bl	800dd84 <raise>
 800d530:	2001      	movs	r0, #1
 800d532:	f7f7 f9ed 	bl	8004910 <_exit>
	...

0800d538 <__env_lock>:
 800d538:	4801      	ldr	r0, [pc, #4]	; (800d540 <__env_lock+0x8>)
 800d53a:	f7fe b9b3 	b.w	800b8a4 <__retarget_lock_acquire_recursive>
 800d53e:	bf00      	nop
 800d540:	20005688 	.word	0x20005688

0800d544 <__env_unlock>:
 800d544:	4801      	ldr	r0, [pc, #4]	; (800d54c <__env_unlock+0x8>)
 800d546:	f7fe b9af 	b.w	800b8a8 <__retarget_lock_release_recursive>
 800d54a:	bf00      	nop
 800d54c:	20005688 	.word	0x20005688

0800d550 <__swhatbuf_r>:
 800d550:	b570      	push	{r4, r5, r6, lr}
 800d552:	460e      	mov	r6, r1
 800d554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d558:	2900      	cmp	r1, #0
 800d55a:	b096      	sub	sp, #88	; 0x58
 800d55c:	4614      	mov	r4, r2
 800d55e:	461d      	mov	r5, r3
 800d560:	da08      	bge.n	800d574 <__swhatbuf_r+0x24>
 800d562:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d566:	2200      	movs	r2, #0
 800d568:	602a      	str	r2, [r5, #0]
 800d56a:	061a      	lsls	r2, r3, #24
 800d56c:	d410      	bmi.n	800d590 <__swhatbuf_r+0x40>
 800d56e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d572:	e00e      	b.n	800d592 <__swhatbuf_r+0x42>
 800d574:	466a      	mov	r2, sp
 800d576:	f000 fc5b 	bl	800de30 <_fstat_r>
 800d57a:	2800      	cmp	r0, #0
 800d57c:	dbf1      	blt.n	800d562 <__swhatbuf_r+0x12>
 800d57e:	9a01      	ldr	r2, [sp, #4]
 800d580:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d584:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d588:	425a      	negs	r2, r3
 800d58a:	415a      	adcs	r2, r3
 800d58c:	602a      	str	r2, [r5, #0]
 800d58e:	e7ee      	b.n	800d56e <__swhatbuf_r+0x1e>
 800d590:	2340      	movs	r3, #64	; 0x40
 800d592:	2000      	movs	r0, #0
 800d594:	6023      	str	r3, [r4, #0]
 800d596:	b016      	add	sp, #88	; 0x58
 800d598:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d59c <__smakebuf_r>:
 800d59c:	898b      	ldrh	r3, [r1, #12]
 800d59e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d5a0:	079d      	lsls	r5, r3, #30
 800d5a2:	4606      	mov	r6, r0
 800d5a4:	460c      	mov	r4, r1
 800d5a6:	d507      	bpl.n	800d5b8 <__smakebuf_r+0x1c>
 800d5a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d5ac:	6023      	str	r3, [r4, #0]
 800d5ae:	6123      	str	r3, [r4, #16]
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	6163      	str	r3, [r4, #20]
 800d5b4:	b002      	add	sp, #8
 800d5b6:	bd70      	pop	{r4, r5, r6, pc}
 800d5b8:	ab01      	add	r3, sp, #4
 800d5ba:	466a      	mov	r2, sp
 800d5bc:	f7ff ffc8 	bl	800d550 <__swhatbuf_r>
 800d5c0:	9900      	ldr	r1, [sp, #0]
 800d5c2:	4605      	mov	r5, r0
 800d5c4:	4630      	mov	r0, r6
 800d5c6:	f7fe fa33 	bl	800ba30 <_malloc_r>
 800d5ca:	b948      	cbnz	r0, 800d5e0 <__smakebuf_r+0x44>
 800d5cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5d0:	059a      	lsls	r2, r3, #22
 800d5d2:	d4ef      	bmi.n	800d5b4 <__smakebuf_r+0x18>
 800d5d4:	f023 0303 	bic.w	r3, r3, #3
 800d5d8:	f043 0302 	orr.w	r3, r3, #2
 800d5dc:	81a3      	strh	r3, [r4, #12]
 800d5de:	e7e3      	b.n	800d5a8 <__smakebuf_r+0xc>
 800d5e0:	4b0d      	ldr	r3, [pc, #52]	; (800d618 <__smakebuf_r+0x7c>)
 800d5e2:	62b3      	str	r3, [r6, #40]	; 0x28
 800d5e4:	89a3      	ldrh	r3, [r4, #12]
 800d5e6:	6020      	str	r0, [r4, #0]
 800d5e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5ec:	81a3      	strh	r3, [r4, #12]
 800d5ee:	9b00      	ldr	r3, [sp, #0]
 800d5f0:	6163      	str	r3, [r4, #20]
 800d5f2:	9b01      	ldr	r3, [sp, #4]
 800d5f4:	6120      	str	r0, [r4, #16]
 800d5f6:	b15b      	cbz	r3, 800d610 <__smakebuf_r+0x74>
 800d5f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5fc:	4630      	mov	r0, r6
 800d5fe:	f000 fc29 	bl	800de54 <_isatty_r>
 800d602:	b128      	cbz	r0, 800d610 <__smakebuf_r+0x74>
 800d604:	89a3      	ldrh	r3, [r4, #12]
 800d606:	f023 0303 	bic.w	r3, r3, #3
 800d60a:	f043 0301 	orr.w	r3, r3, #1
 800d60e:	81a3      	strh	r3, [r4, #12]
 800d610:	89a0      	ldrh	r0, [r4, #12]
 800d612:	4305      	orrs	r5, r0
 800d614:	81a5      	strh	r5, [r4, #12]
 800d616:	e7cd      	b.n	800d5b4 <__smakebuf_r+0x18>
 800d618:	0800b491 	.word	0x0800b491

0800d61c <_realloc_r>:
 800d61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d620:	4680      	mov	r8, r0
 800d622:	4614      	mov	r4, r2
 800d624:	460e      	mov	r6, r1
 800d626:	b921      	cbnz	r1, 800d632 <_realloc_r+0x16>
 800d628:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d62c:	4611      	mov	r1, r2
 800d62e:	f7fe b9ff 	b.w	800ba30 <_malloc_r>
 800d632:	b92a      	cbnz	r2, 800d640 <_realloc_r+0x24>
 800d634:	f7fe f990 	bl	800b958 <_free_r>
 800d638:	4625      	mov	r5, r4
 800d63a:	4628      	mov	r0, r5
 800d63c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d640:	f000 fc18 	bl	800de74 <_malloc_usable_size_r>
 800d644:	4284      	cmp	r4, r0
 800d646:	4607      	mov	r7, r0
 800d648:	d802      	bhi.n	800d650 <_realloc_r+0x34>
 800d64a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d64e:	d812      	bhi.n	800d676 <_realloc_r+0x5a>
 800d650:	4621      	mov	r1, r4
 800d652:	4640      	mov	r0, r8
 800d654:	f7fe f9ec 	bl	800ba30 <_malloc_r>
 800d658:	4605      	mov	r5, r0
 800d65a:	2800      	cmp	r0, #0
 800d65c:	d0ed      	beq.n	800d63a <_realloc_r+0x1e>
 800d65e:	42bc      	cmp	r4, r7
 800d660:	4622      	mov	r2, r4
 800d662:	4631      	mov	r1, r6
 800d664:	bf28      	it	cs
 800d666:	463a      	movcs	r2, r7
 800d668:	f7fe f930 	bl	800b8cc <memcpy>
 800d66c:	4631      	mov	r1, r6
 800d66e:	4640      	mov	r0, r8
 800d670:	f7fe f972 	bl	800b958 <_free_r>
 800d674:	e7e1      	b.n	800d63a <_realloc_r+0x1e>
 800d676:	4635      	mov	r5, r6
 800d678:	e7df      	b.n	800d63a <_realloc_r+0x1e>

0800d67a <_sungetc_r>:
 800d67a:	b538      	push	{r3, r4, r5, lr}
 800d67c:	1c4b      	adds	r3, r1, #1
 800d67e:	4614      	mov	r4, r2
 800d680:	d103      	bne.n	800d68a <_sungetc_r+0x10>
 800d682:	f04f 35ff 	mov.w	r5, #4294967295
 800d686:	4628      	mov	r0, r5
 800d688:	bd38      	pop	{r3, r4, r5, pc}
 800d68a:	8993      	ldrh	r3, [r2, #12]
 800d68c:	f023 0320 	bic.w	r3, r3, #32
 800d690:	8193      	strh	r3, [r2, #12]
 800d692:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d694:	6852      	ldr	r2, [r2, #4]
 800d696:	b2cd      	uxtb	r5, r1
 800d698:	b18b      	cbz	r3, 800d6be <_sungetc_r+0x44>
 800d69a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d69c:	4293      	cmp	r3, r2
 800d69e:	dd08      	ble.n	800d6b2 <_sungetc_r+0x38>
 800d6a0:	6823      	ldr	r3, [r4, #0]
 800d6a2:	1e5a      	subs	r2, r3, #1
 800d6a4:	6022      	str	r2, [r4, #0]
 800d6a6:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d6aa:	6863      	ldr	r3, [r4, #4]
 800d6ac:	3301      	adds	r3, #1
 800d6ae:	6063      	str	r3, [r4, #4]
 800d6b0:	e7e9      	b.n	800d686 <_sungetc_r+0xc>
 800d6b2:	4621      	mov	r1, r4
 800d6b4:	f000 fb82 	bl	800ddbc <__submore>
 800d6b8:	2800      	cmp	r0, #0
 800d6ba:	d0f1      	beq.n	800d6a0 <_sungetc_r+0x26>
 800d6bc:	e7e1      	b.n	800d682 <_sungetc_r+0x8>
 800d6be:	6921      	ldr	r1, [r4, #16]
 800d6c0:	6823      	ldr	r3, [r4, #0]
 800d6c2:	b151      	cbz	r1, 800d6da <_sungetc_r+0x60>
 800d6c4:	4299      	cmp	r1, r3
 800d6c6:	d208      	bcs.n	800d6da <_sungetc_r+0x60>
 800d6c8:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800d6cc:	42a9      	cmp	r1, r5
 800d6ce:	d104      	bne.n	800d6da <_sungetc_r+0x60>
 800d6d0:	3b01      	subs	r3, #1
 800d6d2:	3201      	adds	r2, #1
 800d6d4:	6023      	str	r3, [r4, #0]
 800d6d6:	6062      	str	r2, [r4, #4]
 800d6d8:	e7d5      	b.n	800d686 <_sungetc_r+0xc>
 800d6da:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800d6de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d6e2:	6363      	str	r3, [r4, #52]	; 0x34
 800d6e4:	2303      	movs	r3, #3
 800d6e6:	63a3      	str	r3, [r4, #56]	; 0x38
 800d6e8:	4623      	mov	r3, r4
 800d6ea:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d6ee:	6023      	str	r3, [r4, #0]
 800d6f0:	2301      	movs	r3, #1
 800d6f2:	e7dc      	b.n	800d6ae <_sungetc_r+0x34>

0800d6f4 <__ssrefill_r>:
 800d6f4:	b510      	push	{r4, lr}
 800d6f6:	460c      	mov	r4, r1
 800d6f8:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d6fa:	b169      	cbz	r1, 800d718 <__ssrefill_r+0x24>
 800d6fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d700:	4299      	cmp	r1, r3
 800d702:	d001      	beq.n	800d708 <__ssrefill_r+0x14>
 800d704:	f7fe f928 	bl	800b958 <_free_r>
 800d708:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d70a:	6063      	str	r3, [r4, #4]
 800d70c:	2000      	movs	r0, #0
 800d70e:	6360      	str	r0, [r4, #52]	; 0x34
 800d710:	b113      	cbz	r3, 800d718 <__ssrefill_r+0x24>
 800d712:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d714:	6023      	str	r3, [r4, #0]
 800d716:	bd10      	pop	{r4, pc}
 800d718:	6923      	ldr	r3, [r4, #16]
 800d71a:	6023      	str	r3, [r4, #0]
 800d71c:	2300      	movs	r3, #0
 800d71e:	6063      	str	r3, [r4, #4]
 800d720:	89a3      	ldrh	r3, [r4, #12]
 800d722:	f043 0320 	orr.w	r3, r3, #32
 800d726:	81a3      	strh	r3, [r4, #12]
 800d728:	f04f 30ff 	mov.w	r0, #4294967295
 800d72c:	e7f3      	b.n	800d716 <__ssrefill_r+0x22>
	...

0800d730 <__ssvfiscanf_r>:
 800d730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d734:	460c      	mov	r4, r1
 800d736:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800d73a:	2100      	movs	r1, #0
 800d73c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800d740:	49a6      	ldr	r1, [pc, #664]	; (800d9dc <__ssvfiscanf_r+0x2ac>)
 800d742:	91a0      	str	r1, [sp, #640]	; 0x280
 800d744:	f10d 0804 	add.w	r8, sp, #4
 800d748:	49a5      	ldr	r1, [pc, #660]	; (800d9e0 <__ssvfiscanf_r+0x2b0>)
 800d74a:	4fa6      	ldr	r7, [pc, #664]	; (800d9e4 <__ssvfiscanf_r+0x2b4>)
 800d74c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800d9e8 <__ssvfiscanf_r+0x2b8>
 800d750:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800d754:	4606      	mov	r6, r0
 800d756:	91a1      	str	r1, [sp, #644]	; 0x284
 800d758:	9300      	str	r3, [sp, #0]
 800d75a:	7813      	ldrb	r3, [r2, #0]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	f000 815a 	beq.w	800da16 <__ssvfiscanf_r+0x2e6>
 800d762:	5dd9      	ldrb	r1, [r3, r7]
 800d764:	f011 0108 	ands.w	r1, r1, #8
 800d768:	f102 0501 	add.w	r5, r2, #1
 800d76c:	d019      	beq.n	800d7a2 <__ssvfiscanf_r+0x72>
 800d76e:	6863      	ldr	r3, [r4, #4]
 800d770:	2b00      	cmp	r3, #0
 800d772:	dd0f      	ble.n	800d794 <__ssvfiscanf_r+0x64>
 800d774:	6823      	ldr	r3, [r4, #0]
 800d776:	781a      	ldrb	r2, [r3, #0]
 800d778:	5cba      	ldrb	r2, [r7, r2]
 800d77a:	0712      	lsls	r2, r2, #28
 800d77c:	d401      	bmi.n	800d782 <__ssvfiscanf_r+0x52>
 800d77e:	462a      	mov	r2, r5
 800d780:	e7eb      	b.n	800d75a <__ssvfiscanf_r+0x2a>
 800d782:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d784:	3201      	adds	r2, #1
 800d786:	9245      	str	r2, [sp, #276]	; 0x114
 800d788:	6862      	ldr	r2, [r4, #4]
 800d78a:	3301      	adds	r3, #1
 800d78c:	3a01      	subs	r2, #1
 800d78e:	6062      	str	r2, [r4, #4]
 800d790:	6023      	str	r3, [r4, #0]
 800d792:	e7ec      	b.n	800d76e <__ssvfiscanf_r+0x3e>
 800d794:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d796:	4621      	mov	r1, r4
 800d798:	4630      	mov	r0, r6
 800d79a:	4798      	blx	r3
 800d79c:	2800      	cmp	r0, #0
 800d79e:	d0e9      	beq.n	800d774 <__ssvfiscanf_r+0x44>
 800d7a0:	e7ed      	b.n	800d77e <__ssvfiscanf_r+0x4e>
 800d7a2:	2b25      	cmp	r3, #37	; 0x25
 800d7a4:	d012      	beq.n	800d7cc <__ssvfiscanf_r+0x9c>
 800d7a6:	469a      	mov	sl, r3
 800d7a8:	6863      	ldr	r3, [r4, #4]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	f340 8091 	ble.w	800d8d2 <__ssvfiscanf_r+0x1a2>
 800d7b0:	6822      	ldr	r2, [r4, #0]
 800d7b2:	7813      	ldrb	r3, [r2, #0]
 800d7b4:	4553      	cmp	r3, sl
 800d7b6:	f040 812e 	bne.w	800da16 <__ssvfiscanf_r+0x2e6>
 800d7ba:	6863      	ldr	r3, [r4, #4]
 800d7bc:	3b01      	subs	r3, #1
 800d7be:	6063      	str	r3, [r4, #4]
 800d7c0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800d7c2:	3201      	adds	r2, #1
 800d7c4:	3301      	adds	r3, #1
 800d7c6:	6022      	str	r2, [r4, #0]
 800d7c8:	9345      	str	r3, [sp, #276]	; 0x114
 800d7ca:	e7d8      	b.n	800d77e <__ssvfiscanf_r+0x4e>
 800d7cc:	9141      	str	r1, [sp, #260]	; 0x104
 800d7ce:	9143      	str	r1, [sp, #268]	; 0x10c
 800d7d0:	7853      	ldrb	r3, [r2, #1]
 800d7d2:	2b2a      	cmp	r3, #42	; 0x2a
 800d7d4:	bf02      	ittt	eq
 800d7d6:	2310      	moveq	r3, #16
 800d7d8:	1c95      	addeq	r5, r2, #2
 800d7da:	9341      	streq	r3, [sp, #260]	; 0x104
 800d7dc:	220a      	movs	r2, #10
 800d7de:	46aa      	mov	sl, r5
 800d7e0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800d7e4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800d7e8:	2b09      	cmp	r3, #9
 800d7ea:	d91d      	bls.n	800d828 <__ssvfiscanf_r+0xf8>
 800d7ec:	487e      	ldr	r0, [pc, #504]	; (800d9e8 <__ssvfiscanf_r+0x2b8>)
 800d7ee:	2203      	movs	r2, #3
 800d7f0:	f7f2 fd2e 	bl	8000250 <memchr>
 800d7f4:	b140      	cbz	r0, 800d808 <__ssvfiscanf_r+0xd8>
 800d7f6:	2301      	movs	r3, #1
 800d7f8:	eba0 0009 	sub.w	r0, r0, r9
 800d7fc:	fa03 f000 	lsl.w	r0, r3, r0
 800d800:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d802:	4318      	orrs	r0, r3
 800d804:	9041      	str	r0, [sp, #260]	; 0x104
 800d806:	4655      	mov	r5, sl
 800d808:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d80c:	2b78      	cmp	r3, #120	; 0x78
 800d80e:	d806      	bhi.n	800d81e <__ssvfiscanf_r+0xee>
 800d810:	2b57      	cmp	r3, #87	; 0x57
 800d812:	d810      	bhi.n	800d836 <__ssvfiscanf_r+0x106>
 800d814:	2b25      	cmp	r3, #37	; 0x25
 800d816:	d0c6      	beq.n	800d7a6 <__ssvfiscanf_r+0x76>
 800d818:	d856      	bhi.n	800d8c8 <__ssvfiscanf_r+0x198>
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d064      	beq.n	800d8e8 <__ssvfiscanf_r+0x1b8>
 800d81e:	2303      	movs	r3, #3
 800d820:	9347      	str	r3, [sp, #284]	; 0x11c
 800d822:	230a      	movs	r3, #10
 800d824:	9342      	str	r3, [sp, #264]	; 0x108
 800d826:	e071      	b.n	800d90c <__ssvfiscanf_r+0x1dc>
 800d828:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800d82a:	fb02 1103 	mla	r1, r2, r3, r1
 800d82e:	3930      	subs	r1, #48	; 0x30
 800d830:	9143      	str	r1, [sp, #268]	; 0x10c
 800d832:	4655      	mov	r5, sl
 800d834:	e7d3      	b.n	800d7de <__ssvfiscanf_r+0xae>
 800d836:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800d83a:	2a20      	cmp	r2, #32
 800d83c:	d8ef      	bhi.n	800d81e <__ssvfiscanf_r+0xee>
 800d83e:	a101      	add	r1, pc, #4	; (adr r1, 800d844 <__ssvfiscanf_r+0x114>)
 800d840:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d844:	0800d8f7 	.word	0x0800d8f7
 800d848:	0800d81f 	.word	0x0800d81f
 800d84c:	0800d81f 	.word	0x0800d81f
 800d850:	0800d955 	.word	0x0800d955
 800d854:	0800d81f 	.word	0x0800d81f
 800d858:	0800d81f 	.word	0x0800d81f
 800d85c:	0800d81f 	.word	0x0800d81f
 800d860:	0800d81f 	.word	0x0800d81f
 800d864:	0800d81f 	.word	0x0800d81f
 800d868:	0800d81f 	.word	0x0800d81f
 800d86c:	0800d81f 	.word	0x0800d81f
 800d870:	0800d96b 	.word	0x0800d96b
 800d874:	0800d941 	.word	0x0800d941
 800d878:	0800d8cf 	.word	0x0800d8cf
 800d87c:	0800d8cf 	.word	0x0800d8cf
 800d880:	0800d8cf 	.word	0x0800d8cf
 800d884:	0800d81f 	.word	0x0800d81f
 800d888:	0800d945 	.word	0x0800d945
 800d88c:	0800d81f 	.word	0x0800d81f
 800d890:	0800d81f 	.word	0x0800d81f
 800d894:	0800d81f 	.word	0x0800d81f
 800d898:	0800d81f 	.word	0x0800d81f
 800d89c:	0800d97b 	.word	0x0800d97b
 800d8a0:	0800d94d 	.word	0x0800d94d
 800d8a4:	0800d8ef 	.word	0x0800d8ef
 800d8a8:	0800d81f 	.word	0x0800d81f
 800d8ac:	0800d81f 	.word	0x0800d81f
 800d8b0:	0800d977 	.word	0x0800d977
 800d8b4:	0800d81f 	.word	0x0800d81f
 800d8b8:	0800d941 	.word	0x0800d941
 800d8bc:	0800d81f 	.word	0x0800d81f
 800d8c0:	0800d81f 	.word	0x0800d81f
 800d8c4:	0800d8f7 	.word	0x0800d8f7
 800d8c8:	3b45      	subs	r3, #69	; 0x45
 800d8ca:	2b02      	cmp	r3, #2
 800d8cc:	d8a7      	bhi.n	800d81e <__ssvfiscanf_r+0xee>
 800d8ce:	2305      	movs	r3, #5
 800d8d0:	e01b      	b.n	800d90a <__ssvfiscanf_r+0x1da>
 800d8d2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d8d4:	4621      	mov	r1, r4
 800d8d6:	4630      	mov	r0, r6
 800d8d8:	4798      	blx	r3
 800d8da:	2800      	cmp	r0, #0
 800d8dc:	f43f af68 	beq.w	800d7b0 <__ssvfiscanf_r+0x80>
 800d8e0:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d8e2:	2800      	cmp	r0, #0
 800d8e4:	f040 808d 	bne.w	800da02 <__ssvfiscanf_r+0x2d2>
 800d8e8:	f04f 30ff 	mov.w	r0, #4294967295
 800d8ec:	e08f      	b.n	800da0e <__ssvfiscanf_r+0x2de>
 800d8ee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d8f0:	f042 0220 	orr.w	r2, r2, #32
 800d8f4:	9241      	str	r2, [sp, #260]	; 0x104
 800d8f6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d8f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d8fc:	9241      	str	r2, [sp, #260]	; 0x104
 800d8fe:	2210      	movs	r2, #16
 800d900:	2b6f      	cmp	r3, #111	; 0x6f
 800d902:	9242      	str	r2, [sp, #264]	; 0x108
 800d904:	bf34      	ite	cc
 800d906:	2303      	movcc	r3, #3
 800d908:	2304      	movcs	r3, #4
 800d90a:	9347      	str	r3, [sp, #284]	; 0x11c
 800d90c:	6863      	ldr	r3, [r4, #4]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	dd42      	ble.n	800d998 <__ssvfiscanf_r+0x268>
 800d912:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d914:	0659      	lsls	r1, r3, #25
 800d916:	d404      	bmi.n	800d922 <__ssvfiscanf_r+0x1f2>
 800d918:	6823      	ldr	r3, [r4, #0]
 800d91a:	781a      	ldrb	r2, [r3, #0]
 800d91c:	5cba      	ldrb	r2, [r7, r2]
 800d91e:	0712      	lsls	r2, r2, #28
 800d920:	d441      	bmi.n	800d9a6 <__ssvfiscanf_r+0x276>
 800d922:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800d924:	2b02      	cmp	r3, #2
 800d926:	dc50      	bgt.n	800d9ca <__ssvfiscanf_r+0x29a>
 800d928:	466b      	mov	r3, sp
 800d92a:	4622      	mov	r2, r4
 800d92c:	a941      	add	r1, sp, #260	; 0x104
 800d92e:	4630      	mov	r0, r6
 800d930:	f000 f876 	bl	800da20 <_scanf_chars>
 800d934:	2801      	cmp	r0, #1
 800d936:	d06e      	beq.n	800da16 <__ssvfiscanf_r+0x2e6>
 800d938:	2802      	cmp	r0, #2
 800d93a:	f47f af20 	bne.w	800d77e <__ssvfiscanf_r+0x4e>
 800d93e:	e7cf      	b.n	800d8e0 <__ssvfiscanf_r+0x1b0>
 800d940:	220a      	movs	r2, #10
 800d942:	e7dd      	b.n	800d900 <__ssvfiscanf_r+0x1d0>
 800d944:	2300      	movs	r3, #0
 800d946:	9342      	str	r3, [sp, #264]	; 0x108
 800d948:	2303      	movs	r3, #3
 800d94a:	e7de      	b.n	800d90a <__ssvfiscanf_r+0x1da>
 800d94c:	2308      	movs	r3, #8
 800d94e:	9342      	str	r3, [sp, #264]	; 0x108
 800d950:	2304      	movs	r3, #4
 800d952:	e7da      	b.n	800d90a <__ssvfiscanf_r+0x1da>
 800d954:	4629      	mov	r1, r5
 800d956:	4640      	mov	r0, r8
 800d958:	f000 f9b4 	bl	800dcc4 <__sccl>
 800d95c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d95e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d962:	9341      	str	r3, [sp, #260]	; 0x104
 800d964:	4605      	mov	r5, r0
 800d966:	2301      	movs	r3, #1
 800d968:	e7cf      	b.n	800d90a <__ssvfiscanf_r+0x1da>
 800d96a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d96c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d970:	9341      	str	r3, [sp, #260]	; 0x104
 800d972:	2300      	movs	r3, #0
 800d974:	e7c9      	b.n	800d90a <__ssvfiscanf_r+0x1da>
 800d976:	2302      	movs	r3, #2
 800d978:	e7c7      	b.n	800d90a <__ssvfiscanf_r+0x1da>
 800d97a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800d97c:	06c3      	lsls	r3, r0, #27
 800d97e:	f53f aefe 	bmi.w	800d77e <__ssvfiscanf_r+0x4e>
 800d982:	9b00      	ldr	r3, [sp, #0]
 800d984:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d986:	1d19      	adds	r1, r3, #4
 800d988:	9100      	str	r1, [sp, #0]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	f010 0f01 	tst.w	r0, #1
 800d990:	bf14      	ite	ne
 800d992:	801a      	strhne	r2, [r3, #0]
 800d994:	601a      	streq	r2, [r3, #0]
 800d996:	e6f2      	b.n	800d77e <__ssvfiscanf_r+0x4e>
 800d998:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d99a:	4621      	mov	r1, r4
 800d99c:	4630      	mov	r0, r6
 800d99e:	4798      	blx	r3
 800d9a0:	2800      	cmp	r0, #0
 800d9a2:	d0b6      	beq.n	800d912 <__ssvfiscanf_r+0x1e2>
 800d9a4:	e79c      	b.n	800d8e0 <__ssvfiscanf_r+0x1b0>
 800d9a6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d9a8:	3201      	adds	r2, #1
 800d9aa:	9245      	str	r2, [sp, #276]	; 0x114
 800d9ac:	6862      	ldr	r2, [r4, #4]
 800d9ae:	3a01      	subs	r2, #1
 800d9b0:	2a00      	cmp	r2, #0
 800d9b2:	6062      	str	r2, [r4, #4]
 800d9b4:	dd02      	ble.n	800d9bc <__ssvfiscanf_r+0x28c>
 800d9b6:	3301      	adds	r3, #1
 800d9b8:	6023      	str	r3, [r4, #0]
 800d9ba:	e7ad      	b.n	800d918 <__ssvfiscanf_r+0x1e8>
 800d9bc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d9be:	4621      	mov	r1, r4
 800d9c0:	4630      	mov	r0, r6
 800d9c2:	4798      	blx	r3
 800d9c4:	2800      	cmp	r0, #0
 800d9c6:	d0a7      	beq.n	800d918 <__ssvfiscanf_r+0x1e8>
 800d9c8:	e78a      	b.n	800d8e0 <__ssvfiscanf_r+0x1b0>
 800d9ca:	2b04      	cmp	r3, #4
 800d9cc:	dc0e      	bgt.n	800d9ec <__ssvfiscanf_r+0x2bc>
 800d9ce:	466b      	mov	r3, sp
 800d9d0:	4622      	mov	r2, r4
 800d9d2:	a941      	add	r1, sp, #260	; 0x104
 800d9d4:	4630      	mov	r0, r6
 800d9d6:	f000 f87d 	bl	800dad4 <_scanf_i>
 800d9da:	e7ab      	b.n	800d934 <__ssvfiscanf_r+0x204>
 800d9dc:	0800d67b 	.word	0x0800d67b
 800d9e0:	0800d6f5 	.word	0x0800d6f5
 800d9e4:	0800f003 	.word	0x0800f003
 800d9e8:	0800f109 	.word	0x0800f109
 800d9ec:	4b0b      	ldr	r3, [pc, #44]	; (800da1c <__ssvfiscanf_r+0x2ec>)
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	f43f aec5 	beq.w	800d77e <__ssvfiscanf_r+0x4e>
 800d9f4:	466b      	mov	r3, sp
 800d9f6:	4622      	mov	r2, r4
 800d9f8:	a941      	add	r1, sp, #260	; 0x104
 800d9fa:	4630      	mov	r0, r6
 800d9fc:	f3af 8000 	nop.w
 800da00:	e798      	b.n	800d934 <__ssvfiscanf_r+0x204>
 800da02:	89a3      	ldrh	r3, [r4, #12]
 800da04:	f013 0f40 	tst.w	r3, #64	; 0x40
 800da08:	bf18      	it	ne
 800da0a:	f04f 30ff 	movne.w	r0, #4294967295
 800da0e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800da12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da16:	9844      	ldr	r0, [sp, #272]	; 0x110
 800da18:	e7f9      	b.n	800da0e <__ssvfiscanf_r+0x2de>
 800da1a:	bf00      	nop
 800da1c:	00000000 	.word	0x00000000

0800da20 <_scanf_chars>:
 800da20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da24:	4615      	mov	r5, r2
 800da26:	688a      	ldr	r2, [r1, #8]
 800da28:	4680      	mov	r8, r0
 800da2a:	460c      	mov	r4, r1
 800da2c:	b932      	cbnz	r2, 800da3c <_scanf_chars+0x1c>
 800da2e:	698a      	ldr	r2, [r1, #24]
 800da30:	2a00      	cmp	r2, #0
 800da32:	bf0c      	ite	eq
 800da34:	2201      	moveq	r2, #1
 800da36:	f04f 32ff 	movne.w	r2, #4294967295
 800da3a:	608a      	str	r2, [r1, #8]
 800da3c:	6822      	ldr	r2, [r4, #0]
 800da3e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800dad0 <_scanf_chars+0xb0>
 800da42:	06d1      	lsls	r1, r2, #27
 800da44:	bf5f      	itttt	pl
 800da46:	681a      	ldrpl	r2, [r3, #0]
 800da48:	1d11      	addpl	r1, r2, #4
 800da4a:	6019      	strpl	r1, [r3, #0]
 800da4c:	6816      	ldrpl	r6, [r2, #0]
 800da4e:	2700      	movs	r7, #0
 800da50:	69a0      	ldr	r0, [r4, #24]
 800da52:	b188      	cbz	r0, 800da78 <_scanf_chars+0x58>
 800da54:	2801      	cmp	r0, #1
 800da56:	d107      	bne.n	800da68 <_scanf_chars+0x48>
 800da58:	682a      	ldr	r2, [r5, #0]
 800da5a:	7811      	ldrb	r1, [r2, #0]
 800da5c:	6962      	ldr	r2, [r4, #20]
 800da5e:	5c52      	ldrb	r2, [r2, r1]
 800da60:	b952      	cbnz	r2, 800da78 <_scanf_chars+0x58>
 800da62:	2f00      	cmp	r7, #0
 800da64:	d031      	beq.n	800daca <_scanf_chars+0xaa>
 800da66:	e022      	b.n	800daae <_scanf_chars+0x8e>
 800da68:	2802      	cmp	r0, #2
 800da6a:	d120      	bne.n	800daae <_scanf_chars+0x8e>
 800da6c:	682b      	ldr	r3, [r5, #0]
 800da6e:	781b      	ldrb	r3, [r3, #0]
 800da70:	f813 3009 	ldrb.w	r3, [r3, r9]
 800da74:	071b      	lsls	r3, r3, #28
 800da76:	d41a      	bmi.n	800daae <_scanf_chars+0x8e>
 800da78:	6823      	ldr	r3, [r4, #0]
 800da7a:	06da      	lsls	r2, r3, #27
 800da7c:	bf5e      	ittt	pl
 800da7e:	682b      	ldrpl	r3, [r5, #0]
 800da80:	781b      	ldrbpl	r3, [r3, #0]
 800da82:	f806 3b01 	strbpl.w	r3, [r6], #1
 800da86:	682a      	ldr	r2, [r5, #0]
 800da88:	686b      	ldr	r3, [r5, #4]
 800da8a:	3201      	adds	r2, #1
 800da8c:	602a      	str	r2, [r5, #0]
 800da8e:	68a2      	ldr	r2, [r4, #8]
 800da90:	3b01      	subs	r3, #1
 800da92:	3a01      	subs	r2, #1
 800da94:	606b      	str	r3, [r5, #4]
 800da96:	3701      	adds	r7, #1
 800da98:	60a2      	str	r2, [r4, #8]
 800da9a:	b142      	cbz	r2, 800daae <_scanf_chars+0x8e>
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	dcd7      	bgt.n	800da50 <_scanf_chars+0x30>
 800daa0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800daa4:	4629      	mov	r1, r5
 800daa6:	4640      	mov	r0, r8
 800daa8:	4798      	blx	r3
 800daaa:	2800      	cmp	r0, #0
 800daac:	d0d0      	beq.n	800da50 <_scanf_chars+0x30>
 800daae:	6823      	ldr	r3, [r4, #0]
 800dab0:	f013 0310 	ands.w	r3, r3, #16
 800dab4:	d105      	bne.n	800dac2 <_scanf_chars+0xa2>
 800dab6:	68e2      	ldr	r2, [r4, #12]
 800dab8:	3201      	adds	r2, #1
 800daba:	60e2      	str	r2, [r4, #12]
 800dabc:	69a2      	ldr	r2, [r4, #24]
 800dabe:	b102      	cbz	r2, 800dac2 <_scanf_chars+0xa2>
 800dac0:	7033      	strb	r3, [r6, #0]
 800dac2:	6923      	ldr	r3, [r4, #16]
 800dac4:	443b      	add	r3, r7
 800dac6:	6123      	str	r3, [r4, #16]
 800dac8:	2000      	movs	r0, #0
 800daca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dace:	bf00      	nop
 800dad0:	0800f003 	.word	0x0800f003

0800dad4 <_scanf_i>:
 800dad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dad8:	4698      	mov	r8, r3
 800dada:	4b76      	ldr	r3, [pc, #472]	; (800dcb4 <_scanf_i+0x1e0>)
 800dadc:	460c      	mov	r4, r1
 800dade:	4682      	mov	sl, r0
 800dae0:	4616      	mov	r6, r2
 800dae2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dae6:	b087      	sub	sp, #28
 800dae8:	ab03      	add	r3, sp, #12
 800daea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800daee:	4b72      	ldr	r3, [pc, #456]	; (800dcb8 <_scanf_i+0x1e4>)
 800daf0:	69a1      	ldr	r1, [r4, #24]
 800daf2:	4a72      	ldr	r2, [pc, #456]	; (800dcbc <_scanf_i+0x1e8>)
 800daf4:	2903      	cmp	r1, #3
 800daf6:	bf18      	it	ne
 800daf8:	461a      	movne	r2, r3
 800dafa:	68a3      	ldr	r3, [r4, #8]
 800dafc:	9201      	str	r2, [sp, #4]
 800dafe:	1e5a      	subs	r2, r3, #1
 800db00:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800db04:	bf88      	it	hi
 800db06:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800db0a:	4627      	mov	r7, r4
 800db0c:	bf82      	ittt	hi
 800db0e:	eb03 0905 	addhi.w	r9, r3, r5
 800db12:	f240 135d 	movwhi	r3, #349	; 0x15d
 800db16:	60a3      	strhi	r3, [r4, #8]
 800db18:	f857 3b1c 	ldr.w	r3, [r7], #28
 800db1c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800db20:	bf98      	it	ls
 800db22:	f04f 0900 	movls.w	r9, #0
 800db26:	6023      	str	r3, [r4, #0]
 800db28:	463d      	mov	r5, r7
 800db2a:	f04f 0b00 	mov.w	fp, #0
 800db2e:	6831      	ldr	r1, [r6, #0]
 800db30:	ab03      	add	r3, sp, #12
 800db32:	7809      	ldrb	r1, [r1, #0]
 800db34:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800db38:	2202      	movs	r2, #2
 800db3a:	f7f2 fb89 	bl	8000250 <memchr>
 800db3e:	b328      	cbz	r0, 800db8c <_scanf_i+0xb8>
 800db40:	f1bb 0f01 	cmp.w	fp, #1
 800db44:	d159      	bne.n	800dbfa <_scanf_i+0x126>
 800db46:	6862      	ldr	r2, [r4, #4]
 800db48:	b92a      	cbnz	r2, 800db56 <_scanf_i+0x82>
 800db4a:	6822      	ldr	r2, [r4, #0]
 800db4c:	2308      	movs	r3, #8
 800db4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800db52:	6063      	str	r3, [r4, #4]
 800db54:	6022      	str	r2, [r4, #0]
 800db56:	6822      	ldr	r2, [r4, #0]
 800db58:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800db5c:	6022      	str	r2, [r4, #0]
 800db5e:	68a2      	ldr	r2, [r4, #8]
 800db60:	1e51      	subs	r1, r2, #1
 800db62:	60a1      	str	r1, [r4, #8]
 800db64:	b192      	cbz	r2, 800db8c <_scanf_i+0xb8>
 800db66:	6832      	ldr	r2, [r6, #0]
 800db68:	1c51      	adds	r1, r2, #1
 800db6a:	6031      	str	r1, [r6, #0]
 800db6c:	7812      	ldrb	r2, [r2, #0]
 800db6e:	f805 2b01 	strb.w	r2, [r5], #1
 800db72:	6872      	ldr	r2, [r6, #4]
 800db74:	3a01      	subs	r2, #1
 800db76:	2a00      	cmp	r2, #0
 800db78:	6072      	str	r2, [r6, #4]
 800db7a:	dc07      	bgt.n	800db8c <_scanf_i+0xb8>
 800db7c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800db80:	4631      	mov	r1, r6
 800db82:	4650      	mov	r0, sl
 800db84:	4790      	blx	r2
 800db86:	2800      	cmp	r0, #0
 800db88:	f040 8085 	bne.w	800dc96 <_scanf_i+0x1c2>
 800db8c:	f10b 0b01 	add.w	fp, fp, #1
 800db90:	f1bb 0f03 	cmp.w	fp, #3
 800db94:	d1cb      	bne.n	800db2e <_scanf_i+0x5a>
 800db96:	6863      	ldr	r3, [r4, #4]
 800db98:	b90b      	cbnz	r3, 800db9e <_scanf_i+0xca>
 800db9a:	230a      	movs	r3, #10
 800db9c:	6063      	str	r3, [r4, #4]
 800db9e:	6863      	ldr	r3, [r4, #4]
 800dba0:	4947      	ldr	r1, [pc, #284]	; (800dcc0 <_scanf_i+0x1ec>)
 800dba2:	6960      	ldr	r0, [r4, #20]
 800dba4:	1ac9      	subs	r1, r1, r3
 800dba6:	f000 f88d 	bl	800dcc4 <__sccl>
 800dbaa:	f04f 0b00 	mov.w	fp, #0
 800dbae:	68a3      	ldr	r3, [r4, #8]
 800dbb0:	6822      	ldr	r2, [r4, #0]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d03d      	beq.n	800dc32 <_scanf_i+0x15e>
 800dbb6:	6831      	ldr	r1, [r6, #0]
 800dbb8:	6960      	ldr	r0, [r4, #20]
 800dbba:	f891 c000 	ldrb.w	ip, [r1]
 800dbbe:	f810 000c 	ldrb.w	r0, [r0, ip]
 800dbc2:	2800      	cmp	r0, #0
 800dbc4:	d035      	beq.n	800dc32 <_scanf_i+0x15e>
 800dbc6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800dbca:	d124      	bne.n	800dc16 <_scanf_i+0x142>
 800dbcc:	0510      	lsls	r0, r2, #20
 800dbce:	d522      	bpl.n	800dc16 <_scanf_i+0x142>
 800dbd0:	f10b 0b01 	add.w	fp, fp, #1
 800dbd4:	f1b9 0f00 	cmp.w	r9, #0
 800dbd8:	d003      	beq.n	800dbe2 <_scanf_i+0x10e>
 800dbda:	3301      	adds	r3, #1
 800dbdc:	f109 39ff 	add.w	r9, r9, #4294967295
 800dbe0:	60a3      	str	r3, [r4, #8]
 800dbe2:	6873      	ldr	r3, [r6, #4]
 800dbe4:	3b01      	subs	r3, #1
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	6073      	str	r3, [r6, #4]
 800dbea:	dd1b      	ble.n	800dc24 <_scanf_i+0x150>
 800dbec:	6833      	ldr	r3, [r6, #0]
 800dbee:	3301      	adds	r3, #1
 800dbf0:	6033      	str	r3, [r6, #0]
 800dbf2:	68a3      	ldr	r3, [r4, #8]
 800dbf4:	3b01      	subs	r3, #1
 800dbf6:	60a3      	str	r3, [r4, #8]
 800dbf8:	e7d9      	b.n	800dbae <_scanf_i+0xda>
 800dbfa:	f1bb 0f02 	cmp.w	fp, #2
 800dbfe:	d1ae      	bne.n	800db5e <_scanf_i+0x8a>
 800dc00:	6822      	ldr	r2, [r4, #0]
 800dc02:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800dc06:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800dc0a:	d1bf      	bne.n	800db8c <_scanf_i+0xb8>
 800dc0c:	2310      	movs	r3, #16
 800dc0e:	6063      	str	r3, [r4, #4]
 800dc10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dc14:	e7a2      	b.n	800db5c <_scanf_i+0x88>
 800dc16:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800dc1a:	6022      	str	r2, [r4, #0]
 800dc1c:	780b      	ldrb	r3, [r1, #0]
 800dc1e:	f805 3b01 	strb.w	r3, [r5], #1
 800dc22:	e7de      	b.n	800dbe2 <_scanf_i+0x10e>
 800dc24:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800dc28:	4631      	mov	r1, r6
 800dc2a:	4650      	mov	r0, sl
 800dc2c:	4798      	blx	r3
 800dc2e:	2800      	cmp	r0, #0
 800dc30:	d0df      	beq.n	800dbf2 <_scanf_i+0x11e>
 800dc32:	6823      	ldr	r3, [r4, #0]
 800dc34:	05db      	lsls	r3, r3, #23
 800dc36:	d50d      	bpl.n	800dc54 <_scanf_i+0x180>
 800dc38:	42bd      	cmp	r5, r7
 800dc3a:	d909      	bls.n	800dc50 <_scanf_i+0x17c>
 800dc3c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800dc40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dc44:	4632      	mov	r2, r6
 800dc46:	4650      	mov	r0, sl
 800dc48:	4798      	blx	r3
 800dc4a:	f105 39ff 	add.w	r9, r5, #4294967295
 800dc4e:	464d      	mov	r5, r9
 800dc50:	42bd      	cmp	r5, r7
 800dc52:	d02d      	beq.n	800dcb0 <_scanf_i+0x1dc>
 800dc54:	6822      	ldr	r2, [r4, #0]
 800dc56:	f012 0210 	ands.w	r2, r2, #16
 800dc5a:	d113      	bne.n	800dc84 <_scanf_i+0x1b0>
 800dc5c:	702a      	strb	r2, [r5, #0]
 800dc5e:	6863      	ldr	r3, [r4, #4]
 800dc60:	9e01      	ldr	r6, [sp, #4]
 800dc62:	4639      	mov	r1, r7
 800dc64:	4650      	mov	r0, sl
 800dc66:	47b0      	blx	r6
 800dc68:	6821      	ldr	r1, [r4, #0]
 800dc6a:	f8d8 3000 	ldr.w	r3, [r8]
 800dc6e:	f011 0f20 	tst.w	r1, #32
 800dc72:	d013      	beq.n	800dc9c <_scanf_i+0x1c8>
 800dc74:	1d1a      	adds	r2, r3, #4
 800dc76:	f8c8 2000 	str.w	r2, [r8]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	6018      	str	r0, [r3, #0]
 800dc7e:	68e3      	ldr	r3, [r4, #12]
 800dc80:	3301      	adds	r3, #1
 800dc82:	60e3      	str	r3, [r4, #12]
 800dc84:	1bed      	subs	r5, r5, r7
 800dc86:	44ab      	add	fp, r5
 800dc88:	6925      	ldr	r5, [r4, #16]
 800dc8a:	445d      	add	r5, fp
 800dc8c:	6125      	str	r5, [r4, #16]
 800dc8e:	2000      	movs	r0, #0
 800dc90:	b007      	add	sp, #28
 800dc92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc96:	f04f 0b00 	mov.w	fp, #0
 800dc9a:	e7ca      	b.n	800dc32 <_scanf_i+0x15e>
 800dc9c:	1d1a      	adds	r2, r3, #4
 800dc9e:	f8c8 2000 	str.w	r2, [r8]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	f011 0f01 	tst.w	r1, #1
 800dca8:	bf14      	ite	ne
 800dcaa:	8018      	strhne	r0, [r3, #0]
 800dcac:	6018      	streq	r0, [r3, #0]
 800dcae:	e7e6      	b.n	800dc7e <_scanf_i+0x1aa>
 800dcb0:	2001      	movs	r0, #1
 800dcb2:	e7ed      	b.n	800dc90 <_scanf_i+0x1bc>
 800dcb4:	0800e918 	.word	0x0800e918
 800dcb8:	0800d391 	.word	0x0800d391
 800dcbc:	0800bf95 	.word	0x0800bf95
 800dcc0:	0800f14f 	.word	0x0800f14f

0800dcc4 <__sccl>:
 800dcc4:	b570      	push	{r4, r5, r6, lr}
 800dcc6:	780b      	ldrb	r3, [r1, #0]
 800dcc8:	4604      	mov	r4, r0
 800dcca:	2b5e      	cmp	r3, #94	; 0x5e
 800dccc:	bf0b      	itete	eq
 800dcce:	784b      	ldrbeq	r3, [r1, #1]
 800dcd0:	1c48      	addne	r0, r1, #1
 800dcd2:	1c88      	addeq	r0, r1, #2
 800dcd4:	2200      	movne	r2, #0
 800dcd6:	bf08      	it	eq
 800dcd8:	2201      	moveq	r2, #1
 800dcda:	1e61      	subs	r1, r4, #1
 800dcdc:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800dce0:	f801 2f01 	strb.w	r2, [r1, #1]!
 800dce4:	42a9      	cmp	r1, r5
 800dce6:	d1fb      	bne.n	800dce0 <__sccl+0x1c>
 800dce8:	b90b      	cbnz	r3, 800dcee <__sccl+0x2a>
 800dcea:	3801      	subs	r0, #1
 800dcec:	bd70      	pop	{r4, r5, r6, pc}
 800dcee:	f082 0201 	eor.w	r2, r2, #1
 800dcf2:	54e2      	strb	r2, [r4, r3]
 800dcf4:	4605      	mov	r5, r0
 800dcf6:	4628      	mov	r0, r5
 800dcf8:	f810 1b01 	ldrb.w	r1, [r0], #1
 800dcfc:	292d      	cmp	r1, #45	; 0x2d
 800dcfe:	d006      	beq.n	800dd0e <__sccl+0x4a>
 800dd00:	295d      	cmp	r1, #93	; 0x5d
 800dd02:	d0f3      	beq.n	800dcec <__sccl+0x28>
 800dd04:	b909      	cbnz	r1, 800dd0a <__sccl+0x46>
 800dd06:	4628      	mov	r0, r5
 800dd08:	e7f0      	b.n	800dcec <__sccl+0x28>
 800dd0a:	460b      	mov	r3, r1
 800dd0c:	e7f1      	b.n	800dcf2 <__sccl+0x2e>
 800dd0e:	786e      	ldrb	r6, [r5, #1]
 800dd10:	2e5d      	cmp	r6, #93	; 0x5d
 800dd12:	d0fa      	beq.n	800dd0a <__sccl+0x46>
 800dd14:	42b3      	cmp	r3, r6
 800dd16:	dcf8      	bgt.n	800dd0a <__sccl+0x46>
 800dd18:	3502      	adds	r5, #2
 800dd1a:	4619      	mov	r1, r3
 800dd1c:	3101      	adds	r1, #1
 800dd1e:	428e      	cmp	r6, r1
 800dd20:	5462      	strb	r2, [r4, r1]
 800dd22:	dcfb      	bgt.n	800dd1c <__sccl+0x58>
 800dd24:	1af1      	subs	r1, r6, r3
 800dd26:	3901      	subs	r1, #1
 800dd28:	1c58      	adds	r0, r3, #1
 800dd2a:	42b3      	cmp	r3, r6
 800dd2c:	bfa8      	it	ge
 800dd2e:	2100      	movge	r1, #0
 800dd30:	1843      	adds	r3, r0, r1
 800dd32:	e7e0      	b.n	800dcf6 <__sccl+0x32>

0800dd34 <_raise_r>:
 800dd34:	291f      	cmp	r1, #31
 800dd36:	b538      	push	{r3, r4, r5, lr}
 800dd38:	4604      	mov	r4, r0
 800dd3a:	460d      	mov	r5, r1
 800dd3c:	d904      	bls.n	800dd48 <_raise_r+0x14>
 800dd3e:	2316      	movs	r3, #22
 800dd40:	6003      	str	r3, [r0, #0]
 800dd42:	f04f 30ff 	mov.w	r0, #4294967295
 800dd46:	bd38      	pop	{r3, r4, r5, pc}
 800dd48:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dd4a:	b112      	cbz	r2, 800dd52 <_raise_r+0x1e>
 800dd4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dd50:	b94b      	cbnz	r3, 800dd66 <_raise_r+0x32>
 800dd52:	4620      	mov	r0, r4
 800dd54:	f000 f830 	bl	800ddb8 <_getpid_r>
 800dd58:	462a      	mov	r2, r5
 800dd5a:	4601      	mov	r1, r0
 800dd5c:	4620      	mov	r0, r4
 800dd5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd62:	f000 b817 	b.w	800dd94 <_kill_r>
 800dd66:	2b01      	cmp	r3, #1
 800dd68:	d00a      	beq.n	800dd80 <_raise_r+0x4c>
 800dd6a:	1c59      	adds	r1, r3, #1
 800dd6c:	d103      	bne.n	800dd76 <_raise_r+0x42>
 800dd6e:	2316      	movs	r3, #22
 800dd70:	6003      	str	r3, [r0, #0]
 800dd72:	2001      	movs	r0, #1
 800dd74:	e7e7      	b.n	800dd46 <_raise_r+0x12>
 800dd76:	2400      	movs	r4, #0
 800dd78:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dd7c:	4628      	mov	r0, r5
 800dd7e:	4798      	blx	r3
 800dd80:	2000      	movs	r0, #0
 800dd82:	e7e0      	b.n	800dd46 <_raise_r+0x12>

0800dd84 <raise>:
 800dd84:	4b02      	ldr	r3, [pc, #8]	; (800dd90 <raise+0xc>)
 800dd86:	4601      	mov	r1, r0
 800dd88:	6818      	ldr	r0, [r3, #0]
 800dd8a:	f7ff bfd3 	b.w	800dd34 <_raise_r>
 800dd8e:	bf00      	nop
 800dd90:	200001f4 	.word	0x200001f4

0800dd94 <_kill_r>:
 800dd94:	b538      	push	{r3, r4, r5, lr}
 800dd96:	4d07      	ldr	r5, [pc, #28]	; (800ddb4 <_kill_r+0x20>)
 800dd98:	2300      	movs	r3, #0
 800dd9a:	4604      	mov	r4, r0
 800dd9c:	4608      	mov	r0, r1
 800dd9e:	4611      	mov	r1, r2
 800dda0:	602b      	str	r3, [r5, #0]
 800dda2:	f7f6 fda5 	bl	80048f0 <_kill>
 800dda6:	1c43      	adds	r3, r0, #1
 800dda8:	d102      	bne.n	800ddb0 <_kill_r+0x1c>
 800ddaa:	682b      	ldr	r3, [r5, #0]
 800ddac:	b103      	cbz	r3, 800ddb0 <_kill_r+0x1c>
 800ddae:	6023      	str	r3, [r4, #0]
 800ddb0:	bd38      	pop	{r3, r4, r5, pc}
 800ddb2:	bf00      	nop
 800ddb4:	20005698 	.word	0x20005698

0800ddb8 <_getpid_r>:
 800ddb8:	f7f6 bd92 	b.w	80048e0 <_getpid>

0800ddbc <__submore>:
 800ddbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddc0:	460c      	mov	r4, r1
 800ddc2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ddc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ddc8:	4299      	cmp	r1, r3
 800ddca:	d11d      	bne.n	800de08 <__submore+0x4c>
 800ddcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ddd0:	f7fd fe2e 	bl	800ba30 <_malloc_r>
 800ddd4:	b918      	cbnz	r0, 800ddde <__submore+0x22>
 800ddd6:	f04f 30ff 	mov.w	r0, #4294967295
 800ddda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dde2:	63a3      	str	r3, [r4, #56]	; 0x38
 800dde4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800dde8:	6360      	str	r0, [r4, #52]	; 0x34
 800ddea:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ddee:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ddf2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800ddf6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ddfa:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800ddfe:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800de02:	6020      	str	r0, [r4, #0]
 800de04:	2000      	movs	r0, #0
 800de06:	e7e8      	b.n	800ddda <__submore+0x1e>
 800de08:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800de0a:	0077      	lsls	r7, r6, #1
 800de0c:	463a      	mov	r2, r7
 800de0e:	f7ff fc05 	bl	800d61c <_realloc_r>
 800de12:	4605      	mov	r5, r0
 800de14:	2800      	cmp	r0, #0
 800de16:	d0de      	beq.n	800ddd6 <__submore+0x1a>
 800de18:	eb00 0806 	add.w	r8, r0, r6
 800de1c:	4601      	mov	r1, r0
 800de1e:	4632      	mov	r2, r6
 800de20:	4640      	mov	r0, r8
 800de22:	f7fd fd53 	bl	800b8cc <memcpy>
 800de26:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800de2a:	f8c4 8000 	str.w	r8, [r4]
 800de2e:	e7e9      	b.n	800de04 <__submore+0x48>

0800de30 <_fstat_r>:
 800de30:	b538      	push	{r3, r4, r5, lr}
 800de32:	4d07      	ldr	r5, [pc, #28]	; (800de50 <_fstat_r+0x20>)
 800de34:	2300      	movs	r3, #0
 800de36:	4604      	mov	r4, r0
 800de38:	4608      	mov	r0, r1
 800de3a:	4611      	mov	r1, r2
 800de3c:	602b      	str	r3, [r5, #0]
 800de3e:	f7f6 fdb6 	bl	80049ae <_fstat>
 800de42:	1c43      	adds	r3, r0, #1
 800de44:	d102      	bne.n	800de4c <_fstat_r+0x1c>
 800de46:	682b      	ldr	r3, [r5, #0]
 800de48:	b103      	cbz	r3, 800de4c <_fstat_r+0x1c>
 800de4a:	6023      	str	r3, [r4, #0]
 800de4c:	bd38      	pop	{r3, r4, r5, pc}
 800de4e:	bf00      	nop
 800de50:	20005698 	.word	0x20005698

0800de54 <_isatty_r>:
 800de54:	b538      	push	{r3, r4, r5, lr}
 800de56:	4d06      	ldr	r5, [pc, #24]	; (800de70 <_isatty_r+0x1c>)
 800de58:	2300      	movs	r3, #0
 800de5a:	4604      	mov	r4, r0
 800de5c:	4608      	mov	r0, r1
 800de5e:	602b      	str	r3, [r5, #0]
 800de60:	f7f6 fdb5 	bl	80049ce <_isatty>
 800de64:	1c43      	adds	r3, r0, #1
 800de66:	d102      	bne.n	800de6e <_isatty_r+0x1a>
 800de68:	682b      	ldr	r3, [r5, #0]
 800de6a:	b103      	cbz	r3, 800de6e <_isatty_r+0x1a>
 800de6c:	6023      	str	r3, [r4, #0]
 800de6e:	bd38      	pop	{r3, r4, r5, pc}
 800de70:	20005698 	.word	0x20005698

0800de74 <_malloc_usable_size_r>:
 800de74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de78:	1f18      	subs	r0, r3, #4
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	bfbc      	itt	lt
 800de7e:	580b      	ldrlt	r3, [r1, r0]
 800de80:	18c0      	addlt	r0, r0, r3
 800de82:	4770      	bx	lr

0800de84 <_init>:
 800de84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de86:	bf00      	nop
 800de88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de8a:	bc08      	pop	{r3}
 800de8c:	469e      	mov	lr, r3
 800de8e:	4770      	bx	lr

0800de90 <_fini>:
 800de90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de92:	bf00      	nop
 800de94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de96:	bc08      	pop	{r3}
 800de98:	469e      	mov	lr, r3
 800de9a:	4770      	bx	lr
